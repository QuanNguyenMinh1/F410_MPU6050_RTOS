
F410_MPU6050_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08009000  08009000  00019000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093ac  080093ac  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b4  080093b4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b8  080093b8  000193b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080093bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  200001d8  08009594  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004440  08009594  00024440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c04  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035f3  00000000  00000000  00035e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00039448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd4  00000000  00000000  0003a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017dd2  00000000  00000000  0003b854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f50  00000000  00000000  00053626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bc92  00000000  00000000  0006d576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006444  00000000  00000000  000f9208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000ff64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008fe4 	.word	0x08008fe4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008fe4 	.word	0x08008fe4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200001f4 	.word	0x200001f4
 8000f14:	20000248 	.word	0x20000248

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f001 f86b 	bl	8002030 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 f9a6 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000448 	.word	0x20000448
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 fd2f 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */
//  while (MPU6050_Init(&hi2c1) == 1);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f83f 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 f8d1 	bl	8001128 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f86:	f000 f8a5 	bl	80010d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f8a:	f7ff ffc5 	bl	8000f18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
St_Queue_Handler = xQueueCreate(2, sizeof(MPU6050_t));
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2160      	movs	r1, #96	; 0x60
 8000f92:	2002      	movs	r0, #2
 8000f94:	f003 ff5c 	bl	8004e50 <xQueueGenericCreate>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <main+0x68>)
 8000f9c:	6013      	str	r3, [r2, #0]
xTaskCreate(Receiver_Task, "RECEIVER", 128, NULL, 1, &Receiver_Task_Handler);
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <main+0x6c>)
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <main+0x70>)
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <main+0x74>)
 8000fae:	f004 f974 	bl	800529a <xTaskCreate>
xTaskCreate(MPU6050ReadAll_Task, "MPU6050READALL", 128, NULL, 2, &MPU6050ReadAll_Task_Handler);
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <main+0x78>)
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <main+0x7c>)
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <main+0x80>)
 8000fc2:	f004 f96a 	bl	800529a <xTaskCreate>

vTaskStartScheduler();
 8000fc6:	f004 fad3 	bl	8005570 <vTaskStartScheduler>
//  while (MPU6050_Init(&hi2c1) == 1);
  stat = MPU6050_Init(&hi2c1);
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <main+0x84>)
 8000fcc:	f000 f975 	bl	80012ba <MPU6050_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <main+0x88>)
 8000fd6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x64>
 8000fda:	bf00      	nop
 8000fdc:	20000544 	.word	0x20000544
 8000fe0:	2000054c 	.word	0x2000054c
 8000fe4:	08009000 	.word	0x08009000
 8000fe8:	08001251 	.word	0x08001251
 8000fec:	20000548 	.word	0x20000548
 8000ff0:	0800900c 	.word	0x0800900c
 8000ff4:	08001195 	.word	0x08001195
 8000ff8:	20000448 	.word	0x20000448
 8000ffc:	20000540 	.word	0x20000540

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2234      	movs	r2, #52	; 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 f897 	bl	8007142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <SystemClock_Config+0xcc>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <SystemClock_Config+0xcc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <SystemClock_Config+0xd0>)
 800104a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <SystemClock_Config+0xd0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001064:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001070:	2304      	movs	r3, #4
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001074:	2348      	movs	r3, #72	; 0x48
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f9e3 	bl	8003454 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001094:	f000 f90c 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 ff7b 	bl	8002fb0 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010c0:	f000 f8f6 	bl	80012b0 <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3750      	adds	r7, #80	; 0x50
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_USART2_UART_Init+0x50>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_USART2_UART_Init+0x4c>)
 800110c:	f002 fe70 	bl	8003df0 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001116:	f000 f8cb 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000049c 	.word	0x2000049c
 8001124:	40004400 	.word	0x40004400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_GPIO_Init+0x68>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <MX_GPIO_Init+0x68>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_GPIO_Init+0x68>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_GPIO_Init+0x68>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_GPIO_Init+0x68>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_GPIO_Init+0x68>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_GPIO_Init+0x68>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <MX_GPIO_Init+0x68>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_GPIO_Init+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <MPU6050ReadAll_Task>:

/* USER CODE BEGIN 4 */

void MPU6050ReadAll_Task (void *argument)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b09d      	sub	sp, #116	; 0x74
 8001198:	af00      	add	r7, sp, #0
 800119a:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t TickDelay = pdMS_TO_TICKS(3000);
 800119c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	while(1)
	{
		mpu6050_data = MPU6050_Read_All();
 80011a2:	4c2a      	ldr	r4, [pc, #168]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f8de 	bl	8001368 <MPU6050_Read_All>
 80011ac:	4620      	mov	r0, r4
 80011ae:	463b      	mov	r3, r7
 80011b0:	2260      	movs	r2, #96	; 0x60
 80011b2:	4619      	mov	r1, r3
 80011b4:	f006 f845 	bl	8007242 <memcpy>

		MPU6050_t *ptrtostruct;

		/****** ALOOCATE MEMORY TO THE PTR ********/
		ptrtostruct = pvPortMalloc(sizeof (MPU6050_t));
 80011b8:	2060      	movs	r0, #96	; 0x60
 80011ba:	f005 f86d 	bl	8006298 <pvPortMalloc>
 80011be:	66b8      	str	r0, [r7, #104]	; 0x68
		/********** LOAD THE DATA ***********/
		ptrtostruct->Accel_X_RAW = mpu6050_data.Accel_X_RAW;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011c8:	801a      	strh	r2, [r3, #0]
		ptrtostruct->Accel_Y_RAW = mpu6050_data.Accel_Y_RAW;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80011d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011d2:	805a      	strh	r2, [r3, #2]
		ptrtostruct->Accel_Z_RAW = mpu6050_data.Accel_Z_RAW;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011d6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80011da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011dc:	809a      	strh	r2, [r3, #4]

		ptrtostruct->Gyro_X_RAW = mpu6050_data.Gyro_X_RAW;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011e0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80011e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011e6:	841a      	strh	r2, [r3, #32]
		ptrtostruct->Gyro_Y_RAW = mpu6050_data.Gyro_Y_RAW;
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011ea:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80011ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011f0:	845a      	strh	r2, [r3, #34]	; 0x22
		ptrtostruct->Gyro_Z_RAW = mpu6050_data.Gyro_Z_RAW;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011f4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80011f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011fa:	849a      	strh	r2, [r3, #36]	; 0x24

		ptrtostruct->Ax = mpu6050_data.Ax;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 80011fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001204:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrtostruct->Ay = mpu6050_data.Ay;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 800120a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800120e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001210:	e9c1 2304 	strd	r2, r3, [r1, #16]
		ptrtostruct->Az = mpu6050_data.Az;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 8001216:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800121a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800121c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		ptrtostruct->Gx = mpu6050_data.Gx;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 8001222:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001226:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001228:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		ptrtostruct->Gy = mpu6050_data.Gy;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 800122e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001234:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		ptrtostruct->Gz = mpu6050_data.Gz;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <MPU6050ReadAll_Task+0xb8>)
 800123a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800123e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001240:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
////		if (xQueueSend(St_Queue_Handler, &ptrtostruct, portMAX_DELAY) == pdPASS)
////		{
//////		char *str2 = " Successfully sent the to the queue\nLeaving MPU6050ReadAll_Task\n\n\n";
//////		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
////		}
		vTaskDelay(TickDelay);
 8001244:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001246:	f004 f95f 	bl	8005508 <vTaskDelay>
	{
 800124a:	e7aa      	b.n	80011a2 <MPU6050ReadAll_Task+0xe>
 800124c:	200004e0 	.word	0x200004e0

08001250 <Receiver_Task>:
	}
}

void Receiver_Task (void *argument)	//se la ham pid_compute()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	MPU6050_t *Rptrtostruct;
	uint32_t TickDelay = pdMS_TO_TICKS(4000);
 8001258:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800125c:	60fb      	str	r3, [r7, #12]
	while (1)
	{

		/**** RECEIVE FROM QUEUE *****/
		if (xQueueReceive(St_Queue_Handler, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <Receiver_Task+0x38>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f107 0108 	add.w	r1, r7, #8
 8001266:	f04f 32ff 	mov.w	r2, #4294967295
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fe4a 	bl	8004f04 <xQueueReceive>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d103      	bne.n	800127e <Receiver_Task+0x2e>
		{
		    vPortFree(Rptrtostruct);
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f8d9 	bl	8006430 <vPortFree>
		}

		vTaskDelay(TickDelay);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f004 f942 	bl	8005508 <vTaskDelay>
		if (xQueueReceive(St_Queue_Handler, &Rptrtostruct, portMAX_DELAY) == pdPASS)
 8001284:	e7eb      	b.n	800125e <Receiver_Task+0xe>
 8001286:	bf00      	nop
 8001288:	20000544 	.word	0x20000544

0800128c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129e:	f000 fbbf 	bl	8001a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40014800 	.word	0x40014800

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>

080012ba <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b088      	sub	sp, #32
 80012be:	af04      	add	r7, sp, #16
 80012c0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	2275      	movs	r2, #117	; 0x75
 80012d4:	21d0      	movs	r1, #208	; 0xd0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f001 f8e8 	bl	80024ac <HAL_I2C_Mem_Read>

//    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b68      	cmp	r3, #104	; 0x68
 80012e0:	d13d      	bne.n	800135e <MPU6050_Init+0xa4>

    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030e 	add.w	r3, r7, #14
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	226b      	movs	r2, #107	; 0x6b
 80012f8:	21d0      	movs	r1, #208	; 0xd0
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 ffdc 	bl	80022b8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001300:	2307      	movs	r3, #7
 8001302:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	f107 030e 	add.w	r3, r7, #14
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	2219      	movs	r2, #25
 8001316:	21d0      	movs	r1, #208	; 0xd0
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 ffcd 	bl	80022b8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	f107 030e 	add.w	r3, r7, #14
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	221c      	movs	r2, #28
 8001334:	21d0      	movs	r1, #208	; 0xd0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 ffbe 	bl	80022b8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	f107 030e 	add.w	r3, r7, #14
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	221b      	movs	r2, #27
 8001352:	21d0      	movs	r1, #208	; 0xd0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 ffaf 	bl	80022b8 <HAL_I2C_Mem_Write>
        return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <MPU6050_Init+0xa6>
    }
    return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <MPU6050_Read_All>:
    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

//void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
MPU6050_t MPU6050_Read_All() {
 8001368:	b580      	push	{r7, lr}
 800136a:	b0a2      	sub	sp, #136	; 0x88
 800136c:	af04      	add	r7, sp, #16
 800136e:	6078      	str	r0, [r7, #4]
    int16_t temp;
    MPU6050_t DataStruct;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	230e      	movs	r3, #14
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	223b      	movs	r2, #59	; 0x3b
 8001382:	21d0      	movs	r1, #208	; 0xd0
 8001384:	4860      	ldr	r0, [pc, #384]	; (8001508 <MPU6050_Read_All+0x1a0>)
 8001386:	f001 f891 	bl	80024ac <HAL_I2C_Mem_Read>

    DataStruct.Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800138a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b21a      	sxth	r2, r3
 8001392:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	813b      	strh	r3, [r7, #8]
    DataStruct.Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800139e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	817b      	strh	r3, [r7, #10]
    DataStruct.Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80013b2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	81bb      	strh	r3, [r7, #12]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80013c6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    DataStruct.Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80013da:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	853b      	strh	r3, [r7, #40]	; 0x28
    DataStruct.Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80013ee:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	857b      	strh	r3, [r7, #42]	; 0x2a
    DataStruct.Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001402:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	85bb      	strh	r3, [r7, #44]	; 0x2c

    DataStruct.Ax = DataStruct.Accel_X_RAW / 16384.0;
 8001416:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8a2 	bl	8000564 <__aeabi_i2d>
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <MPU6050_Read_All+0x1a4>)
 8001426:	f7ff fa31 	bl	800088c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    DataStruct.Ay = DataStruct.Accel_Y_RAW / 16384.0;
 8001432:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f894 	bl	8000564 <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <MPU6050_Read_All+0x1a4>)
 8001442:	f7ff fa23 	bl	800088c <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    DataStruct.Az = DataStruct.Accel_Z_RAW / Accel_Z_corrector;
 800144e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f886 	bl	8000564 <__aeabi_i2d>
 8001458:	a327      	add	r3, pc, #156	; (adr r3, 80014f8 <MPU6050_Read_All+0x190>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff fa15 	bl	800088c <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	e9c7 2308 	strd	r2, r3, [r7, #32]
    DataStruct.Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800146a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001510 <MPU6050_Read_All+0x1a8>
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001514 <MPU6050_Read_All+0x1ac>
 8001482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001486:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    DataStruct.Gx = DataStruct.Gyro_X_RAW / 131.0;
 800148a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f868 	bl	8000564 <__aeabi_i2d>
 8001494:	a31a      	add	r3, pc, #104	; (adr r3, 8001500 <MPU6050_Read_All+0x198>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff f9f7 	bl	800088c <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    DataStruct.Gy = DataStruct.Gyro_Y_RAW / 131.0;
 80014a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f85a 	bl	8000564 <__aeabi_i2d>
 80014b0:	a313      	add	r3, pc, #76	; (adr r3, 8001500 <MPU6050_Read_All+0x198>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f9e9 	bl	800088c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    DataStruct.Gz = DataStruct.Gyro_Z_RAW / 131.0;
 80014c2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f84c 	bl	8000564 <__aeabi_i2d>
 80014cc:	a30c      	add	r3, pc, #48	; (adr r3, 8001500 <MPU6050_Read_All+0x198>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f9db 	bl	800088c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    return DataStruct;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2260      	movs	r2, #96	; 0x60
 80014e8:	4619      	mov	r1, r3
 80014ea:	f005 feaa 	bl	8007242 <memcpy>
}
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	3778      	adds	r7, #120	; 0x78
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40cc2900 	.word	0x40cc2900
 8001500:	00000000 	.word	0x00000000
 8001504:	40606000 	.word	0x40606000
 8001508:	20000448 	.word	0x20000448
 800150c:	40d00000 	.word	0x40d00000
 8001510:	43aa0000 	.word	0x43aa0000
 8001514:	42121eb8 	.word	0x42121eb8

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x54>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_MspInit+0x54>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x54>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x54>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x54>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_MspInit+0x54>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	f06f 0001 	mvn.w	r0, #1
 800155e:	f000 fb37 	bl	8001bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ae:	23c0      	movs	r3, #192	; 0xc0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b2:	2312      	movs	r3, #18
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015be:	2304      	movs	r3, #4
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x8c>)
 80015ca:	f000 fbbd 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_UART_MspInit+0x94>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d133      	bne.n	800168a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_UART_MspInit+0x98>)
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_UART_MspInit+0x98>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166a:	2307      	movs	r3, #7
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <HAL_UART_MspInit+0x9c>)
 8001676:	f000 fb67 	bl	8001d48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	2026      	movs	r0, #38	; 0x26
 8001680:	f000 faa6 	bl	8001bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001684:	2026      	movs	r0, #38	; 0x26
 8001686:	f000 fabf 	bl	8001c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40004400 	.word	0x40004400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_InitTick+0xd0>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_InitTick+0xd0>)
 80016ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016be:	6453      	str	r3, [r2, #68]	; 0x44
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_InitTick+0xd0>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 020c 	add.w	r2, r7, #12
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fe8a 	bl	80033f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016dc:	f001 fe74 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 80016e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <HAL_InitTick+0xd4>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	3b01      	subs	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_InitTick+0xd8>)
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_InitTick+0xdc>)
 80016f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_InitTick+0xd8>)
 80016f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016fc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_InitTick+0xd8>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_InitTick+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_InitTick+0xd8>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_InitTick+0xd8>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <HAL_InitTick+0xd8>)
 8001718:	f002 f920 	bl	800395c <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001726:	2b00      	cmp	r3, #0
 8001728:	d11b      	bne.n	8001762 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <HAL_InitTick+0xd8>)
 800172c:	f002 f970 	bl	8003a10 <HAL_TIM_Base_Start_IT>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800173a:	2b00      	cmp	r3, #0
 800173c:	d111      	bne.n	8001762 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800173e:	201a      	movs	r0, #26
 8001740:	f000 fa62 	bl	8001c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	d808      	bhi.n	800175c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800174a:	2200      	movs	r2, #0
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	201a      	movs	r0, #26
 8001750:	f000 fa3e 	bl	8001bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0xe0>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e002      	b.n	8001762 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001766:	4618      	mov	r0, r3
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	431bde83 	.word	0x431bde83
 8001778:	20000550 	.word	0x20000550
 800177c:	40014800 	.word	0x40014800
 8001780:	20000004 	.word	0x20000004

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80017b6:	f002 f979 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000550 	.word	0x20000550

080017c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART2_IRQHandler+0x10>)
 80017ca:	f002 fb5f 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000049c 	.word	0x2000049c

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f2:	f005 fcf9 	bl	80071e8 <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800181a:	e7fe      	b.n	800181a <_exit+0x12>

0800181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
  }

  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
  }
  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f005 fc5e 	bl	80071e8 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20008000 	.word	0x20008000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000598 	.word	0x20000598
 8001960:	20004440 	.word	0x20004440

08001964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b2:	f7ff ffd7 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f005 fc1d 	bl	80071f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff fadb 	bl	8000f74 <main>
  bx  lr    
 80019be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019cc:	080093bc 	.word	0x080093bc
  ldr r2, =_sbss
 80019d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019d4:	20004440 	.word	0x20004440

080019d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_Init+0x40>)
 80019e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_Init+0x40>)
 80019f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x40>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f8d8 	bl	8001bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f7ff fe48 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fd82 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	2000059c 	.word	0x2000059c

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000059c 	.word	0x2000059c

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff4c 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be2:	f7ff ff61 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7ff ffb1 	bl	8001b54 <NVIC_EncodePriority>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff80 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff54 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c32:	f7ff ff09 	bl	8001a48 <HAL_GetTick>
 8001c36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e052      	b.n	8001cfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0216 	bic.w	r2, r2, #22
 8001c64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_DMA_Abort+0x62>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0208 	bic.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca6:	e013      	b.n	8001cd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca8:	f7ff fece 	bl	8001a48 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d90c      	bls.n	8001cd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e015      	b.n	8001cfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1e4      	bne.n	8001ca8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	223f      	movs	r2, #63	; 0x3f
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00c      	b.n	8001d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e14d      	b.n	8002000 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f040 813c 	bne.w	8001ffa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d005      	beq.n	8001d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d130      	bne.n	8001dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8096 	beq.w	8001ffa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_GPIO_Init+0x2d4>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x1ea>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x1e6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_GPIO_Init+0x2e0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x1e2>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x1ec>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x1ec>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x1ec>
 8001f32:	2300      	movs	r3, #0
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2d4>)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_GPIO_Init+0x2e4>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b0f      	cmp	r3, #15
 8002004:	f67f aeae 	bls.w	8001d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40013800 	.word	0x40013800
 8002020:	40020000 	.word	0x40020000
 8002024:	40020400 	.word	0x40020400
 8002028:	40020800 	.word	0x40020800
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e12b      	b.n	800229a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fa8a 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002094:	f001 f984 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a81      	ldr	r2, [pc, #516]	; (80022a4 <HAL_I2C_Init+0x274>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d807      	bhi.n	80020b4 <HAL_I2C_Init+0x84>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a80      	ldr	r2, [pc, #512]	; (80022a8 <HAL_I2C_Init+0x278>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e006      	b.n	80020c2 <HAL_I2C_Init+0x92>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	; (80022ac <HAL_I2C_Init+0x27c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0e7      	b.n	800229a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a78      	ldr	r2, [pc, #480]	; (80022b0 <HAL_I2C_Init+0x280>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_I2C_Init+0x274>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d802      	bhi.n	8002104 <HAL_I2C_Init+0xd4>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	e009      	b.n	8002118 <HAL_I2C_Init+0xe8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a69      	ldr	r2, [pc, #420]	; (80022b4 <HAL_I2C_Init+0x284>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800212a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	495c      	ldr	r1, [pc, #368]	; (80022a4 <HAL_I2C_Init+0x274>)
 8002134:	428b      	cmp	r3, r1
 8002136:	d819      	bhi.n	800216c <HAL_I2C_Init+0x13c>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e59      	subs	r1, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fbb1 f3f3 	udiv	r3, r1, r3
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	f640 73fc 	movw	r3, #4092	; 0xffc
 800214c:	400b      	ands	r3, r1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_I2C_Init+0x138>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e59      	subs	r1, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	e051      	b.n	800220c <HAL_I2C_Init+0x1dc>
 8002168:	2304      	movs	r3, #4
 800216a:	e04f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_I2C_Init+0x168>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e012      	b.n	80021be <HAL_I2C_Init+0x18e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x196>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e022      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_Init+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e58      	subs	r0, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	440b      	add	r3, r1
 80021dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6809      	ldr	r1, [r1, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800223a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6911      	ldr	r1, [r2, #16]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	000186a0 	.word	0x000186a0
 80022a8:	001e847f 	.word	0x001e847f
 80022ac:	003d08ff 	.word	0x003d08ff
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d2:	f7ff fbb9 	bl	8001a48 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	f040 80d9 	bne.w	8002498 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2319      	movs	r3, #25
 80022ec:	2201      	movs	r2, #1
 80022ee:	496d      	ldr	r1, [pc, #436]	; (80024a4 <HAL_I2C_Mem_Write+0x1ec>)
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fc7f 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0cc      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_I2C_Mem_Write+0x56>
 800230a:	2302      	movs	r3, #2
 800230c:	e0c5      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d007      	beq.n	8002334 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002376:	88f8      	ldrh	r0, [r7, #6]
 8002378:	893a      	ldrh	r2, [r7, #8]
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4603      	mov	r3, r0
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fab6 	bl	80028f8 <I2C_RequestMemoryWrite>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d052      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e081      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fd00 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11b      	bne.n	8002438 <HAL_I2C_Mem_Write+0x180>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d017      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1aa      	bne.n	8002396 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fcec 	bl	8002e22 <I2C_WaitOnBTFFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e016      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00100002 	.word	0x00100002
 80024a8:	ffff0000 	.word	0xffff0000

080024ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c6:	f7ff fabf 	bl	8001a48 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 8208 	bne.w	80028ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2319      	movs	r3, #25
 80024e0:	2201      	movs	r2, #1
 80024e2:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_I2C_Mem_Read+0x224>)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fb85 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	e1fb      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Mem_Read+0x56>
 80024fe:	2302      	movs	r3, #2
 8002500:	e1f4      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d007      	beq.n	8002528 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2222      	movs	r2, #34	; 0x22
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a5b      	ldr	r2, [pc, #364]	; (80026d4 <HAL_I2C_Mem_Read+0x228>)
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	8979      	ldrh	r1, [r7, #10]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fa52 	bl	8002a24 <I2C_RequestMemoryRead>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1b0      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d113      	bne.n	80025ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e184      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11b      	bne.n	80025fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e164      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11b      	bne.n	800263a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	e144      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002650:	e138      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	2b03      	cmp	r3, #3
 8002658:	f200 80f1 	bhi.w	800283e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b01      	cmp	r3, #1
 8002662:	d123      	bne.n	80026ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc1b 	bl	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e139      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026aa:	e10b      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d14e      	bne.n	8002752 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2200      	movs	r2, #0
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_I2C_Mem_Read+0x22c>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa98 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e10e      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
 80026ce:	bf00      	nop
 80026d0:	00100002 	.word	0x00100002
 80026d4:	ffff0000 	.word	0xffff0000
 80026d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002750:	e0b8      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2200      	movs	r2, #0
 800275a:	4966      	ldr	r1, [pc, #408]	; (80028f4 <HAL_I2C_Mem_Read+0x448>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fa49 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0bf      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2200      	movs	r2, #0
 80027b6:	494f      	ldr	r1, [pc, #316]	; (80028f4 <HAL_I2C_Mem_Read+0x448>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa1b 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e091      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800283c:	e042      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fb2e 	bl	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04c      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d118      	bne.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f aec2 	bne.w	8002652 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010004 	.word	0x00010004

080028f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2200      	movs	r2, #0
 800292a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f960 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d103      	bne.n	8002952 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e05f      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	492d      	ldr	r1, [pc, #180]	; (8002a20 <I2C_RequestMemoryWrite+0x128>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f998 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04c      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa02 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02b      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c4:	893b      	ldrh	r3, [r7, #8]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e021      	b.n	8002a14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f9dc 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d107      	bne.n	8002a06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e005      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00010002 	.word	0x00010002

08002a24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8c2 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a84:	d103      	bne.n	8002a8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0aa      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	4952      	ldr	r1, [pc, #328]	; (8002bf0 <I2C_RequestMemoryRead+0x1cc>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f8fa 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e097      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	6a39      	ldr	r1, [r7, #32]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f964 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e076      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	e021      	b.n	8002b50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	6a39      	ldr	r1, [r7, #32]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f93e 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d107      	bne.n	8002b42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e050      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b46:	893b      	ldrh	r3, [r7, #8]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f923 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e035      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f82b 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d103      	bne.n	8002bbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e013      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <I2C_RequestMemoryRead+0x1cc>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f863 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010002 	.word	0x00010002

08002bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	e025      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d021      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe ff1b 	bl	8001a48 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e023      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10d      	bne.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	e00c      	b.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0b6      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb0:	e051      	b.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d123      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0204 	orr.w	r2, r3, #4
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e046      	b.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d021      	beq.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe fe99 	bl	8001a48 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e020      	b.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10c      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e00b      	b.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d18d      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	e02d      	b.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8ce 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02d      	b.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d021      	beq.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fe3f 	bl	8001a48 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d116      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d1ca      	bne.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2e:	e02d      	b.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f88d 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e02d      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d021      	beq.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e48:	f7fe fdfe 	bl	8001a48 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d1ca      	bne.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb0:	e042      	b.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d119      	bne.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0210 	mvn.w	r2, #16
 8002ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e029      	b.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef4:	f7fe fda8 	bl	8001a48 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d1b5      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d11b      	bne.n	8002fa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cc      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d90c      	bls.n	8002fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d044      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e067      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fe fcd2 	bl	8001a48 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe fcce 	bl	8001a48 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e04f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe faa2 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08009024 	.word	0x08009024
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b094      	sub	sp, #80	; 0x50
 8003182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00d      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 80e1 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ae:	e0db      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031b4:	e0db      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_GetSysClockFreq+0x208>)
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ba:	e0d8      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c6:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
 80031dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ebb2 0801 	subs.w	r8, r2, r1
 8003234:	4659      	mov	r1, fp
 8003236:	eb63 0901 	sbc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	462b      	mov	r3, r5
 800325c:	eb49 0303 	adc.w	r3, r9, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800326e:	4629      	mov	r1, r5
 8003270:	024b      	lsls	r3, r1, #9
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003278:	4621      	mov	r1, r4
 800327a:	024a      	lsls	r2, r1, #9
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328c:	f7fd fcac 	bl	8000be8 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	e058      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0159      	lsls	r1, r3, #5
 80032c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c6:	0150      	lsls	r0, r2, #5
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4641      	mov	r1, r8
 80032ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ec:	ebb2 040a 	subs.w	r4, r2, sl
 80032f0:	eb63 050b 	sbc.w	r5, r3, fp
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fd fc52 	bl	8000be8 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800335c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	; 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08009034 	.word	0x08009034

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08009034 	.word	0x08009034

080033f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	220f      	movs	r2, #15
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800340c:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCC_GetClockConfig+0x60>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40023c00 	.word	0x40023c00

08003454 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e273      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d075      	beq.n	800355e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d00c      	beq.n	8003498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b85      	ldr	r3, [pc, #532]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003486:	2b08      	cmp	r3, #8
 8003488:	d112      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800348a:	4b82      	ldr	r3, [pc, #520]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d10b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05b      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d157      	bne.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e24e      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x74>
 80034ba:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a75      	ldr	r2, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e01d      	b.n	8003504 <HAL_RCC_OscConfig+0xb0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x98>
 80034d2:	4b70      	ldr	r3, [pc, #448]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6f      	ldr	r2, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6c      	ldr	r2, [pc, #432]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0xb0>
 80034ec:	4b69      	ldr	r3, [pc, #420]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a68      	ldr	r2, [pc, #416]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe fa9c 	bl	8001a48 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003514:	f7fe fa98 	bl	8001a48 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e213      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0xc0>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fa88 	bl	8001a48 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fa84 	bl	8001a48 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1ff      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	4b51      	ldr	r3, [pc, #324]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d063      	beq.n	8003632 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11c      	bne.n	80035bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_RCC_OscConfig+0x152>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1d3      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ba:	e03a      	b.n	8003632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d020      	beq.n	8003606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <HAL_RCC_OscConfig+0x244>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe fa3d 	bl	8001a48 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe fa39 	bl	8001a48 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1b4      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4925      	ldr	r1, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
 8003604:	e015      	b.n	8003632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x244>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fa1c 	bl	8001a48 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe fa18 	bl	8001a48 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e193      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d036      	beq.n	80036ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x248>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fe f9fc 	bl	8001a48 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003654:	f7fe f9f8 	bl	8001a48 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e173      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_OscConfig+0x240>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x200>
 8003672:	e01b      	b.n	80036ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_OscConfig+0x248>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe f9e5 	bl	8001a48 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	e00e      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003682:	f7fe f9e1 	bl	8001a48 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d907      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e15c      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
 8003694:	40023800 	.word	0x40023800
 8003698:	42470000 	.word	0x42470000
 800369c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b8a      	ldr	r3, [pc, #552]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ea      	bne.n	8003682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8097 	beq.w	80037e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b83      	ldr	r3, [pc, #524]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6413      	str	r3, [r2, #64]	; 0x40
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x47c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x47c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x47c>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fe f9a1 	bl	8001a48 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fe f99d 	bl	8001a48 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e118      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x47c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x2ea>
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	e01c      	b.n	8003778 <HAL_RCC_OscConfig+0x324>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b05      	cmp	r3, #5
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x30c>
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a60      	ldr	r2, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x324>
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a59      	ldr	r2, [pc, #356]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe f962 	bl	8001a48 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe f95e 	bl	8001a48 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0d7      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RCC_OscConfig+0x334>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe f94c 	bl	8001a48 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe f948 	bl	8001a48 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0c1      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ee      	bne.n	80037b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a3a      	ldr	r2, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80037e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ad 	beq.w	800394c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d060      	beq.n	80038c0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d145      	bne.n	8003892 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x480>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fe f91c 	bl	8001a48 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe f918 	bl	8001a48 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e093      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	3b01      	subs	r3, #1
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	071b      	lsls	r3, r3, #28
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x480>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fe f8ed 	bl	8001a48 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe f8e9 	bl	8001a48 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e064      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x41e>
 8003890:	e05c      	b.n	800394c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x480>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe f8d6 	bl	8001a48 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f8d2 	bl	8001a48 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04d      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x478>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x44c>
 80038be:	e045      	b.n	800394c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e040      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d129      	bne.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d122      	bne.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	4293      	cmp	r3, r2
 8003912:	d119      	bne.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d10f      	bne.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f839 	bl	80039fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f9b6 	bl	8003d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e035      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIM_Base_Start_IT+0x90>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_TIM_Base_Start_IT+0x4e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_TIM_Base_Start_IT+0x94>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIM_Base_Start_IT+0x4e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_TIM_Base_Start_IT+0x98>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d010      	beq.n	8003a92 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	e007      	b.n	8003a92 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40014000 	.word	0x40014000

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8ee 	bl	8003cd0 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8e0 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f8f1 	bl	8003ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8c4 	bl	8003cd0 <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8b6 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8c7 	bl	8003ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f89a 	bl	8003cd0 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f88c 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f89d 	bl	8003ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f870 	bl	8003cd0 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f862 	bl	8003cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f873 	bl	8003ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fb2e 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8c0 	bl	8003ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f838 	bl	8003cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f88a 	bl	8003dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <TIM_Base_SetConfig+0xac>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_Base_SetConfig+0x20>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <TIM_Base_SetConfig+0xb0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d108      	bne.n	8003d3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <TIM_Base_SetConfig+0xac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0x52>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <TIM_Base_SetConfig+0xb0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0x52>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <TIM_Base_SetConfig+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0x52>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <TIM_Base_SetConfig+0xb8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <TIM_Base_SetConfig+0xac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d103      	bne.n	8003da4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	615a      	str	r2, [r3, #20]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e03f      	b.n	8003e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd fbf2 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	; 0x24
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fc7b 	bl	8004730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0ba      	sub	sp, #232	; 0xe8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb65 	bl	80045ba <UART_Receive_IT>
      return;
 8003ef0:	e256      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80de 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
 8003efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80d1 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0208 	orr.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 81ed 	beq.w	8004396 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 faf0 	bl	80045ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_UART_IRQHandler+0x17a>
 8003ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04f      	beq.n	80040a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9f8 	bl	80043fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d141      	bne.n	800409e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800405e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1d9      	bne.n	800401a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d013      	beq.n	8004096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	4a7d      	ldr	r2, [pc, #500]	; (8004268 <HAL_UART_IRQHandler+0x3dc>)
 8004074:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fe42 	bl	8001d04 <HAL_DMA_Abort_IT>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004090:	4610      	mov	r0, r2
 8004092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00e      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f99a 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00a      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f996 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e006      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f992 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040b2:	e170      	b.n	8004396 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	bf00      	nop
    return;
 80040b6:	e16e      	b.n	8004396 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	f040 814a 	bne.w	8004356 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8143 	beq.w	8004356 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 813c 	beq.w	8004356 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	f040 80b4 	bne.w	800426c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8140 	beq.w	800439a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004122:	429a      	cmp	r2, r3
 8004124:	f080 8139 	bcs.w	800439a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800412e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	f000 8088 	beq.w	800424e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800416a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1d9      	bne.n	800413e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800419a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e1      	bne.n	800418a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004230:	65ba      	str	r2, [r7, #88]	; 0x58
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800423e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd fceb 	bl	8001c24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004256:	b29b      	uxth	r3, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	b29b      	uxth	r3, r3
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8c0 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004264:	e099      	b.n	800439a <HAL_UART_IRQHandler+0x50e>
 8004266:	bf00      	nop
 8004268:	080044c3 	.word	0x080044c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 808b 	beq.w	800439e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8086 	beq.w	800439e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042b6:	647a      	str	r2, [r7, #68]	; 0x44
 80042b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	623b      	str	r3, [r7, #32]
   return(result);
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ee:	633a      	str	r2, [r7, #48]	; 0x30
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e3      	bne.n	80042ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004334:	61fa      	str	r2, [r7, #28]
 8004336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	69b9      	ldr	r1, [r7, #24]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	617b      	str	r3, [r7, #20]
   return(result);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e3      	bne.n	8004310 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f848 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004354:	e023      	b.n	800439e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_UART_IRQHandler+0x4ea>
 8004362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8bb 	bl	80044ea <UART_Transmit_IT>
    return;
 8004374:	e014      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00e      	beq.n	80043a0 <HAL_UART_IRQHandler+0x514>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8fb 	bl	800458a <UART_EndTransmit_IT>
    return;
 8004394:	e004      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
      return;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
      return;
 800439e:	bf00      	nop
  }
}
 80043a0:	37e8      	adds	r7, #232	; 0xe8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop

080043a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b095      	sub	sp, #84	; 0x54
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004424:	643a      	str	r2, [r7, #64]	; 0x40
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800442a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	61fb      	str	r3, [r7, #28]
   return(result);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3314      	adds	r3, #20
 8004456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800445e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	d119      	bne.n	80044a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60bb      	str	r3, [r7, #8]
   return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	647b      	str	r3, [r7, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004494:	61ba      	str	r2, [r7, #24]
 8004496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	613b      	str	r3, [r7, #16]
   return(result);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044b6:	bf00      	nop
 80044b8:	3754      	adds	r7, #84	; 0x54
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff77 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b21      	cmp	r3, #33	; 0x21
 80044fc:	d13e      	bne.n	800457c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004506:	d114      	bne.n	8004532 <UART_Transmit_IT+0x48>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d110      	bne.n	8004532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]
 8004530:	e008      	b.n	8004544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	1c59      	adds	r1, r3, #1
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6211      	str	r1, [r2, #32]
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4619      	mov	r1, r3
 8004552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10f      	bne.n	8004578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff fefc 	bl	80043a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08c      	sub	sp, #48	; 0x30
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b22      	cmp	r3, #34	; 0x22
 80045cc:	f040 80ab 	bne.w	8004726 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d117      	bne.n	800460a <UART_Receive_IT+0x50>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d113      	bne.n	800460a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	629a      	str	r2, [r3, #40]	; 0x28
 8004608:	e026      	b.n	8004658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d007      	beq.n	800462e <UART_Receive_IT+0x74>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <UART_Receive_IT+0x82>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e008      	b.n	800464e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004648:	b2da      	uxtb	r2, r3
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29b      	uxth	r3, r3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4619      	mov	r1, r3
 8004666:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004668:	2b00      	cmp	r3, #0
 800466a:	d15a      	bne.n	8004722 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0220 	bic.w	r2, r2, #32
 800467a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d135      	bne.n	8004718 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	623a      	str	r2, [r7, #32]
 80046d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	69f9      	ldr	r1, [r7, #28]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e5      	bne.n	80046b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d10a      	bne.n	800470a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe67 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
 8004716:	e002      	b.n	800471e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fe4f 	bl	80043bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e002      	b.n	8004728 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	3730      	adds	r7, #48	; 0x30
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b0c0      	sub	sp, #256	; 0x100
 8004736:	af00      	add	r7, sp, #0
 8004738:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	68d9      	ldr	r1, [r3, #12]
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	ea40 0301 	orr.w	r3, r0, r1
 8004758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	431a      	orrs	r2, r3
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004788:	f021 010c 	bic.w	r1, r1, #12
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004796:	430b      	orrs	r3, r1
 8004798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	6999      	ldr	r1, [r3, #24]
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	ea40 0301 	orr.w	r3, r0, r1
 80047b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8f      	ldr	r3, [pc, #572]	; (80049fc <UART_SetConfig+0x2cc>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d005      	beq.n	80047d0 <UART_SetConfig+0xa0>
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <UART_SetConfig+0x2d0>)
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d104      	bne.n	80047da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fe fdfa 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 80047d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047d8:	e003      	b.n	80047e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047da:	f7fe fde1 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 80047de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ec:	f040 810c 	bne.w	8004a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004802:	4622      	mov	r2, r4
 8004804:	462b      	mov	r3, r5
 8004806:	1891      	adds	r1, r2, r2
 8004808:	65b9      	str	r1, [r7, #88]	; 0x58
 800480a:	415b      	adcs	r3, r3
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004812:	4621      	mov	r1, r4
 8004814:	eb12 0801 	adds.w	r8, r2, r1
 8004818:	4629      	mov	r1, r5
 800481a:	eb43 0901 	adc.w	r9, r3, r1
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004832:	4690      	mov	r8, r2
 8004834:	4699      	mov	r9, r3
 8004836:	4623      	mov	r3, r4
 8004838:	eb18 0303 	adds.w	r3, r8, r3
 800483c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004840:	462b      	mov	r3, r5
 8004842:	eb49 0303 	adc.w	r3, r9, r3
 8004846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800485a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800485e:	460b      	mov	r3, r1
 8004860:	18db      	adds	r3, r3, r3
 8004862:	653b      	str	r3, [r7, #80]	; 0x50
 8004864:	4613      	mov	r3, r2
 8004866:	eb42 0303 	adc.w	r3, r2, r3
 800486a:	657b      	str	r3, [r7, #84]	; 0x54
 800486c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004874:	f7fc f9b8 	bl	8000be8 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4b61      	ldr	r3, [pc, #388]	; (8004a04 <UART_SetConfig+0x2d4>)
 800487e:	fba3 2302 	umull	r2, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	011c      	lsls	r4, r3, #4
 8004886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004890:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	1891      	adds	r1, r2, r2
 800489e:	64b9      	str	r1, [r7, #72]	; 0x48
 80048a0:	415b      	adcs	r3, r3
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048a8:	4641      	mov	r1, r8
 80048aa:	eb12 0a01 	adds.w	sl, r2, r1
 80048ae:	4649      	mov	r1, r9
 80048b0:	eb43 0b01 	adc.w	fp, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c8:	4692      	mov	sl, r2
 80048ca:	469b      	mov	fp, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	eb1a 0303 	adds.w	r3, sl, r3
 80048d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d6:	464b      	mov	r3, r9
 80048d8:	eb4b 0303 	adc.w	r3, fp, r3
 80048dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	643b      	str	r3, [r7, #64]	; 0x40
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
 8004902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800490a:	f7fc f96d 	bl	8000be8 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b3b      	ldr	r3, [pc, #236]	; (8004a04 <UART_SetConfig+0x2d4>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	; 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800492a:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <UART_SetConfig+0x2d4>)
 800492c:	fba3 2302 	umull	r2, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004938:	441c      	add	r4, r3
 800493a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004944:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800494c:	4642      	mov	r2, r8
 800494e:	464b      	mov	r3, r9
 8004950:	1891      	adds	r1, r2, r2
 8004952:	63b9      	str	r1, [r7, #56]	; 0x38
 8004954:	415b      	adcs	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800495c:	4641      	mov	r1, r8
 800495e:	1851      	adds	r1, r2, r1
 8004960:	6339      	str	r1, [r7, #48]	; 0x30
 8004962:	4649      	mov	r1, r9
 8004964:	414b      	adcs	r3, r1
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004974:	4659      	mov	r1, fp
 8004976:	00cb      	lsls	r3, r1, #3
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800497e:	4651      	mov	r1, sl
 8004980:	00ca      	lsls	r2, r1, #3
 8004982:	4610      	mov	r0, r2
 8004984:	4619      	mov	r1, r3
 8004986:	4603      	mov	r3, r0
 8004988:	4642      	mov	r2, r8
 800498a:	189b      	adds	r3, r3, r2
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004990:	464b      	mov	r3, r9
 8004992:	460a      	mov	r2, r1
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049b0:	460b      	mov	r3, r1
 80049b2:	18db      	adds	r3, r3, r3
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b6:	4613      	mov	r3, r2
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049c6:	f7fc f90f 	bl	8000be8 <__aeabi_uldivmod>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 1302 	umull	r1, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	2164      	movs	r1, #100	; 0x64
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	3332      	adds	r3, #50	; 0x32
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <UART_SetConfig+0x2d4>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	f003 0207 	and.w	r2, r3, #7
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4422      	add	r2, r4
 80049f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049f8:	e106      	b.n	8004c08 <UART_SetConfig+0x4d8>
 80049fa:	bf00      	nop
 80049fc:	40011000 	.word	0x40011000
 8004a00:	40011400 	.word	0x40011400
 8004a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	1891      	adds	r1, r2, r2
 8004a20:	6239      	str	r1, [r7, #32]
 8004a22:	415b      	adcs	r3, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
 8004a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	1854      	adds	r4, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb43 0501 	adc.w	r5, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	00eb      	lsls	r3, r5, #3
 8004a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a42:	00e2      	lsls	r2, r4, #3
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	18e3      	adds	r3, r4, r3
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a50:	464b      	mov	r3, r9
 8004a52:	eb45 0303 	adc.w	r3, r5, r3
 8004a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a76:	4629      	mov	r1, r5
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a80:	4621      	mov	r1, r4
 8004a82:	008a      	lsls	r2, r1, #2
 8004a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a88:	f7fc f8ae 	bl	8000be8 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4b60      	ldr	r3, [pc, #384]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004a92:	fba3 2302 	umull	r2, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	011c      	lsls	r4, r3, #4
 8004a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aac:	4642      	mov	r2, r8
 8004aae:	464b      	mov	r3, r9
 8004ab0:	1891      	adds	r1, r2, r2
 8004ab2:	61b9      	str	r1, [r7, #24]
 8004ab4:	415b      	adcs	r3, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abc:	4641      	mov	r1, r8
 8004abe:	1851      	adds	r1, r2, r1
 8004ac0:	6139      	str	r1, [r7, #16]
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	414b      	adcs	r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	00cb      	lsls	r3, r1, #3
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ade:	4651      	mov	r1, sl
 8004ae0:	00ca      	lsls	r2, r1, #3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004af0:	464b      	mov	r3, r9
 8004af2:	460a      	mov	r2, r1
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b26:	f7fc f85f 	bl	8000be8 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2301 	umull	r2, r3, r3, r1
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2264      	movs	r2, #100	; 0x64
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	1acb      	subs	r3, r1, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	673b      	str	r3, [r7, #112]	; 0x70
 8004b5a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b70:	4641      	mov	r1, r8
 8004b72:	1851      	adds	r1, r2, r1
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	4649      	mov	r1, r9
 8004b78:	414b      	adcs	r3, r1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b88:	4659      	mov	r1, fp
 8004b8a:	00cb      	lsls	r3, r1, #3
 8004b8c:	4651      	mov	r1, sl
 8004b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b92:	4651      	mov	r1, sl
 8004b94:	00ca      	lsls	r2, r1, #3
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	460a      	mov	r2, r1
 8004ba6:	eb42 0303 	adc.w	r3, r2, r3
 8004baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bb6:	667a      	str	r2, [r7, #100]	; 0x64
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	008b      	lsls	r3, r1, #2
 8004bc8:	4641      	mov	r1, r8
 8004bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bce:	4641      	mov	r1, r8
 8004bd0:	008a      	lsls	r2, r1, #2
 8004bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bd6:	f7fc f807 	bl	8000be8 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <UART_SetConfig+0x4e4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4422      	add	r2, r4
 8004c06:	609a      	str	r2, [r3, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c14:	51eb851f 	.word	0x51eb851f

08004c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0208 	add.w	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f103 0208 	add.w	r2, r3, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d103      	bne.n	8004cda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e00c      	b.n	8004cf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e002      	b.n	8004ce8 <vListInsert+0x2e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d2f6      	bcs.n	8004ce2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6892      	ldr	r2, [r2, #8]
 8004d42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6852      	ldr	r2, [r2, #4]
 8004d4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d103      	bne.n	8004d60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	1e5a      	subs	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004daa:	f001 f993 	bl	80060d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	441a      	add	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	68f9      	ldr	r1, [r7, #12]
 8004dde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	22ff      	movs	r2, #255	; 0xff
 8004dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	22ff      	movs	r2, #255	; 0xff
 8004df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d114      	bne.n	8004e2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01a      	beq.n	8004e3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fdf1 	bl	80059f4 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <xQueueGenericReset+0xcc>)
 8004e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	e009      	b.n	8004e3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fef2 	bl	8004c18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3324      	adds	r3, #36	; 0x24
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff feed 	bl	8004c18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e3e:	f001 f979 	bl	8006134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	613b      	str	r3, [r7, #16]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3348      	adds	r3, #72	; 0x48
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fa05 	bl	8006298 <pvPortMalloc>
 8004e8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d011      	beq.n	8004eba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3348      	adds	r3, #72	; 0x48
 8004e9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea8:	79fa      	ldrb	r2, [r7, #7]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f805 	bl	8004ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eba:	69bb      	ldr	r3, [r7, #24]
	}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	69b8      	ldr	r0, [r7, #24]
 8004ef6:	f7ff ff43 	bl	8004d80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <xQueueReceive+0x30>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	623b      	str	r3, [r7, #32]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <xQueueReceive+0x3e>
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <xQueueReceive+0x42>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueReceive+0x44>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xQueueReceive+0x5e>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61fb      	str	r3, [r7, #28]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f62:	f000 ff03 	bl	8005d6c <xTaskGetSchedulerState>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <xQueueReceive+0x6e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <xQueueReceive+0x72>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <xQueueReceive+0x74>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xQueueReceive+0x8e>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	61bb      	str	r3, [r7, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f92:	f001 f89f 	bl	80060d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01f      	beq.n	8004fe2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa6:	f000 f88d 	bl	80050c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1e5a      	subs	r2, r3, #1
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd18 	bl	80059f4 <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <xQueueReceive+0x1bc>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fda:	f001 f8ab 	bl	8006134 <vPortExitCritical>
				return pdPASS;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e069      	b.n	80050b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fe8:	f001 f8a4 	bl	8006134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e062      	b.n	80050b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ff6:	f107 0310 	add.w	r3, r7, #16
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fd5c 	bl	8005ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005004:	f001 f896 	bl	8006134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005008:	f000 fb12 	bl	8005630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800500c:	f001 f862 	bl	80060d4 <vPortEnterCritical>
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d103      	bne.n	8005026 <xQueueReceive+0x122>
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502c:	b25b      	sxtb	r3, r3
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d103      	bne.n	800503c <xQueueReceive+0x138>
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	f001 f87a 	bl	8006134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005040:	1d3a      	adds	r2, r7, #4
 8005042:	f107 0310 	add.w	r3, r7, #16
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fd4b 	bl	8005ae4 <xTaskCheckForTimeOut>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d123      	bne.n	800509c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005056:	f000 f8ad 	bl	80051b4 <prvIsQueueEmpty>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	3324      	adds	r3, #36	; 0x24
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fc9f 	bl	80059ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800506e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005070:	f000 f84e 	bl	8005110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005074:	f000 faea 	bl	800564c <xTaskResumeAll>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d189      	bne.n	8004f92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <xQueueReceive+0x1bc>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	e780      	b.n	8004f92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005092:	f000 f83d 	bl	8005110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005096:	f000 fad9 	bl	800564c <xTaskResumeAll>
 800509a:	e77a      	b.n	8004f92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800509c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509e:	f000 f837 	bl	8005110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050a2:	f000 fad3 	bl	800564c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a8:	f000 f884 	bl	80051b4 <prvIsQueueEmpty>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f43f af6f 	beq.w	8004f92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3730      	adds	r7, #48	; 0x30
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d303      	bcc.n	80050f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	461a      	mov	r2, r3
 8005102:	6838      	ldr	r0, [r7, #0]
 8005104:	f002 f89d 	bl	8007242 <memcpy>
	}
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005118:	f000 ffdc 	bl	80060d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005124:	e011      	b.n	800514a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b00      	cmp	r3, #0
 800512c:	d012      	beq.n	8005154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc5e 	bl	80059f4 <xTaskRemoveFromEventList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800513e:	f000 fd33 	bl	8005ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	3b01      	subs	r3, #1
 8005146:	b2db      	uxtb	r3, r3
 8005148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dce9      	bgt.n	8005126 <prvUnlockQueue+0x16>
 8005152:	e000      	b.n	8005156 <prvUnlockQueue+0x46>
					break;
 8005154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	22ff      	movs	r2, #255	; 0xff
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800515e:	f000 ffe9 	bl	8006134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005162:	f000 ffb7 	bl	80060d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800516e:	e011      	b.n	8005194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3310      	adds	r3, #16
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fc39 	bl	80059f4 <xTaskRemoveFromEventList>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005188:	f000 fd0e 	bl	8005ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	3b01      	subs	r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dce9      	bgt.n	8005170 <prvUnlockQueue+0x60>
 800519c:	e000      	b.n	80051a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800519e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051a8:	f000 ffc4 	bl	8006134 <vPortExitCritical>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f000 ff8a 	bl	80060d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e001      	b.n	80051d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d2:	f000 ffaf 	bl	8006134 <vPortExitCritical>

	return xReturn;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af04      	add	r7, sp, #16
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xTaskCreateStatic+0x2a>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	623b      	str	r3, [r7, #32]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskCreateStatic+0x46>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61fb      	str	r3, [r7, #28]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005226:	2354      	movs	r3, #84	; 0x54
 8005228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b54      	cmp	r3, #84	; 0x54
 800522e:	d00a      	beq.n	8005246 <xTaskCreateStatic+0x66>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61bb      	str	r3, [r7, #24]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005246:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01e      	beq.n	800528c <xTaskCreateStatic+0xac>
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800525c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2202      	movs	r2, #2
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005266:	2300      	movs	r3, #0
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	9302      	str	r3, [sp, #8]
 800526e:	f107 0314 	add.w	r3, r7, #20
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f850 	bl	8005324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005286:	f000 f8d5 	bl	8005434 <prvAddNewTaskToReadyList>
 800528a:	e001      	b.n	8005290 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005290:	697b      	ldr	r3, [r7, #20]
	}
 8005292:	4618      	mov	r0, r3
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800529a:	b580      	push	{r7, lr}
 800529c:	b08c      	sub	sp, #48	; 0x30
 800529e:	af04      	add	r7, sp, #16
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fff2 	bl	8006298 <pvPortMalloc>
 80052b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052bc:	2054      	movs	r0, #84	; 0x54
 80052be:	f000 ffeb 	bl	8006298 <pvPortMalloc>
 80052c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
 80052d0:	e005      	b.n	80052de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f001 f8ac 	bl	8006430 <vPortFree>
 80052d8:	e001      	b.n	80052de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d017      	beq.n	8005314 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9303      	str	r3, [sp, #12]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	9302      	str	r3, [sp, #8]
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f80e 	bl	8005324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005308:	69f8      	ldr	r0, [r7, #28]
 800530a:	f000 f893 	bl	8005434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800530e:	2301      	movs	r3, #1
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e002      	b.n	800531a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005314:	f04f 33ff 	mov.w	r3, #4294967295
 8005318:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800531a:	69bb      	ldr	r3, [r7, #24]
	}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800533c:	3b01      	subs	r3, #1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	617b      	str	r3, [r7, #20]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01f      	beq.n	80053b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	e012      	b.n	800539e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	7819      	ldrb	r1, [r3, #0]
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	3334      	adds	r3, #52	; 0x34
 8005388:	460a      	mov	r2, r1
 800538a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9e9      	bls.n	8005378 <prvInitialiseNewTask+0x54>
 80053a4:	e000      	b.n	80053a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80053a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	e003      	b.n	80053ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d901      	bls.n	80053c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053c0:	2306      	movs	r3, #6
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2200      	movs	r2, #0
 80053d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fc3c 	bl	8004c58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	3318      	adds	r3, #24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fc37 	bl	8004c58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	f1c3 0207 	rsb	r2, r3, #7
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	69b8      	ldr	r0, [r7, #24]
 8005414:	f000 fd2e 	bl	8005e74 <pxPortInitialiseStack>
 8005418:	4602      	mov	r2, r0
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542a:	bf00      	nop
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800543c:	f000 fe4a 	bl	80060d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005440:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <prvAddNewTaskToReadyList+0xb8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	4a29      	ldr	r2, [pc, #164]	; (80054ec <prvAddNewTaskToReadyList+0xb8>)
 8005448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <prvAddNewTaskToReadyList+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005452:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <prvAddNewTaskToReadyList+0xbc>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005458:	4b24      	ldr	r3, [pc, #144]	; (80054ec <prvAddNewTaskToReadyList+0xb8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d110      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005460:	f000 fbc6 	bl	8005bf0 <prvInitialiseTaskLists>
 8005464:	e00d      	b.n	8005482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <prvAddNewTaskToReadyList+0xc0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <prvAddNewTaskToReadyList+0xbc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	429a      	cmp	r2, r3
 800547a:	d802      	bhi.n	8005482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800547c:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <prvAddNewTaskToReadyList+0xbc>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <prvAddNewTaskToReadyList+0xc4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <prvAddNewTaskToReadyList+0xc4>)
 800548a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	4b19      	ldr	r3, [pc, #100]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4313      	orrs	r3, r2
 800549a:	4a18      	ldr	r2, [pc, #96]	; (80054fc <prvAddNewTaskToReadyList+0xc8>)
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <prvAddNewTaskToReadyList+0xcc>)
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7ff fbdc 	bl	8004c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ba:	f000 fe3b 	bl	8006134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <prvAddNewTaskToReadyList+0xc0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <prvAddNewTaskToReadyList+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <prvAddNewTaskToReadyList+0xd0>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	200006a0 	.word	0x200006a0
 80054f0:	200005a0 	.word	0x200005a0
 80054f4:	200006ac 	.word	0x200006ac
 80054f8:	200006bc 	.word	0x200006bc
 80054fc:	200006a8 	.word	0x200006a8
 8005500:	200005a4 	.word	0x200005a4
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d017      	beq.n	800554a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <vTaskDelay+0x60>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <vTaskDelay+0x30>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60bb      	str	r3, [r7, #8]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005538:	f000 f87a 	bl	8005630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800553c:	2100      	movs	r1, #0
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fc32 	bl	8005da8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005544:	f000 f882 	bl	800564c <xTaskResumeAll>
 8005548:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d107      	bne.n	8005560 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <vTaskDelay+0x64>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	200006c8 	.word	0x200006c8
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800557e:	463a      	mov	r2, r7
 8005580:	1d39      	adds	r1, r7, #4
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb fcac 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	9202      	str	r2, [sp, #8]
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	2300      	movs	r3, #0
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	460a      	mov	r2, r1
 800559e:	491e      	ldr	r1, [pc, #120]	; (8005618 <vTaskStartScheduler+0xa8>)
 80055a0:	481e      	ldr	r0, [pc, #120]	; (800561c <vTaskStartScheduler+0xac>)
 80055a2:	f7ff fe1d 	bl	80051e0 <xTaskCreateStatic>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <vTaskStartScheduler+0xb0>)
 80055aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055ac:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <vTaskStartScheduler+0xb0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e001      	b.n	80055be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d116      	bne.n	80055f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	613b      	str	r3, [r7, #16]
}
 80055d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055d8:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vTaskStartScheduler+0xb4>)
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <vTaskStartScheduler+0xb8>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <vTaskStartScheduler+0xbc>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ec:	f000 fcd0 	bl	8005f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055f0:	e00e      	b.n	8005610 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d10a      	bne.n	8005610 <vTaskStartScheduler+0xa0>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60fb      	str	r3, [r7, #12]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vTaskStartScheduler+0x9e>
}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	0800901c 	.word	0x0800901c
 800561c:	08005bc1 	.word	0x08005bc1
 8005620:	200006c4 	.word	0x200006c4
 8005624:	200006c0 	.word	0x200006c0
 8005628:	200006ac 	.word	0x200006ac
 800562c:	200006a4 	.word	0x200006a4

08005630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <vTaskSuspendAll+0x18>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	4a03      	ldr	r2, [pc, #12]	; (8005648 <vTaskSuspendAll+0x18>)
 800563c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	200006c8 	.word	0x200006c8

0800564c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800565a:	4b41      	ldr	r3, [pc, #260]	; (8005760 <xTaskResumeAll+0x114>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xTaskResumeAll+0x2c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	603b      	str	r3, [r7, #0]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005678:	f000 fd2c 	bl	80060d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <xTaskResumeAll+0x114>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3b01      	subs	r3, #1
 8005682:	4a37      	ldr	r2, [pc, #220]	; (8005760 <xTaskResumeAll+0x114>)
 8005684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <xTaskResumeAll+0x114>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d161      	bne.n	8005752 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800568e:	4b35      	ldr	r3, [pc, #212]	; (8005764 <xTaskResumeAll+0x118>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d05d      	beq.n	8005752 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005696:	e02e      	b.n	80056f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005698:	4b33      	ldr	r3, [pc, #204]	; (8005768 <xTaskResumeAll+0x11c>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3318      	adds	r3, #24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fb41 	bl	8004d2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fb3c 	bl	8004d2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	2201      	movs	r2, #1
 80056ba:	409a      	lsls	r2, r3
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <xTaskResumeAll+0x120>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	4a2a      	ldr	r2, [pc, #168]	; (800576c <xTaskResumeAll+0x120>)
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <xTaskResumeAll+0x124>)
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f7ff fac8 	bl	8004c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	4b23      	ldr	r3, [pc, #140]	; (8005774 <xTaskResumeAll+0x128>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056f0:	4b21      	ldr	r3, [pc, #132]	; (8005778 <xTaskResumeAll+0x12c>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f6:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <xTaskResumeAll+0x11c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1cc      	bne.n	8005698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005704:	f000 fb12 	bl	8005d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005708:	4b1c      	ldr	r3, [pc, #112]	; (800577c <xTaskResumeAll+0x130>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005714:	f000 f836 	bl	8005784 <xTaskIncrementTick>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <xTaskResumeAll+0x12c>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3b01      	subs	r3, #1
 8005728:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f1      	bne.n	8005714 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <xTaskResumeAll+0x130>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <xTaskResumeAll+0x12c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800573e:	2301      	movs	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <xTaskResumeAll+0x134>)
 8005744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005752:	f000 fcef 	bl	8006134 <vPortExitCritical>

	return xAlreadyYielded;
 8005756:	68bb      	ldr	r3, [r7, #8]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200006c8 	.word	0x200006c8
 8005764:	200006a0 	.word	0x200006a0
 8005768:	20000660 	.word	0x20000660
 800576c:	200006a8 	.word	0x200006a8
 8005770:	200005a4 	.word	0x200005a4
 8005774:	200005a0 	.word	0x200005a0
 8005778:	200006b4 	.word	0x200006b4
 800577c:	200006b0 	.word	0x200006b0
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578e:	4b4e      	ldr	r3, [pc, #312]	; (80058c8 <xTaskIncrementTick+0x144>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 808e 	bne.w	80058b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005798:	4b4c      	ldr	r3, [pc, #304]	; (80058cc <xTaskIncrementTick+0x148>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057a0:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <xTaskIncrementTick+0x148>)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d120      	bne.n	80057ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057ac:	4b48      	ldr	r3, [pc, #288]	; (80058d0 <xTaskIncrementTick+0x14c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <xTaskIncrementTick+0x48>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	603b      	str	r3, [r7, #0]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskIncrementTick+0x46>
 80057cc:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <xTaskIncrementTick+0x14c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3e      	ldr	r2, [pc, #248]	; (80058d0 <xTaskIncrementTick+0x14c>)
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4a3e      	ldr	r2, [pc, #248]	; (80058d4 <xTaskIncrementTick+0x150>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	4b3d      	ldr	r3, [pc, #244]	; (80058d8 <xTaskIncrementTick+0x154>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a3c      	ldr	r2, [pc, #240]	; (80058d8 <xTaskIncrementTick+0x154>)
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	f000 fa9f 	bl	8005d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <xTaskIncrementTick+0x158>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d348      	bcc.n	800588a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f8:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <xTaskIncrementTick+0x14c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <xTaskIncrementTick+0x158>)
 8005804:	f04f 32ff 	mov.w	r2, #4294967295
 8005808:	601a      	str	r2, [r3, #0]
					break;
 800580a:	e03e      	b.n	800588a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <xTaskIncrementTick+0x14c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d203      	bcs.n	800582c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005824:	4a2d      	ldr	r2, [pc, #180]	; (80058dc <xTaskIncrementTick+0x158>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800582a:	e02e      	b.n	800588a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fa7b 	bl	8004d2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fa72 	bl	8004d2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <xTaskIncrementTick+0x15c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <xTaskIncrementTick+0x15c>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <xTaskIncrementTick+0x160>)
 8005868:	441a      	add	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3304      	adds	r3, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f7ff f9fe 	bl	8004c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <xTaskIncrementTick+0x164>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	429a      	cmp	r2, r3
 8005882:	d3b9      	bcc.n	80057f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005888:	e7b6      	b.n	80057f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <xTaskIncrementTick+0x164>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4914      	ldr	r1, [pc, #80]	; (80058e4 <xTaskIncrementTick+0x160>)
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d901      	bls.n	80058a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <xTaskIncrementTick+0x168>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e004      	b.n	80058be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <xTaskIncrementTick+0x16c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <xTaskIncrementTick+0x16c>)
 80058bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058be:	697b      	ldr	r3, [r7, #20]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200006c8 	.word	0x200006c8
 80058cc:	200006a4 	.word	0x200006a4
 80058d0:	20000658 	.word	0x20000658
 80058d4:	2000065c 	.word	0x2000065c
 80058d8:	200006b8 	.word	0x200006b8
 80058dc:	200006c0 	.word	0x200006c0
 80058e0:	200006a8 	.word	0x200006a8
 80058e4:	200005a4 	.word	0x200005a4
 80058e8:	200005a0 	.word	0x200005a0
 80058ec:	200006b4 	.word	0x200006b4
 80058f0:	200006b0 	.word	0x200006b0

080058f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058fa:	4b27      	ldr	r3, [pc, #156]	; (8005998 <vTaskSwitchContext+0xa4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <vTaskSwitchContext+0xa8>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005908:	e03f      	b.n	800598a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <vTaskSwitchContext+0xa8>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005910:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <vTaskSwitchContext+0xac>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	fab3 f383 	clz	r3, r3
 800591c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800591e:	7afb      	ldrb	r3, [r7, #11]
 8005920:	f1c3 031f 	rsb	r3, r3, #31
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	491f      	ldr	r1, [pc, #124]	; (80059a4 <vTaskSwitchContext+0xb0>)
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <vTaskSwitchContext+0x5c>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vTaskSwitchContext+0x5a>
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <vTaskSwitchContext+0xb0>)
 800595c:	4413      	add	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3308      	adds	r3, #8
 8005972:	429a      	cmp	r2, r3
 8005974:	d104      	bne.n	8005980 <vTaskSwitchContext+0x8c>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	605a      	str	r2, [r3, #4]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <vTaskSwitchContext+0xb4>)
 8005988:	6013      	str	r3, [r2, #0]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	200006c8 	.word	0x200006c8
 800599c:	200006b4 	.word	0x200006b4
 80059a0:	200006a8 	.word	0x200006a8
 80059a4:	200005a4 	.word	0x200005a4
 80059a8:	200005a0 	.word	0x200005a0

080059ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60fb      	str	r3, [r7, #12]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <vTaskPlaceOnEventList+0x44>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3318      	adds	r3, #24
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff f96d 	bl	8004cba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059e0:	2101      	movs	r1, #1
 80059e2:	6838      	ldr	r0, [r7, #0]
 80059e4:	f000 f9e0 	bl	8005da8 <prvAddCurrentTaskToDelayedList>
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	200005a0 	.word	0x200005a0

080059f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	60fb      	str	r3, [r7, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	3318      	adds	r3, #24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff f981 	bl	8004d2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2a:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <xTaskRemoveFromEventList+0xac>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11c      	bne.n	8005a6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f978 	bl	8004d2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <xTaskRemoveFromEventList+0xb0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <xTaskRemoveFromEventList+0xb0>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4a13      	ldr	r2, [pc, #76]	; (8005aa8 <xTaskRemoveFromEventList+0xb4>)
 8005a5c:	441a      	add	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7ff f904 	bl	8004c72 <vListInsertEnd>
 8005a6a:	e005      	b.n	8005a78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	3318      	adds	r3, #24
 8005a70:	4619      	mov	r1, r3
 8005a72:	480e      	ldr	r0, [pc, #56]	; (8005aac <xTaskRemoveFromEventList+0xb8>)
 8005a74:	f7ff f8fd 	bl	8004c72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <xTaskRemoveFromEventList+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d905      	bls.n	8005a92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <xTaskRemoveFromEventList+0xc0>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e001      	b.n	8005a96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a96:	697b      	ldr	r3, [r7, #20]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	200006c8 	.word	0x200006c8
 8005aa4:	200006a8 	.word	0x200006a8
 8005aa8:	200005a4 	.word	0x200005a4
 8005aac:	20000660 	.word	0x20000660
 8005ab0:	200005a0 	.word	0x200005a0
 8005ab4:	200006b4 	.word	0x200006b4

08005ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <vTaskInternalSetTimeOutState+0x24>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <vTaskInternalSetTimeOutState+0x28>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	200006b8 	.word	0x200006b8
 8005ae0:	200006a4 	.word	0x200006a4

08005ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	613b      	str	r3, [r7, #16]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b26:	f000 fad5 	bl	80060d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <xTaskCheckForTimeOut+0xbc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d102      	bne.n	8005b4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e023      	b.n	8005b92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <xTaskCheckForTimeOut+0xc0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d007      	beq.n	8005b66 <xTaskCheckForTimeOut+0x82>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d302      	bcc.n	8005b66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e015      	b.n	8005b92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d20b      	bcs.n	8005b88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff9b 	bl	8005ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	e004      	b.n	8005b92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b92:	f000 facf 	bl	8006134 <vPortExitCritical>

	return xReturn;
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	200006a4 	.word	0x200006a4
 8005ba4:	200006b8 	.word	0x200006b8

08005ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <vTaskMissedYield+0x14>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	200006b4 	.word	0x200006b4

08005bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bc8:	f000 f852 	bl	8005c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <prvIdleTask+0x28>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d9f9      	bls.n	8005bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <prvIdleTask+0x2c>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005be4:	e7f0      	b.n	8005bc8 <prvIdleTask+0x8>
 8005be6:	bf00      	nop
 8005be8:	200005a4 	.word	0x200005a4
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	e00c      	b.n	8005c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <prvInitialiseTaskLists+0x60>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff f804 	bl	8004c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3301      	adds	r3, #1
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d9ef      	bls.n	8005bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c1c:	480d      	ldr	r0, [pc, #52]	; (8005c54 <prvInitialiseTaskLists+0x64>)
 8005c1e:	f7fe fffb 	bl	8004c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c22:	480d      	ldr	r0, [pc, #52]	; (8005c58 <prvInitialiseTaskLists+0x68>)
 8005c24:	f7fe fff8 	bl	8004c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c28:	480c      	ldr	r0, [pc, #48]	; (8005c5c <prvInitialiseTaskLists+0x6c>)
 8005c2a:	f7fe fff5 	bl	8004c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c2e:	480c      	ldr	r0, [pc, #48]	; (8005c60 <prvInitialiseTaskLists+0x70>)
 8005c30:	f7fe fff2 	bl	8004c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c34:	480b      	ldr	r0, [pc, #44]	; (8005c64 <prvInitialiseTaskLists+0x74>)
 8005c36:	f7fe ffef 	bl	8004c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <prvInitialiseTaskLists+0x78>)
 8005c3c:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <prvInitialiseTaskLists+0x64>)
 8005c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <prvInitialiseTaskLists+0x7c>)
 8005c42:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <prvInitialiseTaskLists+0x68>)
 8005c44:	601a      	str	r2, [r3, #0]
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200005a4 	.word	0x200005a4
 8005c54:	20000630 	.word	0x20000630
 8005c58:	20000644 	.word	0x20000644
 8005c5c:	20000660 	.word	0x20000660
 8005c60:	20000674 	.word	0x20000674
 8005c64:	2000068c 	.word	0x2000068c
 8005c68:	20000658 	.word	0x20000658
 8005c6c:	2000065c 	.word	0x2000065c

08005c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c76:	e019      	b.n	8005cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c78:	f000 fa2c 	bl	80060d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <prvCheckTasksWaitingTermination+0x50>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff f84f 	bl	8004d2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <prvCheckTasksWaitingTermination+0x54>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <prvCheckTasksWaitingTermination+0x54>)
 8005c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <prvCheckTasksWaitingTermination+0x58>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <prvCheckTasksWaitingTermination+0x58>)
 8005ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ca2:	f000 fa47 	bl	8006134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f810 	bl	8005ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <prvCheckTasksWaitingTermination+0x58>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e1      	bne.n	8005c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000674 	.word	0x20000674
 8005cc4:	200006a0 	.word	0x200006a0
 8005cc8:	20000688 	.word	0x20000688

08005ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fba4 	bl	8006430 <vPortFree>
				vPortFree( pxTCB );
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fba1 	bl	8006430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cee:	e018      	b.n	8005d22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d103      	bne.n	8005d02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb98 	bl	8006430 <vPortFree>
	}
 8005d00:	e00f      	b.n	8005d22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d00a      	beq.n	8005d22 <prvDeleteTCB+0x56>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <prvDeleteTCB+0x54>
	}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <prvResetNextTaskUnblockTime+0x38>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <prvResetNextTaskUnblockTime+0x3c>)
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d44:	e008      	b.n	8005d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <prvResetNextTaskUnblockTime+0x38>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvResetNextTaskUnblockTime+0x3c>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000658 	.word	0x20000658
 8005d68:	200006c0 	.word	0x200006c0

08005d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <xTaskGetSchedulerState+0x34>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	e008      	b.n	8005d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d80:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <xTaskGetSchedulerState+0x38>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e001      	b.n	8005d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d92:	687b      	ldr	r3, [r7, #4]
	}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	200006ac 	.word	0x200006ac
 8005da4:	200006c8 	.word	0x200006c8

08005da8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005db2:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe ffb4 	bl	8004d2c <uxListRemove>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005de0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d10a      	bne.n	8005e00 <prvAddCurrentTaskToDelayedList+0x58>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	481a      	ldr	r0, [pc, #104]	; (8005e64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dfa:	f7fe ff3a 	bl	8004c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dfe:	e026      	b.n	8005e4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e08:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d209      	bcs.n	8005e2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e18:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7fe ff48 	bl	8004cba <vListInsert>
}
 8005e2a:	e010      	b.n	8005e4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fe ff3e 	bl	8004cba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d202      	bcs.n	8005e4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e48:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6013      	str	r3, [r2, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200006a4 	.word	0x200006a4
 8005e5c:	200005a0 	.word	0x200005a0
 8005e60:	200006a8 	.word	0x200006a8
 8005e64:	2000068c 	.word	0x2000068c
 8005e68:	2000065c 	.word	0x2000065c
 8005e6c:	20000658 	.word	0x20000658
 8005e70:	200006c0 	.word	0x200006c0

08005e74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b04      	subs	r3, #4
 8005e84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <pxPortInitialiseStack+0x64>)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b14      	subs	r3, #20
 8005eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f06f 0202 	mvn.w	r2, #2
 8005ec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b20      	subs	r3, #32
 8005ec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eca:	68fb      	ldr	r3, [r7, #12]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	08005edd 	.word	0x08005edd

08005edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <prvTaskExitError+0x54>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d00a      	beq.n	8005f06 <prvTaskExitError+0x2a>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60fb      	str	r3, [r7, #12]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvTaskExitError+0x28>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f1a:	bf00      	nop
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0fc      	beq.n	8005f1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	2000000c 	.word	0x2000000c
	...

08005f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <pxCurrentTCBConst2>)
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	f380 8809 	msr	PSP, r0
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8811 	msr	BASEPRI, r0
 8005f5a:	4770      	bx	lr
 8005f5c:	f3af 8000 	nop.w

08005f60 <pxCurrentTCBConst2>:
 8005f60:	200005a0 	.word	0x200005a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f68:	4808      	ldr	r0, [pc, #32]	; (8005f8c <prvPortStartFirstTask+0x24>)
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f380 8808 	msr	MSP, r0
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8814 	msr	CONTROL, r0
 8005f7a:	b662      	cpsie	i
 8005f7c:	b661      	cpsie	f
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	df00      	svc	0
 8005f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed08 	.word	0xe000ed08

08005f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f96:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <xPortStartScheduler+0x120>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	; (80060b4 <xPortStartScheduler+0x124>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10a      	bne.n	8005fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3f      	ldr	r2, [pc, #252]	; (80060b8 <xPortStartScheduler+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fd6:	4b39      	ldr	r3, [pc, #228]	; (80060bc <xPortStartScheduler+0x12c>)
 8005fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <xPortStartScheduler+0x130>)
 8005ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ffe:	4b31      	ldr	r3, [pc, #196]	; (80060c4 <xPortStartScheduler+0x134>)
 8006000:	2207      	movs	r2, #7
 8006002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006004:	e009      	b.n	800601a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <xPortStartScheduler+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3b01      	subs	r3, #1
 800600c:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <xPortStartScheduler+0x134>)
 800600e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d0ef      	beq.n	8006006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006026:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1c3 0307 	rsb	r3, r3, #7
 800602e:	2b04      	cmp	r3, #4
 8006030:	d00a      	beq.n	8006048 <xPortStartScheduler+0xb8>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	60bb      	str	r3, [r7, #8]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <xPortStartScheduler+0x134>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <xPortStartScheduler+0x134>)
 8006050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <xPortStartScheduler+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800605a:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <xPortStartScheduler+0x134>)
 800605c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	b2da      	uxtb	r2, r3
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006066:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <xPortStartScheduler+0x138>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <xPortStartScheduler+0x138>)
 800606c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <xPortStartScheduler+0x138>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <xPortStartScheduler+0x138>)
 8006078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800607c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800607e:	f000 f8dd 	bl	800623c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <xPortStartScheduler+0x13c>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006088:	f000 f8fc 	bl	8006284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <xPortStartScheduler+0x140>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <xPortStartScheduler+0x140>)
 8006092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006098:	f7ff ff66 	bl	8005f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800609c:	f7ff fc2a 	bl	80058f4 <vTaskSwitchContext>
	prvTaskExitError();
 80060a0:	f7ff ff1c 	bl	8005edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000ed00 	.word	0xe000ed00
 80060b4:	410fc271 	.word	0x410fc271
 80060b8:	410fc270 	.word	0x410fc270
 80060bc:	e000e400 	.word	0xe000e400
 80060c0:	200006cc 	.word	0x200006cc
 80060c4:	200006d0 	.word	0x200006d0
 80060c8:	e000ed20 	.word	0xe000ed20
 80060cc:	2000000c 	.word	0x2000000c
 80060d0:	e000ef34 	.word	0xe000ef34

080060d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	607b      	str	r3, [r7, #4]
}
 80060ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <vPortEnterCritical+0x58>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <vPortEnterCritical+0x58>)
 80060f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <vPortEnterCritical+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10f      	bne.n	8006120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <vPortEnterCritical+0x5c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <vPortEnterCritical+0x4c>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <vPortEnterCritical+0x4a>
	}
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	2000000c 	.word	0x2000000c
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <vPortExitCritical+0x50>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <vPortExitCritical+0x24>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	607b      	str	r3, [r7, #4]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vPortExitCritical+0x50>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <vPortExitCritical+0x50>)
 8006160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <vPortExitCritical+0x50>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <vPortExitCritical+0x42>
 800616a:	2300      	movs	r3, #0
 800616c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c
	...

08006190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006190:	f3ef 8009 	mrs	r0, PSP
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <pxCurrentTCBConst>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f01e 0f10 	tst.w	lr, #16
 80061a0:	bf08      	it	eq
 80061a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	6010      	str	r0, [r2, #0]
 80061ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061b4:	f380 8811 	msr	BASEPRI, r0
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f7ff fb98 	bl	80058f4 <vTaskSwitchContext>
 80061c4:	f04f 0000 	mov.w	r0, #0
 80061c8:	f380 8811 	msr	BASEPRI, r0
 80061cc:	bc09      	pop	{r0, r3}
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	6808      	ldr	r0, [r1, #0]
 80061d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d6:	f01e 0f10 	tst.w	lr, #16
 80061da:	bf08      	it	eq
 80061dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061e0:	f380 8809 	msr	PSP, r0
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	f3af 8000 	nop.w

080061f0 <pxCurrentTCBConst>:
 80061f0:	200005a0 	.word	0x200005a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop

080061f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
}
 8006210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006212:	f7ff fab7 	bl	8005784 <xTaskIncrementTick>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <SysTick_Handler+0x40>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f383 8811 	msr	BASEPRI, r3
}
 800622e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <vPortSetupTimerInterrupt+0x38>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortSetupTimerInterrupt+0x3c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <vPortSetupTimerInterrupt+0x40>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	099b      	lsrs	r3, r3, #6
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <vPortSetupTimerInterrupt+0x44>)
 800625a:	3b01      	subs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <vPortSetupTimerInterrupt+0x34>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	e000e010 	.word	0xe000e010
 8006274:	e000e018 	.word	0xe000e018
 8006278:	20000000 	.word	0x20000000
 800627c:	10624dd3 	.word	0x10624dd3
 8006280:	e000e014 	.word	0xe000e014

08006284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006294 <vPortEnableVFP+0x10>
 8006288:	6801      	ldr	r1, [r0, #0]
 800628a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800628e:	6001      	str	r1, [r0, #0]
 8006290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006292:	bf00      	nop
 8006294:	e000ed88 	.word	0xe000ed88

08006298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062a4:	f7ff f9c4 	bl	8005630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062a8:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <pvPortMalloc+0x180>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062b0:	f000 f920 	bl	80064f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062b4:	4b59      	ldr	r3, [pc, #356]	; (800641c <pvPortMalloc+0x184>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f040 8093 	bne.w	80063e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01d      	beq.n	8006304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062c8:	2208      	movs	r2, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f023 0307 	bic.w	r3, r3, #7
 80062e0:	3308      	adds	r3, #8
 80062e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <pvPortMalloc+0x6c>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	617b      	str	r3, [r7, #20]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d06e      	beq.n	80063e8 <pvPortMalloc+0x150>
 800630a:	4b45      	ldr	r3, [pc, #276]	; (8006420 <pvPortMalloc+0x188>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d869      	bhi.n	80063e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006314:	4b43      	ldr	r3, [pc, #268]	; (8006424 <pvPortMalloc+0x18c>)
 8006316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006318:	4b42      	ldr	r3, [pc, #264]	; (8006424 <pvPortMalloc+0x18c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631e:	e004      	b.n	800632a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <pvPortMalloc+0xa4>
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f1      	bne.n	8006320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800633c:	4b36      	ldr	r3, [pc, #216]	; (8006418 <pvPortMalloc+0x180>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	429a      	cmp	r2, r3
 8006344:	d050      	beq.n	80063e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2208      	movs	r2, #8
 800634c:	4413      	add	r3, r2
 800634e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	2308      	movs	r3, #8
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	429a      	cmp	r2, r3
 8006366:	d91f      	bls.n	80063a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <pvPortMalloc+0xf8>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	613b      	str	r3, [r7, #16]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1ad2      	subs	r2, r2, r3
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063a2:	69b8      	ldr	r0, [r7, #24]
 80063a4:	f000 f908 	bl	80065b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063a8:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <pvPortMalloc+0x188>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <pvPortMalloc+0x188>)
 80063b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <pvPortMalloc+0x188>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <pvPortMalloc+0x190>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d203      	bcs.n	80063ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063c2:	4b17      	ldr	r3, [pc, #92]	; (8006420 <pvPortMalloc+0x188>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <pvPortMalloc+0x190>)
 80063c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <pvPortMalloc+0x184>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <pvPortMalloc+0x194>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a11      	ldr	r2, [pc, #68]	; (800642c <pvPortMalloc+0x194>)
 80063e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063e8:	f7ff f930 	bl	800564c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <pvPortMalloc+0x174>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60fb      	str	r3, [r7, #12]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <pvPortMalloc+0x172>
	return pvReturn;
 800640c:	69fb      	ldr	r3, [r7, #28]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200042dc 	.word	0x200042dc
 800641c:	200042f0 	.word	0x200042f0
 8006420:	200042e0 	.word	0x200042e0
 8006424:	200042d4 	.word	0x200042d4
 8006428:	200042e4 	.word	0x200042e4
 800642c:	200042e8 	.word	0x200042e8

08006430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d04d      	beq.n	80064de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006442:	2308      	movs	r3, #8
 8006444:	425b      	negs	r3, r3
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <vPortFree+0xb8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <vPortFree+0x44>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <vPortFree+0x62>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60bb      	str	r3, [r7, #8]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <vPortFree+0xb8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <vPortFree+0xb8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	401a      	ands	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064b8:	f7ff f8ba 	bl	8005630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <vPortFree+0xbc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4413      	add	r3, r2
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <vPortFree+0xbc>)
 80064c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f000 f874 	bl	80065b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <vPortFree+0xc0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <vPortFree+0xc0>)
 80064d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064da:	f7ff f8b7 	bl	800564c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200042f0 	.word	0x200042f0
 80064ec:	200042e0 	.word	0x200042e0
 80064f0:	200042ec 	.word	0x200042ec

080064f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <prvHeapInit+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00c      	beq.n	8006528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3307      	adds	r3, #7
 8006512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <prvHeapInit+0xac>)
 8006524:	4413      	add	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <prvHeapInit+0xb0>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <prvHeapInit+0xb0>)
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4413      	add	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006540:	2208      	movs	r2, #8
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <prvHeapInit+0xb4>)
 8006554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <prvHeapInit+0xb4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <prvHeapInit+0xb4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvHeapInit+0xb4>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <prvHeapInit+0xb8>)
 8006582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <prvHeapInit+0xbc>)
 800658a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <prvHeapInit+0xc0>)
 800658e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	200006d4 	.word	0x200006d4
 80065a4:	200042d4 	.word	0x200042d4
 80065a8:	200042dc 	.word	0x200042dc
 80065ac:	200042e4 	.word	0x200042e4
 80065b0:	200042e0 	.word	0x200042e0
 80065b4:	200042f0 	.word	0x200042f0

080065b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <prvInsertBlockIntoFreeList+0xac>)
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <prvInsertBlockIntoFreeList+0x14>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d8f7      	bhi.n	80065c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d108      	bne.n	80065fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	441a      	add	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d118      	bne.n	8006640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <prvInsertBlockIntoFreeList+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d00d      	beq.n	8006636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	441a      	add	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e008      	b.n	8006648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <prvInsertBlockIntoFreeList+0xb0>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e003      	b.n	8006648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d002      	beq.n	8006656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	200042d4 	.word	0x200042d4
 8006668:	200042dc 	.word	0x200042dc

0800666c <__cvt>:
 800666c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	ec55 4b10 	vmov	r4, r5, d0
 8006674:	2d00      	cmp	r5, #0
 8006676:	460e      	mov	r6, r1
 8006678:	4619      	mov	r1, r3
 800667a:	462b      	mov	r3, r5
 800667c:	bfbb      	ittet	lt
 800667e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006682:	461d      	movlt	r5, r3
 8006684:	2300      	movge	r3, #0
 8006686:	232d      	movlt	r3, #45	; 0x2d
 8006688:	700b      	strb	r3, [r1, #0]
 800668a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006690:	4691      	mov	r9, r2
 8006692:	f023 0820 	bic.w	r8, r3, #32
 8006696:	bfbc      	itt	lt
 8006698:	4622      	movlt	r2, r4
 800669a:	4614      	movlt	r4, r2
 800669c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066a0:	d005      	beq.n	80066ae <__cvt+0x42>
 80066a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066a6:	d100      	bne.n	80066aa <__cvt+0x3e>
 80066a8:	3601      	adds	r6, #1
 80066aa:	2102      	movs	r1, #2
 80066ac:	e000      	b.n	80066b0 <__cvt+0x44>
 80066ae:	2103      	movs	r1, #3
 80066b0:	ab03      	add	r3, sp, #12
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	ab02      	add	r3, sp, #8
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	ec45 4b10 	vmov	d0, r4, r5
 80066bc:	4653      	mov	r3, sl
 80066be:	4632      	mov	r2, r6
 80066c0:	f000 fe56 	bl	8007370 <_dtoa_r>
 80066c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066c8:	4607      	mov	r7, r0
 80066ca:	d102      	bne.n	80066d2 <__cvt+0x66>
 80066cc:	f019 0f01 	tst.w	r9, #1
 80066d0:	d022      	beq.n	8006718 <__cvt+0xac>
 80066d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066d6:	eb07 0906 	add.w	r9, r7, r6
 80066da:	d110      	bne.n	80066fe <__cvt+0x92>
 80066dc:	783b      	ldrb	r3, [r7, #0]
 80066de:	2b30      	cmp	r3, #48	; 0x30
 80066e0:	d10a      	bne.n	80066f8 <__cvt+0x8c>
 80066e2:	2200      	movs	r2, #0
 80066e4:	2300      	movs	r3, #0
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7fa fa0d 	bl	8000b08 <__aeabi_dcmpeq>
 80066ee:	b918      	cbnz	r0, 80066f8 <__cvt+0x8c>
 80066f0:	f1c6 0601 	rsb	r6, r6, #1
 80066f4:	f8ca 6000 	str.w	r6, [sl]
 80066f8:	f8da 3000 	ldr.w	r3, [sl]
 80066fc:	4499      	add	r9, r3
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f7fa f9ff 	bl	8000b08 <__aeabi_dcmpeq>
 800670a:	b108      	cbz	r0, 8006710 <__cvt+0xa4>
 800670c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006710:	2230      	movs	r2, #48	; 0x30
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	454b      	cmp	r3, r9
 8006716:	d307      	bcc.n	8006728 <__cvt+0xbc>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800671c:	1bdb      	subs	r3, r3, r7
 800671e:	4638      	mov	r0, r7
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	b004      	add	sp, #16
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	9103      	str	r1, [sp, #12]
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	e7f0      	b.n	8006712 <__cvt+0xa6>

08006730 <__exponent>:
 8006730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006732:	4603      	mov	r3, r0
 8006734:	2900      	cmp	r1, #0
 8006736:	bfb8      	it	lt
 8006738:	4249      	neglt	r1, r1
 800673a:	f803 2b02 	strb.w	r2, [r3], #2
 800673e:	bfb4      	ite	lt
 8006740:	222d      	movlt	r2, #45	; 0x2d
 8006742:	222b      	movge	r2, #43	; 0x2b
 8006744:	2909      	cmp	r1, #9
 8006746:	7042      	strb	r2, [r0, #1]
 8006748:	dd2a      	ble.n	80067a0 <__exponent+0x70>
 800674a:	f10d 0207 	add.w	r2, sp, #7
 800674e:	4617      	mov	r7, r2
 8006750:	260a      	movs	r6, #10
 8006752:	4694      	mov	ip, r2
 8006754:	fb91 f5f6 	sdiv	r5, r1, r6
 8006758:	fb06 1415 	mls	r4, r6, r5, r1
 800675c:	3430      	adds	r4, #48	; 0x30
 800675e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006762:	460c      	mov	r4, r1
 8006764:	2c63      	cmp	r4, #99	; 0x63
 8006766:	f102 32ff 	add.w	r2, r2, #4294967295
 800676a:	4629      	mov	r1, r5
 800676c:	dcf1      	bgt.n	8006752 <__exponent+0x22>
 800676e:	3130      	adds	r1, #48	; 0x30
 8006770:	f1ac 0402 	sub.w	r4, ip, #2
 8006774:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006778:	1c41      	adds	r1, r0, #1
 800677a:	4622      	mov	r2, r4
 800677c:	42ba      	cmp	r2, r7
 800677e:	d30a      	bcc.n	8006796 <__exponent+0x66>
 8006780:	f10d 0209 	add.w	r2, sp, #9
 8006784:	eba2 020c 	sub.w	r2, r2, ip
 8006788:	42bc      	cmp	r4, r7
 800678a:	bf88      	it	hi
 800678c:	2200      	movhi	r2, #0
 800678e:	4413      	add	r3, r2
 8006790:	1a18      	subs	r0, r3, r0
 8006792:	b003      	add	sp, #12
 8006794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006796:	f812 5b01 	ldrb.w	r5, [r2], #1
 800679a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800679e:	e7ed      	b.n	800677c <__exponent+0x4c>
 80067a0:	2330      	movs	r3, #48	; 0x30
 80067a2:	3130      	adds	r1, #48	; 0x30
 80067a4:	7083      	strb	r3, [r0, #2]
 80067a6:	70c1      	strb	r1, [r0, #3]
 80067a8:	1d03      	adds	r3, r0, #4
 80067aa:	e7f1      	b.n	8006790 <__exponent+0x60>

080067ac <_printf_float>:
 80067ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	ed2d 8b02 	vpush	{d8}
 80067b4:	b08d      	sub	sp, #52	; 0x34
 80067b6:	460c      	mov	r4, r1
 80067b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067bc:	4616      	mov	r6, r2
 80067be:	461f      	mov	r7, r3
 80067c0:	4605      	mov	r5, r0
 80067c2:	f000 fcc7 	bl	8007154 <_localeconv_r>
 80067c6:	f8d0 a000 	ldr.w	sl, [r0]
 80067ca:	4650      	mov	r0, sl
 80067cc:	f7f9 fd70 	bl	80002b0 <strlen>
 80067d0:	2300      	movs	r3, #0
 80067d2:	930a      	str	r3, [sp, #40]	; 0x28
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	9305      	str	r3, [sp, #20]
 80067d8:	f8d8 3000 	ldr.w	r3, [r8]
 80067dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80067e0:	3307      	adds	r3, #7
 80067e2:	f023 0307 	bic.w	r3, r3, #7
 80067e6:	f103 0208 	add.w	r2, r3, #8
 80067ea:	f8c8 2000 	str.w	r2, [r8]
 80067ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80067fc:	ee08 0a10 	vmov	s16, r0
 8006800:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006808:	4b9e      	ldr	r3, [pc, #632]	; (8006a84 <_printf_float+0x2d8>)
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	f7fa f9ad 	bl	8000b6c <__aeabi_dcmpun>
 8006812:	bb88      	cbnz	r0, 8006878 <_printf_float+0xcc>
 8006814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006818:	4b9a      	ldr	r3, [pc, #616]	; (8006a84 <_printf_float+0x2d8>)
 800681a:	f04f 32ff 	mov.w	r2, #4294967295
 800681e:	f7fa f987 	bl	8000b30 <__aeabi_dcmple>
 8006822:	bb48      	cbnz	r0, 8006878 <_printf_float+0xcc>
 8006824:	2200      	movs	r2, #0
 8006826:	2300      	movs	r3, #0
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7fa f976 	bl	8000b1c <__aeabi_dcmplt>
 8006830:	b110      	cbz	r0, 8006838 <_printf_float+0x8c>
 8006832:	232d      	movs	r3, #45	; 0x2d
 8006834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006838:	4a93      	ldr	r2, [pc, #588]	; (8006a88 <_printf_float+0x2dc>)
 800683a:	4b94      	ldr	r3, [pc, #592]	; (8006a8c <_printf_float+0x2e0>)
 800683c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006840:	bf94      	ite	ls
 8006842:	4690      	movls	r8, r2
 8006844:	4698      	movhi	r8, r3
 8006846:	2303      	movs	r3, #3
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	9b05      	ldr	r3, [sp, #20]
 800684c:	f023 0304 	bic.w	r3, r3, #4
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	f04f 0900 	mov.w	r9, #0
 8006856:	9700      	str	r7, [sp, #0]
 8006858:	4633      	mov	r3, r6
 800685a:	aa0b      	add	r2, sp, #44	; 0x2c
 800685c:	4621      	mov	r1, r4
 800685e:	4628      	mov	r0, r5
 8006860:	f000 f9da 	bl	8006c18 <_printf_common>
 8006864:	3001      	adds	r0, #1
 8006866:	f040 8090 	bne.w	800698a <_printf_float+0x1de>
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	b00d      	add	sp, #52	; 0x34
 8006870:	ecbd 8b02 	vpop	{d8}
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	4640      	mov	r0, r8
 800687e:	4649      	mov	r1, r9
 8006880:	f7fa f974 	bl	8000b6c <__aeabi_dcmpun>
 8006884:	b140      	cbz	r0, 8006898 <_printf_float+0xec>
 8006886:	464b      	mov	r3, r9
 8006888:	2b00      	cmp	r3, #0
 800688a:	bfbc      	itt	lt
 800688c:	232d      	movlt	r3, #45	; 0x2d
 800688e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006892:	4a7f      	ldr	r2, [pc, #508]	; (8006a90 <_printf_float+0x2e4>)
 8006894:	4b7f      	ldr	r3, [pc, #508]	; (8006a94 <_printf_float+0x2e8>)
 8006896:	e7d1      	b.n	800683c <_printf_float+0x90>
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800689e:	9206      	str	r2, [sp, #24]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	d13f      	bne.n	8006924 <_printf_float+0x178>
 80068a4:	2306      	movs	r3, #6
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	6861      	ldr	r1, [r4, #4]
 80068ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068b0:	2300      	movs	r3, #0
 80068b2:	9303      	str	r3, [sp, #12]
 80068b4:	ab0a      	add	r3, sp, #40	; 0x28
 80068b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068ba:	ab09      	add	r3, sp, #36	; 0x24
 80068bc:	ec49 8b10 	vmov	d0, r8, r9
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6022      	str	r2, [r4, #0]
 80068c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7ff fecf 	bl	800666c <__cvt>
 80068ce:	9b06      	ldr	r3, [sp, #24]
 80068d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d2:	2b47      	cmp	r3, #71	; 0x47
 80068d4:	4680      	mov	r8, r0
 80068d6:	d108      	bne.n	80068ea <_printf_float+0x13e>
 80068d8:	1cc8      	adds	r0, r1, #3
 80068da:	db02      	blt.n	80068e2 <_printf_float+0x136>
 80068dc:	6863      	ldr	r3, [r4, #4]
 80068de:	4299      	cmp	r1, r3
 80068e0:	dd41      	ble.n	8006966 <_printf_float+0x1ba>
 80068e2:	f1ab 0302 	sub.w	r3, fp, #2
 80068e6:	fa5f fb83 	uxtb.w	fp, r3
 80068ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068ee:	d820      	bhi.n	8006932 <_printf_float+0x186>
 80068f0:	3901      	subs	r1, #1
 80068f2:	465a      	mov	r2, fp
 80068f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068f8:	9109      	str	r1, [sp, #36]	; 0x24
 80068fa:	f7ff ff19 	bl	8006730 <__exponent>
 80068fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006900:	1813      	adds	r3, r2, r0
 8006902:	2a01      	cmp	r2, #1
 8006904:	4681      	mov	r9, r0
 8006906:	6123      	str	r3, [r4, #16]
 8006908:	dc02      	bgt.n	8006910 <_printf_float+0x164>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	07d2      	lsls	r2, r2, #31
 800690e:	d501      	bpl.n	8006914 <_printf_float+0x168>
 8006910:	3301      	adds	r3, #1
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006918:	2b00      	cmp	r3, #0
 800691a:	d09c      	beq.n	8006856 <_printf_float+0xaa>
 800691c:	232d      	movs	r3, #45	; 0x2d
 800691e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006922:	e798      	b.n	8006856 <_printf_float+0xaa>
 8006924:	9a06      	ldr	r2, [sp, #24]
 8006926:	2a47      	cmp	r2, #71	; 0x47
 8006928:	d1be      	bne.n	80068a8 <_printf_float+0xfc>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1bc      	bne.n	80068a8 <_printf_float+0xfc>
 800692e:	2301      	movs	r3, #1
 8006930:	e7b9      	b.n	80068a6 <_printf_float+0xfa>
 8006932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006936:	d118      	bne.n	800696a <_printf_float+0x1be>
 8006938:	2900      	cmp	r1, #0
 800693a:	6863      	ldr	r3, [r4, #4]
 800693c:	dd0b      	ble.n	8006956 <_printf_float+0x1aa>
 800693e:	6121      	str	r1, [r4, #16]
 8006940:	b913      	cbnz	r3, 8006948 <_printf_float+0x19c>
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	07d0      	lsls	r0, r2, #31
 8006946:	d502      	bpl.n	800694e <_printf_float+0x1a2>
 8006948:	3301      	adds	r3, #1
 800694a:	440b      	add	r3, r1
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	e7de      	b.n	8006914 <_printf_float+0x168>
 8006956:	b913      	cbnz	r3, 800695e <_printf_float+0x1b2>
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	07d2      	lsls	r2, r2, #31
 800695c:	d501      	bpl.n	8006962 <_printf_float+0x1b6>
 800695e:	3302      	adds	r3, #2
 8006960:	e7f4      	b.n	800694c <_printf_float+0x1a0>
 8006962:	2301      	movs	r3, #1
 8006964:	e7f2      	b.n	800694c <_printf_float+0x1a0>
 8006966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800696a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696c:	4299      	cmp	r1, r3
 800696e:	db05      	blt.n	800697c <_printf_float+0x1d0>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	6121      	str	r1, [r4, #16]
 8006974:	07d8      	lsls	r0, r3, #31
 8006976:	d5ea      	bpl.n	800694e <_printf_float+0x1a2>
 8006978:	1c4b      	adds	r3, r1, #1
 800697a:	e7e7      	b.n	800694c <_printf_float+0x1a0>
 800697c:	2900      	cmp	r1, #0
 800697e:	bfd4      	ite	le
 8006980:	f1c1 0202 	rsble	r2, r1, #2
 8006984:	2201      	movgt	r2, #1
 8006986:	4413      	add	r3, r2
 8006988:	e7e0      	b.n	800694c <_printf_float+0x1a0>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	055a      	lsls	r2, r3, #21
 800698e:	d407      	bmi.n	80069a0 <_printf_float+0x1f4>
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	4642      	mov	r2, r8
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	d12c      	bne.n	80069f8 <_printf_float+0x24c>
 800699e:	e764      	b.n	800686a <_printf_float+0xbe>
 80069a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069a4:	f240 80e0 	bls.w	8006b68 <_printf_float+0x3bc>
 80069a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ac:	2200      	movs	r2, #0
 80069ae:	2300      	movs	r3, #0
 80069b0:	f7fa f8aa 	bl	8000b08 <__aeabi_dcmpeq>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d034      	beq.n	8006a22 <_printf_float+0x276>
 80069b8:	4a37      	ldr	r2, [pc, #220]	; (8006a98 <_printf_float+0x2ec>)
 80069ba:	2301      	movs	r3, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f af51 	beq.w	800686a <_printf_float+0xbe>
 80069c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069cc:	429a      	cmp	r2, r3
 80069ce:	db02      	blt.n	80069d6 <_printf_float+0x22a>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	07d8      	lsls	r0, r3, #31
 80069d4:	d510      	bpl.n	80069f8 <_printf_float+0x24c>
 80069d6:	ee18 3a10 	vmov	r3, s16
 80069da:	4652      	mov	r2, sl
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	f43f af41 	beq.w	800686a <_printf_float+0xbe>
 80069e8:	f04f 0800 	mov.w	r8, #0
 80069ec:	f104 091a 	add.w	r9, r4, #26
 80069f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f2:	3b01      	subs	r3, #1
 80069f4:	4543      	cmp	r3, r8
 80069f6:	dc09      	bgt.n	8006a0c <_printf_float+0x260>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	079b      	lsls	r3, r3, #30
 80069fc:	f100 8107 	bmi.w	8006c0e <_printf_float+0x462>
 8006a00:	68e0      	ldr	r0, [r4, #12]
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	4298      	cmp	r0, r3
 8006a06:	bfb8      	it	lt
 8006a08:	4618      	movlt	r0, r3
 8006a0a:	e730      	b.n	800686e <_printf_float+0xc2>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	464a      	mov	r2, r9
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f af27 	beq.w	800686a <_printf_float+0xbe>
 8006a1c:	f108 0801 	add.w	r8, r8, #1
 8006a20:	e7e6      	b.n	80069f0 <_printf_float+0x244>
 8006a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dc39      	bgt.n	8006a9c <_printf_float+0x2f0>
 8006a28:	4a1b      	ldr	r2, [pc, #108]	; (8006a98 <_printf_float+0x2ec>)
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af19 	beq.w	800686a <_printf_float+0xbe>
 8006a38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	d102      	bne.n	8006a46 <_printf_float+0x29a>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	07d9      	lsls	r1, r3, #31
 8006a44:	d5d8      	bpl.n	80069f8 <_printf_float+0x24c>
 8006a46:	ee18 3a10 	vmov	r3, s16
 8006a4a:	4652      	mov	r2, sl
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	f43f af09 	beq.w	800686a <_printf_float+0xbe>
 8006a58:	f04f 0900 	mov.w	r9, #0
 8006a5c:	f104 0a1a 	add.w	sl, r4, #26
 8006a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a62:	425b      	negs	r3, r3
 8006a64:	454b      	cmp	r3, r9
 8006a66:	dc01      	bgt.n	8006a6c <_printf_float+0x2c0>
 8006a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6a:	e792      	b.n	8006992 <_printf_float+0x1e6>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4652      	mov	r2, sl
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f aef7 	beq.w	800686a <_printf_float+0xbe>
 8006a7c:	f109 0901 	add.w	r9, r9, #1
 8006a80:	e7ee      	b.n	8006a60 <_printf_float+0x2b4>
 8006a82:	bf00      	nop
 8006a84:	7fefffff 	.word	0x7fefffff
 8006a88:	0800903c 	.word	0x0800903c
 8006a8c:	08009040 	.word	0x08009040
 8006a90:	08009044 	.word	0x08009044
 8006a94:	08009048 	.word	0x08009048
 8006a98:	0800904c 	.word	0x0800904c
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bfa8      	it	ge
 8006aa4:	461a      	movge	r2, r3
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	dc37      	bgt.n	8006b1c <_printf_float+0x370>
 8006aac:	f04f 0b00 	mov.w	fp, #0
 8006ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ab4:	f104 021a 	add.w	r2, r4, #26
 8006ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006aba:	9305      	str	r3, [sp, #20]
 8006abc:	eba3 0309 	sub.w	r3, r3, r9
 8006ac0:	455b      	cmp	r3, fp
 8006ac2:	dc33      	bgt.n	8006b2c <_printf_float+0x380>
 8006ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	db3b      	blt.n	8006b44 <_printf_float+0x398>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07da      	lsls	r2, r3, #31
 8006ad0:	d438      	bmi.n	8006b44 <_printf_float+0x398>
 8006ad2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ad6:	eba2 0903 	sub.w	r9, r2, r3
 8006ada:	9b05      	ldr	r3, [sp, #20]
 8006adc:	1ad2      	subs	r2, r2, r3
 8006ade:	4591      	cmp	r9, r2
 8006ae0:	bfa8      	it	ge
 8006ae2:	4691      	movge	r9, r2
 8006ae4:	f1b9 0f00 	cmp.w	r9, #0
 8006ae8:	dc35      	bgt.n	8006b56 <_printf_float+0x3aa>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006af2:	f104 0a1a 	add.w	sl, r4, #26
 8006af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	eba3 0309 	sub.w	r3, r3, r9
 8006b00:	4543      	cmp	r3, r8
 8006b02:	f77f af79 	ble.w	80069f8 <_printf_float+0x24c>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4652      	mov	r2, sl
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b8      	blx	r7
 8006b10:	3001      	adds	r0, #1
 8006b12:	f43f aeaa 	beq.w	800686a <_printf_float+0xbe>
 8006b16:	f108 0801 	add.w	r8, r8, #1
 8006b1a:	e7ec      	b.n	8006af6 <_printf_float+0x34a>
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4642      	mov	r2, r8
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	d1c0      	bne.n	8006aac <_printf_float+0x300>
 8006b2a:	e69e      	b.n	800686a <_printf_float+0xbe>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	9205      	str	r2, [sp, #20]
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f ae97 	beq.w	800686a <_printf_float+0xbe>
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	f10b 0b01 	add.w	fp, fp, #1
 8006b42:	e7b9      	b.n	8006ab8 <_printf_float+0x30c>
 8006b44:	ee18 3a10 	vmov	r3, s16
 8006b48:	4652      	mov	r2, sl
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	d1be      	bne.n	8006ad2 <_printf_float+0x326>
 8006b54:	e689      	b.n	800686a <_printf_float+0xbe>
 8006b56:	9a05      	ldr	r2, [sp, #20]
 8006b58:	464b      	mov	r3, r9
 8006b5a:	4442      	add	r2, r8
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	d1c1      	bne.n	8006aea <_printf_float+0x33e>
 8006b66:	e680      	b.n	800686a <_printf_float+0xbe>
 8006b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b6a:	2a01      	cmp	r2, #1
 8006b6c:	dc01      	bgt.n	8006b72 <_printf_float+0x3c6>
 8006b6e:	07db      	lsls	r3, r3, #31
 8006b70:	d53a      	bpl.n	8006be8 <_printf_float+0x43c>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4642      	mov	r2, r8
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f43f ae74 	beq.w	800686a <_printf_float+0xbe>
 8006b82:	ee18 3a10 	vmov	r3, s16
 8006b86:	4652      	mov	r2, sl
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	f43f ae6b 	beq.w	800686a <_printf_float+0xbe>
 8006b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ba0:	f7f9 ffb2 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba4:	b9d8      	cbnz	r0, 8006bde <_printf_float+0x432>
 8006ba6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006baa:	f108 0201 	add.w	r2, r8, #1
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b8      	blx	r7
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d10e      	bne.n	8006bd6 <_printf_float+0x42a>
 8006bb8:	e657      	b.n	800686a <_printf_float+0xbe>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b8      	blx	r7
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	f43f ae50 	beq.w	800686a <_printf_float+0xbe>
 8006bca:	f108 0801 	add.w	r8, r8, #1
 8006bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	4543      	cmp	r3, r8
 8006bd4:	dcf1      	bgt.n	8006bba <_printf_float+0x40e>
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bdc:	e6da      	b.n	8006994 <_printf_float+0x1e8>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	f104 0a1a 	add.w	sl, r4, #26
 8006be6:	e7f2      	b.n	8006bce <_printf_float+0x422>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4642      	mov	r2, r8
 8006bec:	e7df      	b.n	8006bae <_printf_float+0x402>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	464a      	mov	r2, r9
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f ae36 	beq.w	800686a <_printf_float+0xbe>
 8006bfe:	f108 0801 	add.w	r8, r8, #1
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c06:	1a5b      	subs	r3, r3, r1
 8006c08:	4543      	cmp	r3, r8
 8006c0a:	dcf0      	bgt.n	8006bee <_printf_float+0x442>
 8006c0c:	e6f8      	b.n	8006a00 <_printf_float+0x254>
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	f104 0919 	add.w	r9, r4, #25
 8006c16:	e7f4      	b.n	8006c02 <_printf_float+0x456>

08006c18 <_printf_common>:
 8006c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c1c:	4616      	mov	r6, r2
 8006c1e:	4699      	mov	r9, r3
 8006c20:	688a      	ldr	r2, [r1, #8]
 8006c22:	690b      	ldr	r3, [r1, #16]
 8006c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	bfb8      	it	lt
 8006c2c:	4613      	movlt	r3, r2
 8006c2e:	6033      	str	r3, [r6, #0]
 8006c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c34:	4607      	mov	r7, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	b10a      	cbz	r2, 8006c3e <_printf_common+0x26>
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	6033      	str	r3, [r6, #0]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	0699      	lsls	r1, r3, #26
 8006c42:	bf42      	ittt	mi
 8006c44:	6833      	ldrmi	r3, [r6, #0]
 8006c46:	3302      	addmi	r3, #2
 8006c48:	6033      	strmi	r3, [r6, #0]
 8006c4a:	6825      	ldr	r5, [r4, #0]
 8006c4c:	f015 0506 	ands.w	r5, r5, #6
 8006c50:	d106      	bne.n	8006c60 <_printf_common+0x48>
 8006c52:	f104 0a19 	add.w	sl, r4, #25
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	6832      	ldr	r2, [r6, #0]
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dc26      	bgt.n	8006cae <_printf_common+0x96>
 8006c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c64:	1e13      	subs	r3, r2, #0
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	bf18      	it	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	0692      	lsls	r2, r2, #26
 8006c6e:	d42b      	bmi.n	8006cc8 <_printf_common+0xb0>
 8006c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c74:	4649      	mov	r1, r9
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c0      	blx	r8
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d01e      	beq.n	8006cbc <_printf_common+0xa4>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	6922      	ldr	r2, [r4, #16]
 8006c82:	f003 0306 	and.w	r3, r3, #6
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	bf02      	ittt	eq
 8006c8a:	68e5      	ldreq	r5, [r4, #12]
 8006c8c:	6833      	ldreq	r3, [r6, #0]
 8006c8e:	1aed      	subeq	r5, r5, r3
 8006c90:	68a3      	ldr	r3, [r4, #8]
 8006c92:	bf0c      	ite	eq
 8006c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c98:	2500      	movne	r5, #0
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	bfc4      	itt	gt
 8006c9e:	1a9b      	subgt	r3, r3, r2
 8006ca0:	18ed      	addgt	r5, r5, r3
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	341a      	adds	r4, #26
 8006ca6:	42b5      	cmp	r5, r6
 8006ca8:	d11a      	bne.n	8006ce0 <_printf_common+0xc8>
 8006caa:	2000      	movs	r0, #0
 8006cac:	e008      	b.n	8006cc0 <_printf_common+0xa8>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	47c0      	blx	r8
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d103      	bne.n	8006cc4 <_printf_common+0xac>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e7c6      	b.n	8006c56 <_printf_common+0x3e>
 8006cc8:	18e1      	adds	r1, r4, r3
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	2030      	movs	r0, #48	; 0x30
 8006cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cd2:	4422      	add	r2, r4
 8006cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cdc:	3302      	adds	r3, #2
 8006cde:	e7c7      	b.n	8006c70 <_printf_common+0x58>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	47c0      	blx	r8
 8006cea:	3001      	adds	r0, #1
 8006cec:	d0e6      	beq.n	8006cbc <_printf_common+0xa4>
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7d9      	b.n	8006ca6 <_printf_common+0x8e>
	...

08006cf4 <_printf_i>:
 8006cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf8:	7e0f      	ldrb	r7, [r1, #24]
 8006cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cfc:	2f78      	cmp	r7, #120	; 0x78
 8006cfe:	4691      	mov	r9, r2
 8006d00:	4680      	mov	r8, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	469a      	mov	sl, r3
 8006d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d0a:	d807      	bhi.n	8006d1c <_printf_i+0x28>
 8006d0c:	2f62      	cmp	r7, #98	; 0x62
 8006d0e:	d80a      	bhi.n	8006d26 <_printf_i+0x32>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	f000 80d4 	beq.w	8006ebe <_printf_i+0x1ca>
 8006d16:	2f58      	cmp	r7, #88	; 0x58
 8006d18:	f000 80c0 	beq.w	8006e9c <_printf_i+0x1a8>
 8006d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d24:	e03a      	b.n	8006d9c <_printf_i+0xa8>
 8006d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d2a:	2b15      	cmp	r3, #21
 8006d2c:	d8f6      	bhi.n	8006d1c <_printf_i+0x28>
 8006d2e:	a101      	add	r1, pc, #4	; (adr r1, 8006d34 <_printf_i+0x40>)
 8006d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	08006da1 	.word	0x08006da1
 8006d3c:	08006d1d 	.word	0x08006d1d
 8006d40:	08006d1d 	.word	0x08006d1d
 8006d44:	08006d1d 	.word	0x08006d1d
 8006d48:	08006d1d 	.word	0x08006d1d
 8006d4c:	08006da1 	.word	0x08006da1
 8006d50:	08006d1d 	.word	0x08006d1d
 8006d54:	08006d1d 	.word	0x08006d1d
 8006d58:	08006d1d 	.word	0x08006d1d
 8006d5c:	08006d1d 	.word	0x08006d1d
 8006d60:	08006ea5 	.word	0x08006ea5
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006e5f 	.word	0x08006e5f
 8006d6c:	08006d1d 	.word	0x08006d1d
 8006d70:	08006d1d 	.word	0x08006d1d
 8006d74:	08006ec7 	.word	0x08006ec7
 8006d78:	08006d1d 	.word	0x08006d1d
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006d1d 	.word	0x08006d1d
 8006d84:	08006d1d 	.word	0x08006d1d
 8006d88:	08006e67 	.word	0x08006e67
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	1d1a      	adds	r2, r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	602a      	str	r2, [r5, #0]
 8006d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e09f      	b.n	8006ee0 <_printf_i+0x1ec>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	0607      	lsls	r7, r0, #24
 8006da6:	f103 0104 	add.w	r1, r3, #4
 8006daa:	6029      	str	r1, [r5, #0]
 8006dac:	d501      	bpl.n	8006db2 <_printf_i+0xbe>
 8006dae:	681e      	ldr	r6, [r3, #0]
 8006db0:	e003      	b.n	8006dba <_printf_i+0xc6>
 8006db2:	0646      	lsls	r6, r0, #25
 8006db4:	d5fb      	bpl.n	8006dae <_printf_i+0xba>
 8006db6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	da03      	bge.n	8006dc6 <_printf_i+0xd2>
 8006dbe:	232d      	movs	r3, #45	; 0x2d
 8006dc0:	4276      	negs	r6, r6
 8006dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc6:	485a      	ldr	r0, [pc, #360]	; (8006f30 <_printf_i+0x23c>)
 8006dc8:	230a      	movs	r3, #10
 8006dca:	e012      	b.n	8006df2 <_printf_i+0xfe>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	1d19      	adds	r1, r3, #4
 8006dd2:	6029      	str	r1, [r5, #0]
 8006dd4:	0605      	lsls	r5, r0, #24
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0xe8>
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <_printf_i+0xee>
 8006ddc:	0641      	lsls	r1, r0, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0xe4>
 8006de0:	881e      	ldrh	r6, [r3, #0]
 8006de2:	4853      	ldr	r0, [pc, #332]	; (8006f30 <_printf_i+0x23c>)
 8006de4:	2f6f      	cmp	r7, #111	; 0x6f
 8006de6:	bf0c      	ite	eq
 8006de8:	2308      	moveq	r3, #8
 8006dea:	230a      	movne	r3, #10
 8006dec:	2100      	movs	r1, #0
 8006dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006df2:	6865      	ldr	r5, [r4, #4]
 8006df4:	60a5      	str	r5, [r4, #8]
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	bfa2      	ittt	ge
 8006dfa:	6821      	ldrge	r1, [r4, #0]
 8006dfc:	f021 0104 	bicge.w	r1, r1, #4
 8006e00:	6021      	strge	r1, [r4, #0]
 8006e02:	b90e      	cbnz	r6, 8006e08 <_printf_i+0x114>
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	d04b      	beq.n	8006ea0 <_printf_i+0x1ac>
 8006e08:	4615      	mov	r5, r2
 8006e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e12:	5dc7      	ldrb	r7, [r0, r7]
 8006e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e18:	4637      	mov	r7, r6
 8006e1a:	42bb      	cmp	r3, r7
 8006e1c:	460e      	mov	r6, r1
 8006e1e:	d9f4      	bls.n	8006e0a <_printf_i+0x116>
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d10b      	bne.n	8006e3c <_printf_i+0x148>
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	07de      	lsls	r6, r3, #31
 8006e28:	d508      	bpl.n	8006e3c <_printf_i+0x148>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	6861      	ldr	r1, [r4, #4]
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	bfde      	ittt	le
 8006e32:	2330      	movle	r3, #48	; 0x30
 8006e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e3c:	1b52      	subs	r2, r2, r5
 8006e3e:	6122      	str	r2, [r4, #16]
 8006e40:	f8cd a000 	str.w	sl, [sp]
 8006e44:	464b      	mov	r3, r9
 8006e46:	aa03      	add	r2, sp, #12
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4640      	mov	r0, r8
 8006e4c:	f7ff fee4 	bl	8006c18 <_printf_common>
 8006e50:	3001      	adds	r0, #1
 8006e52:	d14a      	bne.n	8006eea <_printf_i+0x1f6>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b004      	add	sp, #16
 8006e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	f043 0320 	orr.w	r3, r3, #32
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	4833      	ldr	r0, [pc, #204]	; (8006f34 <_printf_i+0x240>)
 8006e68:	2778      	movs	r7, #120	; 0x78
 8006e6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	6829      	ldr	r1, [r5, #0]
 8006e72:	061f      	lsls	r7, r3, #24
 8006e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e78:	d402      	bmi.n	8006e80 <_printf_i+0x18c>
 8006e7a:	065f      	lsls	r7, r3, #25
 8006e7c:	bf48      	it	mi
 8006e7e:	b2b6      	uxthmi	r6, r6
 8006e80:	07df      	lsls	r7, r3, #31
 8006e82:	bf48      	it	mi
 8006e84:	f043 0320 	orrmi.w	r3, r3, #32
 8006e88:	6029      	str	r1, [r5, #0]
 8006e8a:	bf48      	it	mi
 8006e8c:	6023      	strmi	r3, [r4, #0]
 8006e8e:	b91e      	cbnz	r6, 8006e98 <_printf_i+0x1a4>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	f023 0320 	bic.w	r3, r3, #32
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	2310      	movs	r3, #16
 8006e9a:	e7a7      	b.n	8006dec <_printf_i+0xf8>
 8006e9c:	4824      	ldr	r0, [pc, #144]	; (8006f30 <_printf_i+0x23c>)
 8006e9e:	e7e4      	b.n	8006e6a <_printf_i+0x176>
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	e7bd      	b.n	8006e20 <_printf_i+0x12c>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	6826      	ldr	r6, [r4, #0]
 8006ea8:	6961      	ldr	r1, [r4, #20]
 8006eaa:	1d18      	adds	r0, r3, #4
 8006eac:	6028      	str	r0, [r5, #0]
 8006eae:	0635      	lsls	r5, r6, #24
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0x1c4>
 8006eb4:	6019      	str	r1, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0x1ca>
 8006eb8:	0670      	lsls	r0, r6, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0x1c0>
 8006ebc:	8019      	strh	r1, [r3, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	4615      	mov	r5, r2
 8006ec4:	e7bc      	b.n	8006e40 <_printf_i+0x14c>
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	602a      	str	r2, [r5, #0]
 8006ecc:	681d      	ldr	r5, [r3, #0]
 8006ece:	6862      	ldr	r2, [r4, #4]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 f99c 	bl	8000210 <memchr>
 8006ed8:	b108      	cbz	r0, 8006ede <_printf_i+0x1ea>
 8006eda:	1b40      	subs	r0, r0, r5
 8006edc:	6060      	str	r0, [r4, #4]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee8:	e7aa      	b.n	8006e40 <_printf_i+0x14c>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	462a      	mov	r2, r5
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	47d0      	blx	sl
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0ad      	beq.n	8006e54 <_printf_i+0x160>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	079b      	lsls	r3, r3, #30
 8006efc:	d413      	bmi.n	8006f26 <_printf_i+0x232>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	4298      	cmp	r0, r3
 8006f04:	bfb8      	it	lt
 8006f06:	4618      	movlt	r0, r3
 8006f08:	e7a6      	b.n	8006e58 <_printf_i+0x164>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	47d0      	blx	sl
 8006f14:	3001      	adds	r0, #1
 8006f16:	d09d      	beq.n	8006e54 <_printf_i+0x160>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	1a5b      	subs	r3, r3, r1
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dcf2      	bgt.n	8006f0a <_printf_i+0x216>
 8006f24:	e7eb      	b.n	8006efe <_printf_i+0x20a>
 8006f26:	2500      	movs	r5, #0
 8006f28:	f104 0619 	add.w	r6, r4, #25
 8006f2c:	e7f5      	b.n	8006f1a <_printf_i+0x226>
 8006f2e:	bf00      	nop
 8006f30:	0800904e 	.word	0x0800904e
 8006f34:	0800905f 	.word	0x0800905f

08006f38 <std>:
 8006f38:	2300      	movs	r3, #0
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f46:	6083      	str	r3, [r0, #8]
 8006f48:	8181      	strh	r1, [r0, #12]
 8006f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f4c:	81c2      	strh	r2, [r0, #14]
 8006f4e:	6183      	str	r3, [r0, #24]
 8006f50:	4619      	mov	r1, r3
 8006f52:	2208      	movs	r2, #8
 8006f54:	305c      	adds	r0, #92	; 0x5c
 8006f56:	f000 f8f4 	bl	8007142 <memset>
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <std+0x58>)
 8006f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <std+0x5c>)
 8006f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f62:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <std+0x60>)
 8006f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <std+0x64>)
 8006f68:	6323      	str	r3, [r4, #48]	; 0x30
 8006f6a:	4b0d      	ldr	r3, [pc, #52]	; (8006fa0 <std+0x68>)
 8006f6c:	6224      	str	r4, [r4, #32]
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d006      	beq.n	8006f80 <std+0x48>
 8006f72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f76:	4294      	cmp	r4, r2
 8006f78:	d002      	beq.n	8006f80 <std+0x48>
 8006f7a:	33d0      	adds	r3, #208	; 0xd0
 8006f7c:	429c      	cmp	r4, r3
 8006f7e:	d105      	bne.n	8006f8c <std+0x54>
 8006f80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f88:	f000 b958 	b.w	800723c <__retarget_lock_init_recursive>
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	080070bd 	.word	0x080070bd
 8006f94:	080070df 	.word	0x080070df
 8006f98:	08007117 	.word	0x08007117
 8006f9c:	0800713b 	.word	0x0800713b
 8006fa0:	200042f4 	.word	0x200042f4

08006fa4 <stdio_exit_handler>:
 8006fa4:	4a02      	ldr	r2, [pc, #8]	; (8006fb0 <stdio_exit_handler+0xc>)
 8006fa6:	4903      	ldr	r1, [pc, #12]	; (8006fb4 <stdio_exit_handler+0x10>)
 8006fa8:	4803      	ldr	r0, [pc, #12]	; (8006fb8 <stdio_exit_handler+0x14>)
 8006faa:	f000 b869 	b.w	8007080 <_fwalk_sglue>
 8006fae:	bf00      	nop
 8006fb0:	20000010 	.word	0x20000010
 8006fb4:	08008959 	.word	0x08008959
 8006fb8:	2000001c 	.word	0x2000001c

08006fbc <cleanup_stdio>:
 8006fbc:	6841      	ldr	r1, [r0, #4]
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <cleanup_stdio+0x34>)
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	d001      	beq.n	8006fcc <cleanup_stdio+0x10>
 8006fc8:	f001 fcc6 	bl	8008958 <_fflush_r>
 8006fcc:	68a1      	ldr	r1, [r4, #8]
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <cleanup_stdio+0x38>)
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d002      	beq.n	8006fda <cleanup_stdio+0x1e>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f001 fcbf 	bl	8008958 <_fflush_r>
 8006fda:	68e1      	ldr	r1, [r4, #12]
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <cleanup_stdio+0x3c>)
 8006fde:	4299      	cmp	r1, r3
 8006fe0:	d004      	beq.n	8006fec <cleanup_stdio+0x30>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe8:	f001 bcb6 	b.w	8008958 <_fflush_r>
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	200042f4 	.word	0x200042f4
 8006ff4:	2000435c 	.word	0x2000435c
 8006ff8:	200043c4 	.word	0x200043c4

08006ffc <global_stdio_init.part.0>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	; (800702c <global_stdio_init.part.0+0x30>)
 8007000:	4c0b      	ldr	r4, [pc, #44]	; (8007030 <global_stdio_init.part.0+0x34>)
 8007002:	4a0c      	ldr	r2, [pc, #48]	; (8007034 <global_stdio_init.part.0+0x38>)
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	2200      	movs	r2, #0
 800700a:	2104      	movs	r1, #4
 800700c:	f7ff ff94 	bl	8006f38 <std>
 8007010:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007014:	2201      	movs	r2, #1
 8007016:	2109      	movs	r1, #9
 8007018:	f7ff ff8e 	bl	8006f38 <std>
 800701c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007020:	2202      	movs	r2, #2
 8007022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007026:	2112      	movs	r1, #18
 8007028:	f7ff bf86 	b.w	8006f38 <std>
 800702c:	2000442c 	.word	0x2000442c
 8007030:	200042f4 	.word	0x200042f4
 8007034:	08006fa5 	.word	0x08006fa5

08007038 <__sfp_lock_acquire>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__sfp_lock_acquire+0x8>)
 800703a:	f000 b900 	b.w	800723e <__retarget_lock_acquire_recursive>
 800703e:	bf00      	nop
 8007040:	20004435 	.word	0x20004435

08007044 <__sfp_lock_release>:
 8007044:	4801      	ldr	r0, [pc, #4]	; (800704c <__sfp_lock_release+0x8>)
 8007046:	f000 b8fb 	b.w	8007240 <__retarget_lock_release_recursive>
 800704a:	bf00      	nop
 800704c:	20004435 	.word	0x20004435

08007050 <__sinit>:
 8007050:	b510      	push	{r4, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	f7ff fff0 	bl	8007038 <__sfp_lock_acquire>
 8007058:	6a23      	ldr	r3, [r4, #32]
 800705a:	b11b      	cbz	r3, 8007064 <__sinit+0x14>
 800705c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007060:	f7ff bff0 	b.w	8007044 <__sfp_lock_release>
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <__sinit+0x28>)
 8007066:	6223      	str	r3, [r4, #32]
 8007068:	4b04      	ldr	r3, [pc, #16]	; (800707c <__sinit+0x2c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f5      	bne.n	800705c <__sinit+0xc>
 8007070:	f7ff ffc4 	bl	8006ffc <global_stdio_init.part.0>
 8007074:	e7f2      	b.n	800705c <__sinit+0xc>
 8007076:	bf00      	nop
 8007078:	08006fbd 	.word	0x08006fbd
 800707c:	2000442c 	.word	0x2000442c

08007080 <_fwalk_sglue>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4607      	mov	r7, r0
 8007086:	4688      	mov	r8, r1
 8007088:	4614      	mov	r4, r2
 800708a:	2600      	movs	r6, #0
 800708c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007090:	f1b9 0901 	subs.w	r9, r9, #1
 8007094:	d505      	bpl.n	80070a2 <_fwalk_sglue+0x22>
 8007096:	6824      	ldr	r4, [r4, #0]
 8007098:	2c00      	cmp	r4, #0
 800709a:	d1f7      	bne.n	800708c <_fwalk_sglue+0xc>
 800709c:	4630      	mov	r0, r6
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d907      	bls.n	80070b8 <_fwalk_sglue+0x38>
 80070a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ac:	3301      	adds	r3, #1
 80070ae:	d003      	beq.n	80070b8 <_fwalk_sglue+0x38>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	4306      	orrs	r6, r0
 80070b8:	3568      	adds	r5, #104	; 0x68
 80070ba:	e7e9      	b.n	8007090 <_fwalk_sglue+0x10>

080070bc <__sread>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	460c      	mov	r4, r1
 80070c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c4:	f000 f86c 	bl	80071a0 <_read_r>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	bfab      	itete	ge
 80070cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ce:	89a3      	ldrhlt	r3, [r4, #12]
 80070d0:	181b      	addge	r3, r3, r0
 80070d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070d6:	bfac      	ite	ge
 80070d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80070da:	81a3      	strhlt	r3, [r4, #12]
 80070dc:	bd10      	pop	{r4, pc}

080070de <__swrite>:
 80070de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e2:	461f      	mov	r7, r3
 80070e4:	898b      	ldrh	r3, [r1, #12]
 80070e6:	05db      	lsls	r3, r3, #23
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4616      	mov	r6, r2
 80070ee:	d505      	bpl.n	80070fc <__swrite+0x1e>
 80070f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f4:	2302      	movs	r3, #2
 80070f6:	2200      	movs	r2, #0
 80070f8:	f000 f840 	bl	800717c <_lseek_r>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	4632      	mov	r2, r6
 800710a:	463b      	mov	r3, r7
 800710c:	4628      	mov	r0, r5
 800710e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007112:	f000 b857 	b.w	80071c4 <_write_r>

08007116 <__sseek>:
 8007116:	b510      	push	{r4, lr}
 8007118:	460c      	mov	r4, r1
 800711a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711e:	f000 f82d 	bl	800717c <_lseek_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	bf15      	itete	ne
 8007128:	6560      	strne	r0, [r4, #84]	; 0x54
 800712a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800712e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007132:	81a3      	strheq	r3, [r4, #12]
 8007134:	bf18      	it	ne
 8007136:	81a3      	strhne	r3, [r4, #12]
 8007138:	bd10      	pop	{r4, pc}

0800713a <__sclose>:
 800713a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713e:	f000 b80d 	b.w	800715c <_close_r>

08007142 <memset>:
 8007142:	4402      	add	r2, r0
 8007144:	4603      	mov	r3, r0
 8007146:	4293      	cmp	r3, r2
 8007148:	d100      	bne.n	800714c <memset+0xa>
 800714a:	4770      	bx	lr
 800714c:	f803 1b01 	strb.w	r1, [r3], #1
 8007150:	e7f9      	b.n	8007146 <memset+0x4>
	...

08007154 <_localeconv_r>:
 8007154:	4800      	ldr	r0, [pc, #0]	; (8007158 <_localeconv_r+0x4>)
 8007156:	4770      	bx	lr
 8007158:	2000015c 	.word	0x2000015c

0800715c <_close_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d06      	ldr	r5, [pc, #24]	; (8007178 <_close_r+0x1c>)
 8007160:	2300      	movs	r3, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7fa fb91 	bl	800188e <_close>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_close_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_close_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20004430 	.word	0x20004430

0800717c <_lseek_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	; (800719c <_lseek_r+0x20>)
 8007180:	4604      	mov	r4, r0
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fa fba6 	bl	80018dc <_lseek>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_lseek_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_lseek_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20004430 	.word	0x20004430

080071a0 <_read_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	; (80071c0 <_read_r+0x20>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fa fb34 	bl	800181c <_read>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_read_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_read_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20004430 	.word	0x20004430

080071c4 <_write_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4d07      	ldr	r5, [pc, #28]	; (80071e4 <_write_r+0x20>)
 80071c8:	4604      	mov	r4, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	4611      	mov	r1, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	602a      	str	r2, [r5, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f7fa fb3f 	bl	8001856 <_write>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_write_r+0x1e>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_write_r+0x1e>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20004430 	.word	0x20004430

080071e8 <__errno>:
 80071e8:	4b01      	ldr	r3, [pc, #4]	; (80071f0 <__errno+0x8>)
 80071ea:	6818      	ldr	r0, [r3, #0]
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000068 	.word	0x20000068

080071f4 <__libc_init_array>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	4d0d      	ldr	r5, [pc, #52]	; (800722c <__libc_init_array+0x38>)
 80071f8:	4c0d      	ldr	r4, [pc, #52]	; (8007230 <__libc_init_array+0x3c>)
 80071fa:	1b64      	subs	r4, r4, r5
 80071fc:	10a4      	asrs	r4, r4, #2
 80071fe:	2600      	movs	r6, #0
 8007200:	42a6      	cmp	r6, r4
 8007202:	d109      	bne.n	8007218 <__libc_init_array+0x24>
 8007204:	4d0b      	ldr	r5, [pc, #44]	; (8007234 <__libc_init_array+0x40>)
 8007206:	4c0c      	ldr	r4, [pc, #48]	; (8007238 <__libc_init_array+0x44>)
 8007208:	f001 feec 	bl	8008fe4 <_init>
 800720c:	1b64      	subs	r4, r4, r5
 800720e:	10a4      	asrs	r4, r4, #2
 8007210:	2600      	movs	r6, #0
 8007212:	42a6      	cmp	r6, r4
 8007214:	d105      	bne.n	8007222 <__libc_init_array+0x2e>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	f855 3b04 	ldr.w	r3, [r5], #4
 800721c:	4798      	blx	r3
 800721e:	3601      	adds	r6, #1
 8007220:	e7ee      	b.n	8007200 <__libc_init_array+0xc>
 8007222:	f855 3b04 	ldr.w	r3, [r5], #4
 8007226:	4798      	blx	r3
 8007228:	3601      	adds	r6, #1
 800722a:	e7f2      	b.n	8007212 <__libc_init_array+0x1e>
 800722c:	080093b4 	.word	0x080093b4
 8007230:	080093b4 	.word	0x080093b4
 8007234:	080093b4 	.word	0x080093b4
 8007238:	080093b8 	.word	0x080093b8

0800723c <__retarget_lock_init_recursive>:
 800723c:	4770      	bx	lr

0800723e <__retarget_lock_acquire_recursive>:
 800723e:	4770      	bx	lr

08007240 <__retarget_lock_release_recursive>:
 8007240:	4770      	bx	lr

08007242 <memcpy>:
 8007242:	440a      	add	r2, r1
 8007244:	4291      	cmp	r1, r2
 8007246:	f100 33ff 	add.w	r3, r0, #4294967295
 800724a:	d100      	bne.n	800724e <memcpy+0xc>
 800724c:	4770      	bx	lr
 800724e:	b510      	push	{r4, lr}
 8007250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007258:	4291      	cmp	r1, r2
 800725a:	d1f9      	bne.n	8007250 <memcpy+0xe>
 800725c:	bd10      	pop	{r4, pc}

0800725e <quorem>:
 800725e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007262:	6903      	ldr	r3, [r0, #16]
 8007264:	690c      	ldr	r4, [r1, #16]
 8007266:	42a3      	cmp	r3, r4
 8007268:	4607      	mov	r7, r0
 800726a:	db7e      	blt.n	800736a <quorem+0x10c>
 800726c:	3c01      	subs	r4, #1
 800726e:	f101 0814 	add.w	r8, r1, #20
 8007272:	f100 0514 	add.w	r5, r0, #20
 8007276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007284:	3301      	adds	r3, #1
 8007286:	429a      	cmp	r2, r3
 8007288:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800728c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007290:	fbb2 f6f3 	udiv	r6, r2, r3
 8007294:	d331      	bcc.n	80072fa <quorem+0x9c>
 8007296:	f04f 0e00 	mov.w	lr, #0
 800729a:	4640      	mov	r0, r8
 800729c:	46ac      	mov	ip, r5
 800729e:	46f2      	mov	sl, lr
 80072a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80072a4:	b293      	uxth	r3, r2
 80072a6:	fb06 e303 	mla	r3, r6, r3, lr
 80072aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ae:	0c1a      	lsrs	r2, r3, #16
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	ebaa 0303 	sub.w	r3, sl, r3
 80072b6:	f8dc a000 	ldr.w	sl, [ip]
 80072ba:	fa13 f38a 	uxtah	r3, r3, sl
 80072be:	fb06 220e 	mla	r2, r6, lr, r2
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	9b00      	ldr	r3, [sp, #0]
 80072c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ca:	b292      	uxth	r2, r2
 80072cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80072d8:	4581      	cmp	r9, r0
 80072da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072de:	f84c 3b04 	str.w	r3, [ip], #4
 80072e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072e6:	d2db      	bcs.n	80072a0 <quorem+0x42>
 80072e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80072ec:	b92b      	cbnz	r3, 80072fa <quorem+0x9c>
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	429d      	cmp	r5, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	d32c      	bcc.n	8007352 <quorem+0xf4>
 80072f8:	613c      	str	r4, [r7, #16]
 80072fa:	4638      	mov	r0, r7
 80072fc:	f001 f9a6 	bl	800864c <__mcmp>
 8007300:	2800      	cmp	r0, #0
 8007302:	db22      	blt.n	800734a <quorem+0xec>
 8007304:	3601      	adds	r6, #1
 8007306:	4629      	mov	r1, r5
 8007308:	2000      	movs	r0, #0
 800730a:	f858 2b04 	ldr.w	r2, [r8], #4
 800730e:	f8d1 c000 	ldr.w	ip, [r1]
 8007312:	b293      	uxth	r3, r2
 8007314:	1ac3      	subs	r3, r0, r3
 8007316:	0c12      	lsrs	r2, r2, #16
 8007318:	fa13 f38c 	uxtah	r3, r3, ip
 800731c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800732a:	45c1      	cmp	r9, r8
 800732c:	f841 3b04 	str.w	r3, [r1], #4
 8007330:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007334:	d2e9      	bcs.n	800730a <quorem+0xac>
 8007336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800733a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800733e:	b922      	cbnz	r2, 800734a <quorem+0xec>
 8007340:	3b04      	subs	r3, #4
 8007342:	429d      	cmp	r5, r3
 8007344:	461a      	mov	r2, r3
 8007346:	d30a      	bcc.n	800735e <quorem+0x100>
 8007348:	613c      	str	r4, [r7, #16]
 800734a:	4630      	mov	r0, r6
 800734c:	b003      	add	sp, #12
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	3b04      	subs	r3, #4
 8007356:	2a00      	cmp	r2, #0
 8007358:	d1ce      	bne.n	80072f8 <quorem+0x9a>
 800735a:	3c01      	subs	r4, #1
 800735c:	e7c9      	b.n	80072f2 <quorem+0x94>
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	3b04      	subs	r3, #4
 8007362:	2a00      	cmp	r2, #0
 8007364:	d1f0      	bne.n	8007348 <quorem+0xea>
 8007366:	3c01      	subs	r4, #1
 8007368:	e7eb      	b.n	8007342 <quorem+0xe4>
 800736a:	2000      	movs	r0, #0
 800736c:	e7ee      	b.n	800734c <quorem+0xee>
	...

08007370 <_dtoa_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ed2d 8b04 	vpush	{d8-d9}
 8007378:	69c5      	ldr	r5, [r0, #28]
 800737a:	b093      	sub	sp, #76	; 0x4c
 800737c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007380:	ec57 6b10 	vmov	r6, r7, d0
 8007384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007388:	9107      	str	r1, [sp, #28]
 800738a:	4604      	mov	r4, r0
 800738c:	920a      	str	r2, [sp, #40]	; 0x28
 800738e:	930d      	str	r3, [sp, #52]	; 0x34
 8007390:	b975      	cbnz	r5, 80073b0 <_dtoa_r+0x40>
 8007392:	2010      	movs	r0, #16
 8007394:	f000 fe2a 	bl	8007fec <malloc>
 8007398:	4602      	mov	r2, r0
 800739a:	61e0      	str	r0, [r4, #28]
 800739c:	b920      	cbnz	r0, 80073a8 <_dtoa_r+0x38>
 800739e:	4bae      	ldr	r3, [pc, #696]	; (8007658 <_dtoa_r+0x2e8>)
 80073a0:	21ef      	movs	r1, #239	; 0xef
 80073a2:	48ae      	ldr	r0, [pc, #696]	; (800765c <_dtoa_r+0x2ec>)
 80073a4:	f001 fb10 	bl	80089c8 <__assert_func>
 80073a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073ac:	6005      	str	r5, [r0, #0]
 80073ae:	60c5      	str	r5, [r0, #12]
 80073b0:	69e3      	ldr	r3, [r4, #28]
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	b151      	cbz	r1, 80073cc <_dtoa_r+0x5c>
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	604a      	str	r2, [r1, #4]
 80073ba:	2301      	movs	r3, #1
 80073bc:	4093      	lsls	r3, r2
 80073be:	608b      	str	r3, [r1, #8]
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 ff07 	bl	80081d4 <_Bfree>
 80073c6:	69e3      	ldr	r3, [r4, #28]
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	1e3b      	subs	r3, r7, #0
 80073ce:	bfbb      	ittet	lt
 80073d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073d4:	9303      	strlt	r3, [sp, #12]
 80073d6:	2300      	movge	r3, #0
 80073d8:	2201      	movlt	r2, #1
 80073da:	bfac      	ite	ge
 80073dc:	f8c8 3000 	strge.w	r3, [r8]
 80073e0:	f8c8 2000 	strlt.w	r2, [r8]
 80073e4:	4b9e      	ldr	r3, [pc, #632]	; (8007660 <_dtoa_r+0x2f0>)
 80073e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073ea:	ea33 0308 	bics.w	r3, r3, r8
 80073ee:	d11b      	bne.n	8007428 <_dtoa_r+0xb8>
 80073f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80073fc:	4333      	orrs	r3, r6
 80073fe:	f000 8593 	beq.w	8007f28 <_dtoa_r+0xbb8>
 8007402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007404:	b963      	cbnz	r3, 8007420 <_dtoa_r+0xb0>
 8007406:	4b97      	ldr	r3, [pc, #604]	; (8007664 <_dtoa_r+0x2f4>)
 8007408:	e027      	b.n	800745a <_dtoa_r+0xea>
 800740a:	4b97      	ldr	r3, [pc, #604]	; (8007668 <_dtoa_r+0x2f8>)
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	9800      	ldr	r0, [sp, #0]
 8007416:	b013      	add	sp, #76	; 0x4c
 8007418:	ecbd 8b04 	vpop	{d8-d9}
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	4b90      	ldr	r3, [pc, #576]	; (8007664 <_dtoa_r+0x2f4>)
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	3303      	adds	r3, #3
 8007426:	e7f3      	b.n	8007410 <_dtoa_r+0xa0>
 8007428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	ec51 0b17 	vmov	r0, r1, d7
 8007432:	eeb0 8a47 	vmov.f32	s16, s14
 8007436:	eef0 8a67 	vmov.f32	s17, s15
 800743a:	2300      	movs	r3, #0
 800743c:	f7f9 fb64 	bl	8000b08 <__aeabi_dcmpeq>
 8007440:	4681      	mov	r9, r0
 8007442:	b160      	cbz	r0, 800745e <_dtoa_r+0xee>
 8007444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007446:	2301      	movs	r3, #1
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8568 	beq.w	8007f22 <_dtoa_r+0xbb2>
 8007452:	4b86      	ldr	r3, [pc, #536]	; (800766c <_dtoa_r+0x2fc>)
 8007454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	3b01      	subs	r3, #1
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	e7da      	b.n	8007414 <_dtoa_r+0xa4>
 800745e:	aa10      	add	r2, sp, #64	; 0x40
 8007460:	a911      	add	r1, sp, #68	; 0x44
 8007462:	4620      	mov	r0, r4
 8007464:	eeb0 0a48 	vmov.f32	s0, s16
 8007468:	eef0 0a68 	vmov.f32	s1, s17
 800746c:	f001 f994 	bl	8008798 <__d2b>
 8007470:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007474:	4682      	mov	sl, r0
 8007476:	2d00      	cmp	r5, #0
 8007478:	d07f      	beq.n	800757a <_dtoa_r+0x20a>
 800747a:	ee18 3a90 	vmov	r3, s17
 800747e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007482:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007486:	ec51 0b18 	vmov	r0, r1, d8
 800748a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800748e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007492:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007496:	4619      	mov	r1, r3
 8007498:	2200      	movs	r2, #0
 800749a:	4b75      	ldr	r3, [pc, #468]	; (8007670 <_dtoa_r+0x300>)
 800749c:	f7f8 ff14 	bl	80002c8 <__aeabi_dsub>
 80074a0:	a367      	add	r3, pc, #412	; (adr r3, 8007640 <_dtoa_r+0x2d0>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f9 f8c7 	bl	8000638 <__aeabi_dmul>
 80074aa:	a367      	add	r3, pc, #412	; (adr r3, 8007648 <_dtoa_r+0x2d8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f8 ff0c 	bl	80002cc <__adddf3>
 80074b4:	4606      	mov	r6, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	460f      	mov	r7, r1
 80074ba:	f7f9 f853 	bl	8000564 <__aeabi_i2d>
 80074be:	a364      	add	r3, pc, #400	; (adr r3, 8007650 <_dtoa_r+0x2e0>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f9 f8b8 	bl	8000638 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f8 fefc 	bl	80002cc <__adddf3>
 80074d4:	4606      	mov	r6, r0
 80074d6:	460f      	mov	r7, r1
 80074d8:	f7f9 fb5e 	bl	8000b98 <__aeabi_d2iz>
 80074dc:	2200      	movs	r2, #0
 80074de:	4683      	mov	fp, r0
 80074e0:	2300      	movs	r3, #0
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	f7f9 fb19 	bl	8000b1c <__aeabi_dcmplt>
 80074ea:	b148      	cbz	r0, 8007500 <_dtoa_r+0x190>
 80074ec:	4658      	mov	r0, fp
 80074ee:	f7f9 f839 	bl	8000564 <__aeabi_i2d>
 80074f2:	4632      	mov	r2, r6
 80074f4:	463b      	mov	r3, r7
 80074f6:	f7f9 fb07 	bl	8000b08 <__aeabi_dcmpeq>
 80074fa:	b908      	cbnz	r0, 8007500 <_dtoa_r+0x190>
 80074fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007500:	f1bb 0f16 	cmp.w	fp, #22
 8007504:	d857      	bhi.n	80075b6 <_dtoa_r+0x246>
 8007506:	4b5b      	ldr	r3, [pc, #364]	; (8007674 <_dtoa_r+0x304>)
 8007508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	ec51 0b18 	vmov	r0, r1, d8
 8007514:	f7f9 fb02 	bl	8000b1c <__aeabi_dcmplt>
 8007518:	2800      	cmp	r0, #0
 800751a:	d04e      	beq.n	80075ba <_dtoa_r+0x24a>
 800751c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007520:	2300      	movs	r3, #0
 8007522:	930c      	str	r3, [sp, #48]	; 0x30
 8007524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007526:	1b5b      	subs	r3, r3, r5
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	bf45      	ittet	mi
 800752c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007530:	9305      	strmi	r3, [sp, #20]
 8007532:	2300      	movpl	r3, #0
 8007534:	2300      	movmi	r3, #0
 8007536:	9206      	str	r2, [sp, #24]
 8007538:	bf54      	ite	pl
 800753a:	9305      	strpl	r3, [sp, #20]
 800753c:	9306      	strmi	r3, [sp, #24]
 800753e:	f1bb 0f00 	cmp.w	fp, #0
 8007542:	db3c      	blt.n	80075be <_dtoa_r+0x24e>
 8007544:	9b06      	ldr	r3, [sp, #24]
 8007546:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800754a:	445b      	add	r3, fp
 800754c:	9306      	str	r3, [sp, #24]
 800754e:	2300      	movs	r3, #0
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	2b09      	cmp	r3, #9
 8007556:	d868      	bhi.n	800762a <_dtoa_r+0x2ba>
 8007558:	2b05      	cmp	r3, #5
 800755a:	bfc4      	itt	gt
 800755c:	3b04      	subgt	r3, #4
 800755e:	9307      	strgt	r3, [sp, #28]
 8007560:	9b07      	ldr	r3, [sp, #28]
 8007562:	f1a3 0302 	sub.w	r3, r3, #2
 8007566:	bfcc      	ite	gt
 8007568:	2500      	movgt	r5, #0
 800756a:	2501      	movle	r5, #1
 800756c:	2b03      	cmp	r3, #3
 800756e:	f200 8085 	bhi.w	800767c <_dtoa_r+0x30c>
 8007572:	e8df f003 	tbb	[pc, r3]
 8007576:	3b2e      	.short	0x3b2e
 8007578:	5839      	.short	0x5839
 800757a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800757e:	441d      	add	r5, r3
 8007580:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007584:	2b20      	cmp	r3, #32
 8007586:	bfc1      	itttt	gt
 8007588:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800758c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007590:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007594:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007598:	bfd6      	itet	le
 800759a:	f1c3 0320 	rsble	r3, r3, #32
 800759e:	ea48 0003 	orrgt.w	r0, r8, r3
 80075a2:	fa06 f003 	lslle.w	r0, r6, r3
 80075a6:	f7f8 ffcd 	bl	8000544 <__aeabi_ui2d>
 80075aa:	2201      	movs	r2, #1
 80075ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80075b0:	3d01      	subs	r5, #1
 80075b2:	920e      	str	r2, [sp, #56]	; 0x38
 80075b4:	e76f      	b.n	8007496 <_dtoa_r+0x126>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e7b3      	b.n	8007522 <_dtoa_r+0x1b2>
 80075ba:	900c      	str	r0, [sp, #48]	; 0x30
 80075bc:	e7b2      	b.n	8007524 <_dtoa_r+0x1b4>
 80075be:	9b05      	ldr	r3, [sp, #20]
 80075c0:	eba3 030b 	sub.w	r3, r3, fp
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	f1cb 0300 	rsb	r3, fp, #0
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	2300      	movs	r3, #0
 80075ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d0:	e7bf      	b.n	8007552 <_dtoa_r+0x1e2>
 80075d2:	2300      	movs	r3, #0
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dc52      	bgt.n	8007682 <_dtoa_r+0x312>
 80075dc:	2301      	movs	r3, #1
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	461a      	mov	r2, r3
 80075e4:	920a      	str	r2, [sp, #40]	; 0x28
 80075e6:	e00b      	b.n	8007600 <_dtoa_r+0x290>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f3      	b.n	80075d4 <_dtoa_r+0x264>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9309      	str	r3, [sp, #36]	; 0x24
 80075f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f2:	445b      	add	r3, fp
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	3301      	adds	r3, #1
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	bfb8      	it	lt
 80075fe:	2301      	movlt	r3, #1
 8007600:	69e0      	ldr	r0, [r4, #28]
 8007602:	2100      	movs	r1, #0
 8007604:	2204      	movs	r2, #4
 8007606:	f102 0614 	add.w	r6, r2, #20
 800760a:	429e      	cmp	r6, r3
 800760c:	d93d      	bls.n	800768a <_dtoa_r+0x31a>
 800760e:	6041      	str	r1, [r0, #4]
 8007610:	4620      	mov	r0, r4
 8007612:	f000 fd9f 	bl	8008154 <_Balloc>
 8007616:	9000      	str	r0, [sp, #0]
 8007618:	2800      	cmp	r0, #0
 800761a:	d139      	bne.n	8007690 <_dtoa_r+0x320>
 800761c:	4b16      	ldr	r3, [pc, #88]	; (8007678 <_dtoa_r+0x308>)
 800761e:	4602      	mov	r2, r0
 8007620:	f240 11af 	movw	r1, #431	; 0x1af
 8007624:	e6bd      	b.n	80073a2 <_dtoa_r+0x32>
 8007626:	2301      	movs	r3, #1
 8007628:	e7e1      	b.n	80075ee <_dtoa_r+0x27e>
 800762a:	2501      	movs	r5, #1
 800762c:	2300      	movs	r3, #0
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	9509      	str	r5, [sp, #36]	; 0x24
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	9301      	str	r3, [sp, #4]
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	2200      	movs	r2, #0
 800763c:	2312      	movs	r3, #18
 800763e:	e7d1      	b.n	80075e4 <_dtoa_r+0x274>
 8007640:	636f4361 	.word	0x636f4361
 8007644:	3fd287a7 	.word	0x3fd287a7
 8007648:	8b60c8b3 	.word	0x8b60c8b3
 800764c:	3fc68a28 	.word	0x3fc68a28
 8007650:	509f79fb 	.word	0x509f79fb
 8007654:	3fd34413 	.word	0x3fd34413
 8007658:	0800907d 	.word	0x0800907d
 800765c:	08009094 	.word	0x08009094
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	08009079 	.word	0x08009079
 8007668:	08009070 	.word	0x08009070
 800766c:	0800904d 	.word	0x0800904d
 8007670:	3ff80000 	.word	0x3ff80000
 8007674:	08009180 	.word	0x08009180
 8007678:	080090ec 	.word	0x080090ec
 800767c:	2301      	movs	r3, #1
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	e7d7      	b.n	8007632 <_dtoa_r+0x2c2>
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	e7ba      	b.n	8007600 <_dtoa_r+0x290>
 800768a:	3101      	adds	r1, #1
 800768c:	0052      	lsls	r2, r2, #1
 800768e:	e7ba      	b.n	8007606 <_dtoa_r+0x296>
 8007690:	69e3      	ldr	r3, [r4, #28]
 8007692:	9a00      	ldr	r2, [sp, #0]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	2b0e      	cmp	r3, #14
 800769a:	f200 80a8 	bhi.w	80077ee <_dtoa_r+0x47e>
 800769e:	2d00      	cmp	r5, #0
 80076a0:	f000 80a5 	beq.w	80077ee <_dtoa_r+0x47e>
 80076a4:	f1bb 0f00 	cmp.w	fp, #0
 80076a8:	dd38      	ble.n	800771c <_dtoa_r+0x3ac>
 80076aa:	4bc0      	ldr	r3, [pc, #768]	; (80079ac <_dtoa_r+0x63c>)
 80076ac:	f00b 020f 	and.w	r2, fp, #15
 80076b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80076b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80076bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80076c0:	d019      	beq.n	80076f6 <_dtoa_r+0x386>
 80076c2:	4bbb      	ldr	r3, [pc, #748]	; (80079b0 <_dtoa_r+0x640>)
 80076c4:	ec51 0b18 	vmov	r0, r1, d8
 80076c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076cc:	f7f9 f8de 	bl	800088c <__aeabi_ddiv>
 80076d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d4:	f008 080f 	and.w	r8, r8, #15
 80076d8:	2503      	movs	r5, #3
 80076da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80079b0 <_dtoa_r+0x640>
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	d10a      	bne.n	80076fa <_dtoa_r+0x38a>
 80076e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e8:	4632      	mov	r2, r6
 80076ea:	463b      	mov	r3, r7
 80076ec:	f7f9 f8ce 	bl	800088c <__aeabi_ddiv>
 80076f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f4:	e02b      	b.n	800774e <_dtoa_r+0x3de>
 80076f6:	2502      	movs	r5, #2
 80076f8:	e7ef      	b.n	80076da <_dtoa_r+0x36a>
 80076fa:	f018 0f01 	tst.w	r8, #1
 80076fe:	d008      	beq.n	8007712 <_dtoa_r+0x3a2>
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007708:	f7f8 ff96 	bl	8000638 <__aeabi_dmul>
 800770c:	3501      	adds	r5, #1
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007716:	f109 0908 	add.w	r9, r9, #8
 800771a:	e7e0      	b.n	80076de <_dtoa_r+0x36e>
 800771c:	f000 809f 	beq.w	800785e <_dtoa_r+0x4ee>
 8007720:	f1cb 0600 	rsb	r6, fp, #0
 8007724:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <_dtoa_r+0x63c>)
 8007726:	4fa2      	ldr	r7, [pc, #648]	; (80079b0 <_dtoa_r+0x640>)
 8007728:	f006 020f 	and.w	r2, r6, #15
 800772c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	ec51 0b18 	vmov	r0, r1, d8
 8007738:	f7f8 ff7e 	bl	8000638 <__aeabi_dmul>
 800773c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007740:	1136      	asrs	r6, r6, #4
 8007742:	2300      	movs	r3, #0
 8007744:	2502      	movs	r5, #2
 8007746:	2e00      	cmp	r6, #0
 8007748:	d17e      	bne.n	8007848 <_dtoa_r+0x4d8>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1d0      	bne.n	80076f0 <_dtoa_r+0x380>
 800774e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007750:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8084 	beq.w	8007862 <_dtoa_r+0x4f2>
 800775a:	4b96      	ldr	r3, [pc, #600]	; (80079b4 <_dtoa_r+0x644>)
 800775c:	2200      	movs	r2, #0
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f9 f9db 	bl	8000b1c <__aeabi_dcmplt>
 8007766:	2800      	cmp	r0, #0
 8007768:	d07b      	beq.n	8007862 <_dtoa_r+0x4f2>
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d078      	beq.n	8007862 <_dtoa_r+0x4f2>
 8007770:	9b01      	ldr	r3, [sp, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	dd39      	ble.n	80077ea <_dtoa_r+0x47a>
 8007776:	4b90      	ldr	r3, [pc, #576]	; (80079b8 <_dtoa_r+0x648>)
 8007778:	2200      	movs	r2, #0
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 ff5b 	bl	8000638 <__aeabi_dmul>
 8007782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007786:	9e01      	ldr	r6, [sp, #4]
 8007788:	f10b 37ff 	add.w	r7, fp, #4294967295
 800778c:	3501      	adds	r5, #1
 800778e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007792:	4628      	mov	r0, r5
 8007794:	f7f8 fee6 	bl	8000564 <__aeabi_i2d>
 8007798:	4642      	mov	r2, r8
 800779a:	464b      	mov	r3, r9
 800779c:	f7f8 ff4c 	bl	8000638 <__aeabi_dmul>
 80077a0:	4b86      	ldr	r3, [pc, #536]	; (80079bc <_dtoa_r+0x64c>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	f7f8 fd92 	bl	80002cc <__adddf3>
 80077a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d158      	bne.n	8007868 <_dtoa_r+0x4f8>
 80077b6:	4b82      	ldr	r3, [pc, #520]	; (80079c0 <_dtoa_r+0x650>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f8 fd83 	bl	80002c8 <__aeabi_dsub>
 80077c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	f7f9 f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8296 	bne.w	8007d00 <_dtoa_r+0x990>
 80077d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077d8:	4640      	mov	r0, r8
 80077da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077de:	4649      	mov	r1, r9
 80077e0:	f7f9 f99c 	bl	8000b1c <__aeabi_dcmplt>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	f040 8289 	bne.w	8007cfc <_dtoa_r+0x98c>
 80077ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f2c0 814e 	blt.w	8007a92 <_dtoa_r+0x722>
 80077f6:	f1bb 0f0e 	cmp.w	fp, #14
 80077fa:	f300 814a 	bgt.w	8007a92 <_dtoa_r+0x722>
 80077fe:	4b6b      	ldr	r3, [pc, #428]	; (80079ac <_dtoa_r+0x63c>)
 8007800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	f280 80dc 	bge.w	80079c8 <_dtoa_r+0x658>
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f300 80d8 	bgt.w	80079c8 <_dtoa_r+0x658>
 8007818:	f040 826f 	bne.w	8007cfa <_dtoa_r+0x98a>
 800781c:	4b68      	ldr	r3, [pc, #416]	; (80079c0 <_dtoa_r+0x650>)
 800781e:	2200      	movs	r2, #0
 8007820:	4640      	mov	r0, r8
 8007822:	4649      	mov	r1, r9
 8007824:	f7f8 ff08 	bl	8000638 <__aeabi_dmul>
 8007828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800782c:	f7f9 f98a 	bl	8000b44 <__aeabi_dcmpge>
 8007830:	9e04      	ldr	r6, [sp, #16]
 8007832:	4637      	mov	r7, r6
 8007834:	2800      	cmp	r0, #0
 8007836:	f040 8245 	bne.w	8007cc4 <_dtoa_r+0x954>
 800783a:	9d00      	ldr	r5, [sp, #0]
 800783c:	2331      	movs	r3, #49	; 0x31
 800783e:	f805 3b01 	strb.w	r3, [r5], #1
 8007842:	f10b 0b01 	add.w	fp, fp, #1
 8007846:	e241      	b.n	8007ccc <_dtoa_r+0x95c>
 8007848:	07f2      	lsls	r2, r6, #31
 800784a:	d505      	bpl.n	8007858 <_dtoa_r+0x4e8>
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	f7f8 fef2 	bl	8000638 <__aeabi_dmul>
 8007854:	3501      	adds	r5, #1
 8007856:	2301      	movs	r3, #1
 8007858:	1076      	asrs	r6, r6, #1
 800785a:	3708      	adds	r7, #8
 800785c:	e773      	b.n	8007746 <_dtoa_r+0x3d6>
 800785e:	2502      	movs	r5, #2
 8007860:	e775      	b.n	800774e <_dtoa_r+0x3de>
 8007862:	9e04      	ldr	r6, [sp, #16]
 8007864:	465f      	mov	r7, fp
 8007866:	e792      	b.n	800778e <_dtoa_r+0x41e>
 8007868:	9900      	ldr	r1, [sp, #0]
 800786a:	4b50      	ldr	r3, [pc, #320]	; (80079ac <_dtoa_r+0x63c>)
 800786c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007870:	4431      	add	r1, r6
 8007872:	9102      	str	r1, [sp, #8]
 8007874:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007876:	eeb0 9a47 	vmov.f32	s18, s14
 800787a:	eef0 9a67 	vmov.f32	s19, s15
 800787e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007886:	2900      	cmp	r1, #0
 8007888:	d044      	beq.n	8007914 <_dtoa_r+0x5a4>
 800788a:	494e      	ldr	r1, [pc, #312]	; (80079c4 <_dtoa_r+0x654>)
 800788c:	2000      	movs	r0, #0
 800788e:	f7f8 fffd 	bl	800088c <__aeabi_ddiv>
 8007892:	ec53 2b19 	vmov	r2, r3, d9
 8007896:	f7f8 fd17 	bl	80002c8 <__aeabi_dsub>
 800789a:	9d00      	ldr	r5, [sp, #0]
 800789c:	ec41 0b19 	vmov	d9, r0, r1
 80078a0:	4649      	mov	r1, r9
 80078a2:	4640      	mov	r0, r8
 80078a4:	f7f9 f978 	bl	8000b98 <__aeabi_d2iz>
 80078a8:	4606      	mov	r6, r0
 80078aa:	f7f8 fe5b 	bl	8000564 <__aeabi_i2d>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4640      	mov	r0, r8
 80078b4:	4649      	mov	r1, r9
 80078b6:	f7f8 fd07 	bl	80002c8 <__aeabi_dsub>
 80078ba:	3630      	adds	r6, #48	; 0x30
 80078bc:	f805 6b01 	strb.w	r6, [r5], #1
 80078c0:	ec53 2b19 	vmov	r2, r3, d9
 80078c4:	4680      	mov	r8, r0
 80078c6:	4689      	mov	r9, r1
 80078c8:	f7f9 f928 	bl	8000b1c <__aeabi_dcmplt>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d164      	bne.n	800799a <_dtoa_r+0x62a>
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	4937      	ldr	r1, [pc, #220]	; (80079b4 <_dtoa_r+0x644>)
 80078d6:	2000      	movs	r0, #0
 80078d8:	f7f8 fcf6 	bl	80002c8 <__aeabi_dsub>
 80078dc:	ec53 2b19 	vmov	r2, r3, d9
 80078e0:	f7f9 f91c 	bl	8000b1c <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f040 80b6 	bne.w	8007a56 <_dtoa_r+0x6e6>
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	429d      	cmp	r5, r3
 80078ee:	f43f af7c 	beq.w	80077ea <_dtoa_r+0x47a>
 80078f2:	4b31      	ldr	r3, [pc, #196]	; (80079b8 <_dtoa_r+0x648>)
 80078f4:	ec51 0b19 	vmov	r0, r1, d9
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fe9d 	bl	8000638 <__aeabi_dmul>
 80078fe:	4b2e      	ldr	r3, [pc, #184]	; (80079b8 <_dtoa_r+0x648>)
 8007900:	ec41 0b19 	vmov	d9, r0, r1
 8007904:	2200      	movs	r2, #0
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 fe95 	bl	8000638 <__aeabi_dmul>
 800790e:	4680      	mov	r8, r0
 8007910:	4689      	mov	r9, r1
 8007912:	e7c5      	b.n	80078a0 <_dtoa_r+0x530>
 8007914:	ec51 0b17 	vmov	r0, r1, d7
 8007918:	f7f8 fe8e 	bl	8000638 <__aeabi_dmul>
 800791c:	9b02      	ldr	r3, [sp, #8]
 800791e:	9d00      	ldr	r5, [sp, #0]
 8007920:	930f      	str	r3, [sp, #60]	; 0x3c
 8007922:	ec41 0b19 	vmov	d9, r0, r1
 8007926:	4649      	mov	r1, r9
 8007928:	4640      	mov	r0, r8
 800792a:	f7f9 f935 	bl	8000b98 <__aeabi_d2iz>
 800792e:	4606      	mov	r6, r0
 8007930:	f7f8 fe18 	bl	8000564 <__aeabi_i2d>
 8007934:	3630      	adds	r6, #48	; 0x30
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f8 fcc3 	bl	80002c8 <__aeabi_dsub>
 8007942:	f805 6b01 	strb.w	r6, [r5], #1
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	429d      	cmp	r5, r3
 800794a:	4680      	mov	r8, r0
 800794c:	4689      	mov	r9, r1
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	d124      	bne.n	800799e <_dtoa_r+0x62e>
 8007954:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <_dtoa_r+0x654>)
 8007956:	ec51 0b19 	vmov	r0, r1, d9
 800795a:	f7f8 fcb7 	bl	80002cc <__adddf3>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f9 f8f7 	bl	8000b58 <__aeabi_dcmpgt>
 800796a:	2800      	cmp	r0, #0
 800796c:	d173      	bne.n	8007a56 <_dtoa_r+0x6e6>
 800796e:	ec53 2b19 	vmov	r2, r3, d9
 8007972:	4914      	ldr	r1, [pc, #80]	; (80079c4 <_dtoa_r+0x654>)
 8007974:	2000      	movs	r0, #0
 8007976:	f7f8 fca7 	bl	80002c8 <__aeabi_dsub>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f9 f8cb 	bl	8000b1c <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f af2f 	beq.w	80077ea <_dtoa_r+0x47a>
 800798c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800798e:	1e6b      	subs	r3, r5, #1
 8007990:	930f      	str	r3, [sp, #60]	; 0x3c
 8007992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d0f8      	beq.n	800798c <_dtoa_r+0x61c>
 800799a:	46bb      	mov	fp, r7
 800799c:	e04a      	b.n	8007a34 <_dtoa_r+0x6c4>
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <_dtoa_r+0x648>)
 80079a0:	f7f8 fe4a 	bl	8000638 <__aeabi_dmul>
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	e7bd      	b.n	8007926 <_dtoa_r+0x5b6>
 80079aa:	bf00      	nop
 80079ac:	08009180 	.word	0x08009180
 80079b0:	08009158 	.word	0x08009158
 80079b4:	3ff00000 	.word	0x3ff00000
 80079b8:	40240000 	.word	0x40240000
 80079bc:	401c0000 	.word	0x401c0000
 80079c0:	40140000 	.word	0x40140000
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079cc:	9d00      	ldr	r5, [sp, #0]
 80079ce:	4642      	mov	r2, r8
 80079d0:	464b      	mov	r3, r9
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7f8 ff59 	bl	800088c <__aeabi_ddiv>
 80079da:	f7f9 f8dd 	bl	8000b98 <__aeabi_d2iz>
 80079de:	9001      	str	r0, [sp, #4]
 80079e0:	f7f8 fdc0 	bl	8000564 <__aeabi_i2d>
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	f7f8 fe26 	bl	8000638 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fc68 	bl	80002c8 <__aeabi_dsub>
 80079f8:	9e01      	ldr	r6, [sp, #4]
 80079fa:	9f04      	ldr	r7, [sp, #16]
 80079fc:	3630      	adds	r6, #48	; 0x30
 80079fe:	f805 6b01 	strb.w	r6, [r5], #1
 8007a02:	9e00      	ldr	r6, [sp, #0]
 8007a04:	1bae      	subs	r6, r5, r6
 8007a06:	42b7      	cmp	r7, r6
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	d134      	bne.n	8007a78 <_dtoa_r+0x708>
 8007a0e:	f7f8 fc5d 	bl	80002cc <__adddf3>
 8007a12:	4642      	mov	r2, r8
 8007a14:	464b      	mov	r3, r9
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	f7f9 f89d 	bl	8000b58 <__aeabi_dcmpgt>
 8007a1e:	b9c8      	cbnz	r0, 8007a54 <_dtoa_r+0x6e4>
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	4630      	mov	r0, r6
 8007a26:	4639      	mov	r1, r7
 8007a28:	f7f9 f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8007a2c:	b110      	cbz	r0, 8007a34 <_dtoa_r+0x6c4>
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	07db      	lsls	r3, r3, #31
 8007a32:	d40f      	bmi.n	8007a54 <_dtoa_r+0x6e4>
 8007a34:	4651      	mov	r1, sl
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 fbcc 	bl	80081d4 <_Bfree>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a40:	702b      	strb	r3, [r5, #0]
 8007a42:	f10b 0301 	add.w	r3, fp, #1
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f43f ace2 	beq.w	8007414 <_dtoa_r+0xa4>
 8007a50:	601d      	str	r5, [r3, #0]
 8007a52:	e4df      	b.n	8007414 <_dtoa_r+0xa4>
 8007a54:	465f      	mov	r7, fp
 8007a56:	462b      	mov	r3, r5
 8007a58:	461d      	mov	r5, r3
 8007a5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a5e:	2a39      	cmp	r2, #57	; 0x39
 8007a60:	d106      	bne.n	8007a70 <_dtoa_r+0x700>
 8007a62:	9a00      	ldr	r2, [sp, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d1f7      	bne.n	8007a58 <_dtoa_r+0x6e8>
 8007a68:	9900      	ldr	r1, [sp, #0]
 8007a6a:	2230      	movs	r2, #48	; 0x30
 8007a6c:	3701      	adds	r7, #1
 8007a6e:	700a      	strb	r2, [r1, #0]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	3201      	adds	r2, #1
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e790      	b.n	800799a <_dtoa_r+0x62a>
 8007a78:	4ba3      	ldr	r3, [pc, #652]	; (8007d08 <_dtoa_r+0x998>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f7f8 fddc 	bl	8000638 <__aeabi_dmul>
 8007a80:	2200      	movs	r2, #0
 8007a82:	2300      	movs	r3, #0
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	f7f9 f83e 	bl	8000b08 <__aeabi_dcmpeq>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d09e      	beq.n	80079ce <_dtoa_r+0x65e>
 8007a90:	e7d0      	b.n	8007a34 <_dtoa_r+0x6c4>
 8007a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	f000 80ca 	beq.w	8007c2e <_dtoa_r+0x8be>
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	2a01      	cmp	r2, #1
 8007a9e:	f300 80ad 	bgt.w	8007bfc <_dtoa_r+0x88c>
 8007aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	f000 80a5 	beq.w	8007bf4 <_dtoa_r+0x884>
 8007aaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aae:	9e08      	ldr	r6, [sp, #32]
 8007ab0:	9d05      	ldr	r5, [sp, #20]
 8007ab2:	9a05      	ldr	r2, [sp, #20]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	9205      	str	r2, [sp, #20]
 8007ab8:	9a06      	ldr	r2, [sp, #24]
 8007aba:	2101      	movs	r1, #1
 8007abc:	441a      	add	r2, r3
 8007abe:	4620      	mov	r0, r4
 8007ac0:	9206      	str	r2, [sp, #24]
 8007ac2:	f000 fc3d 	bl	8008340 <__i2b>
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	b165      	cbz	r5, 8007ae4 <_dtoa_r+0x774>
 8007aca:	9b06      	ldr	r3, [sp, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dd09      	ble.n	8007ae4 <_dtoa_r+0x774>
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	9a05      	ldr	r2, [sp, #20]
 8007ad4:	bfa8      	it	ge
 8007ad6:	462b      	movge	r3, r5
 8007ad8:	1ad2      	subs	r2, r2, r3
 8007ada:	9205      	str	r2, [sp, #20]
 8007adc:	9a06      	ldr	r2, [sp, #24]
 8007ade:	1aed      	subs	r5, r5, r3
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	9306      	str	r3, [sp, #24]
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	b1f3      	cbz	r3, 8007b26 <_dtoa_r+0x7b6>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80a3 	beq.w	8007c36 <_dtoa_r+0x8c6>
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	dd10      	ble.n	8007b16 <_dtoa_r+0x7a6>
 8007af4:	4639      	mov	r1, r7
 8007af6:	4632      	mov	r2, r6
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fce1 	bl	80084c0 <__pow5mult>
 8007afe:	4652      	mov	r2, sl
 8007b00:	4601      	mov	r1, r0
 8007b02:	4607      	mov	r7, r0
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fc31 	bl	800836c <__multiply>
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fb60 	bl	80081d4 <_Bfree>
 8007b14:	46c2      	mov	sl, r8
 8007b16:	9b08      	ldr	r3, [sp, #32]
 8007b18:	1b9a      	subs	r2, r3, r6
 8007b1a:	d004      	beq.n	8007b26 <_dtoa_r+0x7b6>
 8007b1c:	4651      	mov	r1, sl
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fcce 	bl	80084c0 <__pow5mult>
 8007b24:	4682      	mov	sl, r0
 8007b26:	2101      	movs	r1, #1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fc09 	bl	8008340 <__i2b>
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	4606      	mov	r6, r0
 8007b34:	f340 8081 	ble.w	8007c3a <_dtoa_r+0x8ca>
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 fcbf 	bl	80084c0 <__pow5mult>
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	4606      	mov	r6, r0
 8007b48:	dd7a      	ble.n	8007c40 <_dtoa_r+0x8d0>
 8007b4a:	f04f 0800 	mov.w	r8, #0
 8007b4e:	6933      	ldr	r3, [r6, #16]
 8007b50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b54:	6918      	ldr	r0, [r3, #16]
 8007b56:	f000 fba5 	bl	80082a4 <__hi0bits>
 8007b5a:	f1c0 0020 	rsb	r0, r0, #32
 8007b5e:	9b06      	ldr	r3, [sp, #24]
 8007b60:	4418      	add	r0, r3
 8007b62:	f010 001f 	ands.w	r0, r0, #31
 8007b66:	f000 8094 	beq.w	8007c92 <_dtoa_r+0x922>
 8007b6a:	f1c0 0320 	rsb	r3, r0, #32
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	f340 8085 	ble.w	8007c7e <_dtoa_r+0x90e>
 8007b74:	9b05      	ldr	r3, [sp, #20]
 8007b76:	f1c0 001c 	rsb	r0, r0, #28
 8007b7a:	4403      	add	r3, r0
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	9b06      	ldr	r3, [sp, #24]
 8007b80:	4403      	add	r3, r0
 8007b82:	4405      	add	r5, r0
 8007b84:	9306      	str	r3, [sp, #24]
 8007b86:	9b05      	ldr	r3, [sp, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dd05      	ble.n	8007b98 <_dtoa_r+0x828>
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fcef 	bl	8008574 <__lshift>
 8007b96:	4682      	mov	sl, r0
 8007b98:	9b06      	ldr	r3, [sp, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dd05      	ble.n	8007baa <_dtoa_r+0x83a>
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 fce6 	bl	8008574 <__lshift>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d072      	beq.n	8007c96 <_dtoa_r+0x926>
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f000 fd4a 	bl	800864c <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	da6c      	bge.n	8007c96 <_dtoa_r+0x926>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	220a      	movs	r2, #10
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 fb28 	bl	8008218 <__multadd>
 8007bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bce:	4682      	mov	sl, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 81b0 	beq.w	8007f36 <_dtoa_r+0xbc6>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4639      	mov	r1, r7
 8007bda:	220a      	movs	r2, #10
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fb1b 	bl	8008218 <__multadd>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	4607      	mov	r7, r0
 8007be8:	f300 8096 	bgt.w	8007d18 <_dtoa_r+0x9a8>
 8007bec:	9b07      	ldr	r3, [sp, #28]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	dc59      	bgt.n	8007ca6 <_dtoa_r+0x936>
 8007bf2:	e091      	b.n	8007d18 <_dtoa_r+0x9a8>
 8007bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bfa:	e758      	b.n	8007aae <_dtoa_r+0x73e>
 8007bfc:	9b04      	ldr	r3, [sp, #16]
 8007bfe:	1e5e      	subs	r6, r3, #1
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	42b3      	cmp	r3, r6
 8007c04:	bfbf      	itttt	lt
 8007c06:	9b08      	ldrlt	r3, [sp, #32]
 8007c08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007c0a:	9608      	strlt	r6, [sp, #32]
 8007c0c:	1af3      	sublt	r3, r6, r3
 8007c0e:	bfb4      	ite	lt
 8007c10:	18d2      	addlt	r2, r2, r3
 8007c12:	1b9e      	subge	r6, r3, r6
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	bfbc      	itt	lt
 8007c18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007c1a:	2600      	movlt	r6, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bfb7      	itett	lt
 8007c20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007c24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007c28:	1a9d      	sublt	r5, r3, r2
 8007c2a:	2300      	movlt	r3, #0
 8007c2c:	e741      	b.n	8007ab2 <_dtoa_r+0x742>
 8007c2e:	9e08      	ldr	r6, [sp, #32]
 8007c30:	9d05      	ldr	r5, [sp, #20]
 8007c32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c34:	e748      	b.n	8007ac8 <_dtoa_r+0x758>
 8007c36:	9a08      	ldr	r2, [sp, #32]
 8007c38:	e770      	b.n	8007b1c <_dtoa_r+0x7ac>
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	dc19      	bgt.n	8007c74 <_dtoa_r+0x904>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	b9bb      	cbnz	r3, 8007c74 <_dtoa_r+0x904>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c4a:	b99b      	cbnz	r3, 8007c74 <_dtoa_r+0x904>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c52:	0d1b      	lsrs	r3, r3, #20
 8007c54:	051b      	lsls	r3, r3, #20
 8007c56:	b183      	cbz	r3, 8007c7a <_dtoa_r+0x90a>
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	9b06      	ldr	r3, [sp, #24]
 8007c60:	3301      	adds	r3, #1
 8007c62:	9306      	str	r3, [sp, #24]
 8007c64:	f04f 0801 	mov.w	r8, #1
 8007c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f47f af6f 	bne.w	8007b4e <_dtoa_r+0x7de>
 8007c70:	2001      	movs	r0, #1
 8007c72:	e774      	b.n	8007b5e <_dtoa_r+0x7ee>
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	e7f6      	b.n	8007c68 <_dtoa_r+0x8f8>
 8007c7a:	4698      	mov	r8, r3
 8007c7c:	e7f4      	b.n	8007c68 <_dtoa_r+0x8f8>
 8007c7e:	d082      	beq.n	8007b86 <_dtoa_r+0x816>
 8007c80:	9a05      	ldr	r2, [sp, #20]
 8007c82:	331c      	adds	r3, #28
 8007c84:	441a      	add	r2, r3
 8007c86:	9205      	str	r2, [sp, #20]
 8007c88:	9a06      	ldr	r2, [sp, #24]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	441d      	add	r5, r3
 8007c8e:	9206      	str	r2, [sp, #24]
 8007c90:	e779      	b.n	8007b86 <_dtoa_r+0x816>
 8007c92:	4603      	mov	r3, r0
 8007c94:	e7f4      	b.n	8007c80 <_dtoa_r+0x910>
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc37      	bgt.n	8007d0c <_dtoa_r+0x99c>
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	dd34      	ble.n	8007d0c <_dtoa_r+0x99c>
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	9b01      	ldr	r3, [sp, #4]
 8007ca8:	b963      	cbnz	r3, 8007cc4 <_dtoa_r+0x954>
 8007caa:	4631      	mov	r1, r6
 8007cac:	2205      	movs	r2, #5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f000 fab2 	bl	8008218 <__multadd>
 8007cb4:	4601      	mov	r1, r0
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f000 fcc7 	bl	800864c <__mcmp>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f73f adbb 	bgt.w	800783a <_dtoa_r+0x4ca>
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc6:	9d00      	ldr	r5, [sp, #0]
 8007cc8:	ea6f 0b03 	mvn.w	fp, r3
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	4631      	mov	r1, r6
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 fa7e 	bl	80081d4 <_Bfree>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f43f aeab 	beq.w	8007a34 <_dtoa_r+0x6c4>
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	d005      	beq.n	8007cf0 <_dtoa_r+0x980>
 8007ce4:	45b8      	cmp	r8, r7
 8007ce6:	d003      	beq.n	8007cf0 <_dtoa_r+0x980>
 8007ce8:	4641      	mov	r1, r8
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 fa72 	bl	80081d4 <_Bfree>
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fa6e 	bl	80081d4 <_Bfree>
 8007cf8:	e69c      	b.n	8007a34 <_dtoa_r+0x6c4>
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	4637      	mov	r7, r6
 8007cfe:	e7e1      	b.n	8007cc4 <_dtoa_r+0x954>
 8007d00:	46bb      	mov	fp, r7
 8007d02:	4637      	mov	r7, r6
 8007d04:	e599      	b.n	800783a <_dtoa_r+0x4ca>
 8007d06:	bf00      	nop
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80c8 	beq.w	8007ea4 <_dtoa_r+0xb34>
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	dd05      	ble.n	8007d28 <_dtoa_r+0x9b8>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fc27 	bl	8008574 <__lshift>
 8007d26:	4607      	mov	r7, r0
 8007d28:	f1b8 0f00 	cmp.w	r8, #0
 8007d2c:	d05b      	beq.n	8007de6 <_dtoa_r+0xa76>
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fa0f 	bl	8008154 <_Balloc>
 8007d36:	4605      	mov	r5, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <_dtoa_r+0x9d6>
 8007d3a:	4b83      	ldr	r3, [pc, #524]	; (8007f48 <_dtoa_r+0xbd8>)
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007d42:	f7ff bb2e 	b.w	80073a2 <_dtoa_r+0x32>
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	3202      	adds	r2, #2
 8007d4a:	0092      	lsls	r2, r2, #2
 8007d4c:	f107 010c 	add.w	r1, r7, #12
 8007d50:	300c      	adds	r0, #12
 8007d52:	f7ff fa76 	bl	8007242 <memcpy>
 8007d56:	2201      	movs	r2, #1
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fc0a 	bl	8008574 <__lshift>
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	9b02      	ldr	r3, [sp, #8]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	46b8      	mov	r8, r7
 8007d76:	9306      	str	r3, [sp, #24]
 8007d78:	4607      	mov	r7, r0
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	4650      	mov	r0, sl
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	f7ff fa6b 	bl	800725e <quorem>
 8007d88:	4641      	mov	r1, r8
 8007d8a:	9002      	str	r0, [sp, #8]
 8007d8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d90:	4650      	mov	r0, sl
 8007d92:	f000 fc5b 	bl	800864c <__mcmp>
 8007d96:	463a      	mov	r2, r7
 8007d98:	9005      	str	r0, [sp, #20]
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 fc71 	bl	8008684 <__mdiff>
 8007da2:	68c2      	ldr	r2, [r0, #12]
 8007da4:	4605      	mov	r5, r0
 8007da6:	bb02      	cbnz	r2, 8007dea <_dtoa_r+0xa7a>
 8007da8:	4601      	mov	r1, r0
 8007daa:	4650      	mov	r0, sl
 8007dac:	f000 fc4e 	bl	800864c <__mcmp>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4629      	mov	r1, r5
 8007db4:	4620      	mov	r0, r4
 8007db6:	9209      	str	r2, [sp, #36]	; 0x24
 8007db8:	f000 fa0c 	bl	80081d4 <_Bfree>
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc0:	9d04      	ldr	r5, [sp, #16]
 8007dc2:	ea43 0102 	orr.w	r1, r3, r2
 8007dc6:	9b06      	ldr	r3, [sp, #24]
 8007dc8:	4319      	orrs	r1, r3
 8007dca:	d110      	bne.n	8007dee <_dtoa_r+0xa7e>
 8007dcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007dd0:	d029      	beq.n	8007e26 <_dtoa_r+0xab6>
 8007dd2:	9b05      	ldr	r3, [sp, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd02      	ble.n	8007dde <_dtoa_r+0xa6e>
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	f883 9000 	strb.w	r9, [r3]
 8007de4:	e774      	b.n	8007cd0 <_dtoa_r+0x960>
 8007de6:	4638      	mov	r0, r7
 8007de8:	e7ba      	b.n	8007d60 <_dtoa_r+0x9f0>
 8007dea:	2201      	movs	r2, #1
 8007dec:	e7e1      	b.n	8007db2 <_dtoa_r+0xa42>
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db04      	blt.n	8007dfe <_dtoa_r+0xa8e>
 8007df4:	9907      	ldr	r1, [sp, #28]
 8007df6:	430b      	orrs	r3, r1
 8007df8:	9906      	ldr	r1, [sp, #24]
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	d120      	bne.n	8007e40 <_dtoa_r+0xad0>
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	dded      	ble.n	8007dde <_dtoa_r+0xa6e>
 8007e02:	4651      	mov	r1, sl
 8007e04:	2201      	movs	r2, #1
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 fbb4 	bl	8008574 <__lshift>
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4682      	mov	sl, r0
 8007e10:	f000 fc1c 	bl	800864c <__mcmp>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	dc03      	bgt.n	8007e20 <_dtoa_r+0xab0>
 8007e18:	d1e1      	bne.n	8007dde <_dtoa_r+0xa6e>
 8007e1a:	f019 0f01 	tst.w	r9, #1
 8007e1e:	d0de      	beq.n	8007dde <_dtoa_r+0xa6e>
 8007e20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e24:	d1d8      	bne.n	8007dd8 <_dtoa_r+0xa68>
 8007e26:	9a01      	ldr	r2, [sp, #4]
 8007e28:	2339      	movs	r3, #57	; 0x39
 8007e2a:	7013      	strb	r3, [r2, #0]
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	461d      	mov	r5, r3
 8007e30:	3b01      	subs	r3, #1
 8007e32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e36:	2a39      	cmp	r2, #57	; 0x39
 8007e38:	d06c      	beq.n	8007f14 <_dtoa_r+0xba4>
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	e747      	b.n	8007cd0 <_dtoa_r+0x960>
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	dd07      	ble.n	8007e54 <_dtoa_r+0xae4>
 8007e44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e48:	d0ed      	beq.n	8007e26 <_dtoa_r+0xab6>
 8007e4a:	9a01      	ldr	r2, [sp, #4]
 8007e4c:	f109 0301 	add.w	r3, r9, #1
 8007e50:	7013      	strb	r3, [r2, #0]
 8007e52:	e73d      	b.n	8007cd0 <_dtoa_r+0x960>
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	9a08      	ldr	r2, [sp, #32]
 8007e58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d043      	beq.n	8007ee8 <_dtoa_r+0xb78>
 8007e60:	4651      	mov	r1, sl
 8007e62:	2300      	movs	r3, #0
 8007e64:	220a      	movs	r2, #10
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f9d6 	bl	8008218 <__multadd>
 8007e6c:	45b8      	cmp	r8, r7
 8007e6e:	4682      	mov	sl, r0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	f04f 020a 	mov.w	r2, #10
 8007e78:	4641      	mov	r1, r8
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	d107      	bne.n	8007e8e <_dtoa_r+0xb1e>
 8007e7e:	f000 f9cb 	bl	8008218 <__multadd>
 8007e82:	4680      	mov	r8, r0
 8007e84:	4607      	mov	r7, r0
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	e775      	b.n	8007d7a <_dtoa_r+0xa0a>
 8007e8e:	f000 f9c3 	bl	8008218 <__multadd>
 8007e92:	4639      	mov	r1, r7
 8007e94:	4680      	mov	r8, r0
 8007e96:	2300      	movs	r3, #0
 8007e98:	220a      	movs	r2, #10
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f9bc 	bl	8008218 <__multadd>
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	e7f0      	b.n	8007e86 <_dtoa_r+0xb16>
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	9d00      	ldr	r5, [sp, #0]
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4650      	mov	r0, sl
 8007eae:	f7ff f9d6 	bl	800725e <quorem>
 8007eb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	f805 9b01 	strb.w	r9, [r5], #1
 8007ebc:	1aea      	subs	r2, r5, r3
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	dd07      	ble.n	8007ed4 <_dtoa_r+0xb64>
 8007ec4:	4651      	mov	r1, sl
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	220a      	movs	r2, #10
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f9a4 	bl	8008218 <__multadd>
 8007ed0:	4682      	mov	sl, r0
 8007ed2:	e7ea      	b.n	8007eaa <_dtoa_r+0xb3a>
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfc8      	it	gt
 8007eda:	461d      	movgt	r5, r3
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	bfd8      	it	le
 8007ee0:	2501      	movle	r5, #1
 8007ee2:	441d      	add	r5, r3
 8007ee4:	f04f 0800 	mov.w	r8, #0
 8007ee8:	4651      	mov	r1, sl
 8007eea:	2201      	movs	r2, #1
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fb41 	bl	8008574 <__lshift>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	f000 fba9 	bl	800864c <__mcmp>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	dc96      	bgt.n	8007e2c <_dtoa_r+0xabc>
 8007efe:	d102      	bne.n	8007f06 <_dtoa_r+0xb96>
 8007f00:	f019 0f01 	tst.w	r9, #1
 8007f04:	d192      	bne.n	8007e2c <_dtoa_r+0xabc>
 8007f06:	462b      	mov	r3, r5
 8007f08:	461d      	mov	r5, r3
 8007f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f0e:	2a30      	cmp	r2, #48	; 0x30
 8007f10:	d0fa      	beq.n	8007f08 <_dtoa_r+0xb98>
 8007f12:	e6dd      	b.n	8007cd0 <_dtoa_r+0x960>
 8007f14:	9a00      	ldr	r2, [sp, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d189      	bne.n	8007e2e <_dtoa_r+0xabe>
 8007f1a:	f10b 0b01 	add.w	fp, fp, #1
 8007f1e:	2331      	movs	r3, #49	; 0x31
 8007f20:	e796      	b.n	8007e50 <_dtoa_r+0xae0>
 8007f22:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <_dtoa_r+0xbdc>)
 8007f24:	f7ff ba99 	b.w	800745a <_dtoa_r+0xea>
 8007f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f47f aa6d 	bne.w	800740a <_dtoa_r+0x9a>
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <_dtoa_r+0xbe0>)
 8007f32:	f7ff ba92 	b.w	800745a <_dtoa_r+0xea>
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dcb5      	bgt.n	8007ea8 <_dtoa_r+0xb38>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	f73f aeb1 	bgt.w	8007ca6 <_dtoa_r+0x936>
 8007f44:	e7b0      	b.n	8007ea8 <_dtoa_r+0xb38>
 8007f46:	bf00      	nop
 8007f48:	080090ec 	.word	0x080090ec
 8007f4c:	0800904c 	.word	0x0800904c
 8007f50:	08009070 	.word	0x08009070

08007f54 <_free_r>:
 8007f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f56:	2900      	cmp	r1, #0
 8007f58:	d044      	beq.n	8007fe4 <_free_r+0x90>
 8007f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5e:	9001      	str	r0, [sp, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f1a1 0404 	sub.w	r4, r1, #4
 8007f66:	bfb8      	it	lt
 8007f68:	18e4      	addlt	r4, r4, r3
 8007f6a:	f000 f8e7 	bl	800813c <__malloc_lock>
 8007f6e:	4a1e      	ldr	r2, [pc, #120]	; (8007fe8 <_free_r+0x94>)
 8007f70:	9801      	ldr	r0, [sp, #4]
 8007f72:	6813      	ldr	r3, [r2, #0]
 8007f74:	b933      	cbnz	r3, 8007f84 <_free_r+0x30>
 8007f76:	6063      	str	r3, [r4, #4]
 8007f78:	6014      	str	r4, [r2, #0]
 8007f7a:	b003      	add	sp, #12
 8007f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f80:	f000 b8e2 	b.w	8008148 <__malloc_unlock>
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	d908      	bls.n	8007f9a <_free_r+0x46>
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	1961      	adds	r1, r4, r5
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	bf01      	itttt	eq
 8007f90:	6819      	ldreq	r1, [r3, #0]
 8007f92:	685b      	ldreq	r3, [r3, #4]
 8007f94:	1949      	addeq	r1, r1, r5
 8007f96:	6021      	streq	r1, [r4, #0]
 8007f98:	e7ed      	b.n	8007f76 <_free_r+0x22>
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	b10b      	cbz	r3, 8007fa4 <_free_r+0x50>
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	d9fa      	bls.n	8007f9a <_free_r+0x46>
 8007fa4:	6811      	ldr	r1, [r2, #0]
 8007fa6:	1855      	adds	r5, r2, r1
 8007fa8:	42a5      	cmp	r5, r4
 8007faa:	d10b      	bne.n	8007fc4 <_free_r+0x70>
 8007fac:	6824      	ldr	r4, [r4, #0]
 8007fae:	4421      	add	r1, r4
 8007fb0:	1854      	adds	r4, r2, r1
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	6011      	str	r1, [r2, #0]
 8007fb6:	d1e0      	bne.n	8007f7a <_free_r+0x26>
 8007fb8:	681c      	ldr	r4, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	6053      	str	r3, [r2, #4]
 8007fbe:	440c      	add	r4, r1
 8007fc0:	6014      	str	r4, [r2, #0]
 8007fc2:	e7da      	b.n	8007f7a <_free_r+0x26>
 8007fc4:	d902      	bls.n	8007fcc <_free_r+0x78>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	e7d6      	b.n	8007f7a <_free_r+0x26>
 8007fcc:	6825      	ldr	r5, [r4, #0]
 8007fce:	1961      	adds	r1, r4, r5
 8007fd0:	428b      	cmp	r3, r1
 8007fd2:	bf04      	itt	eq
 8007fd4:	6819      	ldreq	r1, [r3, #0]
 8007fd6:	685b      	ldreq	r3, [r3, #4]
 8007fd8:	6063      	str	r3, [r4, #4]
 8007fda:	bf04      	itt	eq
 8007fdc:	1949      	addeq	r1, r1, r5
 8007fde:	6021      	streq	r1, [r4, #0]
 8007fe0:	6054      	str	r4, [r2, #4]
 8007fe2:	e7ca      	b.n	8007f7a <_free_r+0x26>
 8007fe4:	b003      	add	sp, #12
 8007fe6:	bd30      	pop	{r4, r5, pc}
 8007fe8:	20004438 	.word	0x20004438

08007fec <malloc>:
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <malloc+0xc>)
 8007fee:	4601      	mov	r1, r0
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f000 b823 	b.w	800803c <_malloc_r>
 8007ff6:	bf00      	nop
 8007ff8:	20000068 	.word	0x20000068

08007ffc <sbrk_aligned>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4e0e      	ldr	r6, [pc, #56]	; (8008038 <sbrk_aligned+0x3c>)
 8008000:	460c      	mov	r4, r1
 8008002:	6831      	ldr	r1, [r6, #0]
 8008004:	4605      	mov	r5, r0
 8008006:	b911      	cbnz	r1, 800800e <sbrk_aligned+0x12>
 8008008:	f000 fcce 	bl	80089a8 <_sbrk_r>
 800800c:	6030      	str	r0, [r6, #0]
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 fcc9 	bl	80089a8 <_sbrk_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d00a      	beq.n	8008030 <sbrk_aligned+0x34>
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d007      	beq.n	8008034 <sbrk_aligned+0x38>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fcbe 	bl	80089a8 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d101      	bne.n	8008034 <sbrk_aligned+0x38>
 8008030:	f04f 34ff 	mov.w	r4, #4294967295
 8008034:	4620      	mov	r0, r4
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	2000443c 	.word	0x2000443c

0800803c <_malloc_r>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	1ccd      	adds	r5, r1, #3
 8008042:	f025 0503 	bic.w	r5, r5, #3
 8008046:	3508      	adds	r5, #8
 8008048:	2d0c      	cmp	r5, #12
 800804a:	bf38      	it	cc
 800804c:	250c      	movcc	r5, #12
 800804e:	2d00      	cmp	r5, #0
 8008050:	4607      	mov	r7, r0
 8008052:	db01      	blt.n	8008058 <_malloc_r+0x1c>
 8008054:	42a9      	cmp	r1, r5
 8008056:	d905      	bls.n	8008064 <_malloc_r+0x28>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	2600      	movs	r6, #0
 800805e:	4630      	mov	r0, r6
 8008060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008138 <_malloc_r+0xfc>
 8008068:	f000 f868 	bl	800813c <__malloc_lock>
 800806c:	f8d8 3000 	ldr.w	r3, [r8]
 8008070:	461c      	mov	r4, r3
 8008072:	bb5c      	cbnz	r4, 80080cc <_malloc_r+0x90>
 8008074:	4629      	mov	r1, r5
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ffc0 	bl	8007ffc <sbrk_aligned>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	4604      	mov	r4, r0
 8008080:	d155      	bne.n	800812e <_malloc_r+0xf2>
 8008082:	f8d8 4000 	ldr.w	r4, [r8]
 8008086:	4626      	mov	r6, r4
 8008088:	2e00      	cmp	r6, #0
 800808a:	d145      	bne.n	8008118 <_malloc_r+0xdc>
 800808c:	2c00      	cmp	r4, #0
 800808e:	d048      	beq.n	8008122 <_malloc_r+0xe6>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	4631      	mov	r1, r6
 8008094:	4638      	mov	r0, r7
 8008096:	eb04 0903 	add.w	r9, r4, r3
 800809a:	f000 fc85 	bl	80089a8 <_sbrk_r>
 800809e:	4581      	cmp	r9, r0
 80080a0:	d13f      	bne.n	8008122 <_malloc_r+0xe6>
 80080a2:	6821      	ldr	r1, [r4, #0]
 80080a4:	1a6d      	subs	r5, r5, r1
 80080a6:	4629      	mov	r1, r5
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ffa7 	bl	8007ffc <sbrk_aligned>
 80080ae:	3001      	adds	r0, #1
 80080b0:	d037      	beq.n	8008122 <_malloc_r+0xe6>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	442b      	add	r3, r5
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	f8d8 3000 	ldr.w	r3, [r8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d038      	beq.n	8008132 <_malloc_r+0xf6>
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	42a2      	cmp	r2, r4
 80080c4:	d12b      	bne.n	800811e <_malloc_r+0xe2>
 80080c6:	2200      	movs	r2, #0
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	e00f      	b.n	80080ec <_malloc_r+0xb0>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	1b52      	subs	r2, r2, r5
 80080d0:	d41f      	bmi.n	8008112 <_malloc_r+0xd6>
 80080d2:	2a0b      	cmp	r2, #11
 80080d4:	d917      	bls.n	8008106 <_malloc_r+0xca>
 80080d6:	1961      	adds	r1, r4, r5
 80080d8:	42a3      	cmp	r3, r4
 80080da:	6025      	str	r5, [r4, #0]
 80080dc:	bf18      	it	ne
 80080de:	6059      	strne	r1, [r3, #4]
 80080e0:	6863      	ldr	r3, [r4, #4]
 80080e2:	bf08      	it	eq
 80080e4:	f8c8 1000 	streq.w	r1, [r8]
 80080e8:	5162      	str	r2, [r4, r5]
 80080ea:	604b      	str	r3, [r1, #4]
 80080ec:	4638      	mov	r0, r7
 80080ee:	f104 060b 	add.w	r6, r4, #11
 80080f2:	f000 f829 	bl	8008148 <__malloc_unlock>
 80080f6:	f026 0607 	bic.w	r6, r6, #7
 80080fa:	1d23      	adds	r3, r4, #4
 80080fc:	1af2      	subs	r2, r6, r3
 80080fe:	d0ae      	beq.n	800805e <_malloc_r+0x22>
 8008100:	1b9b      	subs	r3, r3, r6
 8008102:	50a3      	str	r3, [r4, r2]
 8008104:	e7ab      	b.n	800805e <_malloc_r+0x22>
 8008106:	42a3      	cmp	r3, r4
 8008108:	6862      	ldr	r2, [r4, #4]
 800810a:	d1dd      	bne.n	80080c8 <_malloc_r+0x8c>
 800810c:	f8c8 2000 	str.w	r2, [r8]
 8008110:	e7ec      	b.n	80080ec <_malloc_r+0xb0>
 8008112:	4623      	mov	r3, r4
 8008114:	6864      	ldr	r4, [r4, #4]
 8008116:	e7ac      	b.n	8008072 <_malloc_r+0x36>
 8008118:	4634      	mov	r4, r6
 800811a:	6876      	ldr	r6, [r6, #4]
 800811c:	e7b4      	b.n	8008088 <_malloc_r+0x4c>
 800811e:	4613      	mov	r3, r2
 8008120:	e7cc      	b.n	80080bc <_malloc_r+0x80>
 8008122:	230c      	movs	r3, #12
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	4638      	mov	r0, r7
 8008128:	f000 f80e 	bl	8008148 <__malloc_unlock>
 800812c:	e797      	b.n	800805e <_malloc_r+0x22>
 800812e:	6025      	str	r5, [r4, #0]
 8008130:	e7dc      	b.n	80080ec <_malloc_r+0xb0>
 8008132:	605b      	str	r3, [r3, #4]
 8008134:	deff      	udf	#255	; 0xff
 8008136:	bf00      	nop
 8008138:	20004438 	.word	0x20004438

0800813c <__malloc_lock>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__malloc_lock+0x8>)
 800813e:	f7ff b87e 	b.w	800723e <__retarget_lock_acquire_recursive>
 8008142:	bf00      	nop
 8008144:	20004434 	.word	0x20004434

08008148 <__malloc_unlock>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__malloc_unlock+0x8>)
 800814a:	f7ff b879 	b.w	8007240 <__retarget_lock_release_recursive>
 800814e:	bf00      	nop
 8008150:	20004434 	.word	0x20004434

08008154 <_Balloc>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	69c6      	ldr	r6, [r0, #28]
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	b976      	cbnz	r6, 800817c <_Balloc+0x28>
 800815e:	2010      	movs	r0, #16
 8008160:	f7ff ff44 	bl	8007fec <malloc>
 8008164:	4602      	mov	r2, r0
 8008166:	61e0      	str	r0, [r4, #28]
 8008168:	b920      	cbnz	r0, 8008174 <_Balloc+0x20>
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <_Balloc+0x78>)
 800816c:	4818      	ldr	r0, [pc, #96]	; (80081d0 <_Balloc+0x7c>)
 800816e:	216b      	movs	r1, #107	; 0x6b
 8008170:	f000 fc2a 	bl	80089c8 <__assert_func>
 8008174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008178:	6006      	str	r6, [r0, #0]
 800817a:	60c6      	str	r6, [r0, #12]
 800817c:	69e6      	ldr	r6, [r4, #28]
 800817e:	68f3      	ldr	r3, [r6, #12]
 8008180:	b183      	cbz	r3, 80081a4 <_Balloc+0x50>
 8008182:	69e3      	ldr	r3, [r4, #28]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800818a:	b9b8      	cbnz	r0, 80081bc <_Balloc+0x68>
 800818c:	2101      	movs	r1, #1
 800818e:	fa01 f605 	lsl.w	r6, r1, r5
 8008192:	1d72      	adds	r2, r6, #5
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fc34 	bl	8008a04 <_calloc_r>
 800819c:	b160      	cbz	r0, 80081b8 <_Balloc+0x64>
 800819e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081a2:	e00e      	b.n	80081c2 <_Balloc+0x6e>
 80081a4:	2221      	movs	r2, #33	; 0x21
 80081a6:	2104      	movs	r1, #4
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fc2b 	bl	8008a04 <_calloc_r>
 80081ae:	69e3      	ldr	r3, [r4, #28]
 80081b0:	60f0      	str	r0, [r6, #12]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e4      	bne.n	8008182 <_Balloc+0x2e>
 80081b8:	2000      	movs	r0, #0
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	6802      	ldr	r2, [r0, #0]
 80081be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081c2:	2300      	movs	r3, #0
 80081c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081c8:	e7f7      	b.n	80081ba <_Balloc+0x66>
 80081ca:	bf00      	nop
 80081cc:	0800907d 	.word	0x0800907d
 80081d0:	080090fd 	.word	0x080090fd

080081d4 <_Bfree>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	69c6      	ldr	r6, [r0, #28]
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b976      	cbnz	r6, 80081fc <_Bfree+0x28>
 80081de:	2010      	movs	r0, #16
 80081e0:	f7ff ff04 	bl	8007fec <malloc>
 80081e4:	4602      	mov	r2, r0
 80081e6:	61e8      	str	r0, [r5, #28]
 80081e8:	b920      	cbnz	r0, 80081f4 <_Bfree+0x20>
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <_Bfree+0x3c>)
 80081ec:	4809      	ldr	r0, [pc, #36]	; (8008214 <_Bfree+0x40>)
 80081ee:	218f      	movs	r1, #143	; 0x8f
 80081f0:	f000 fbea 	bl	80089c8 <__assert_func>
 80081f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081f8:	6006      	str	r6, [r0, #0]
 80081fa:	60c6      	str	r6, [r0, #12]
 80081fc:	b13c      	cbz	r4, 800820e <_Bfree+0x3a>
 80081fe:	69eb      	ldr	r3, [r5, #28]
 8008200:	6862      	ldr	r2, [r4, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008208:	6021      	str	r1, [r4, #0]
 800820a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	0800907d 	.word	0x0800907d
 8008214:	080090fd 	.word	0x080090fd

08008218 <__multadd>:
 8008218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	690d      	ldr	r5, [r1, #16]
 800821e:	4607      	mov	r7, r0
 8008220:	460c      	mov	r4, r1
 8008222:	461e      	mov	r6, r3
 8008224:	f101 0c14 	add.w	ip, r1, #20
 8008228:	2000      	movs	r0, #0
 800822a:	f8dc 3000 	ldr.w	r3, [ip]
 800822e:	b299      	uxth	r1, r3
 8008230:	fb02 6101 	mla	r1, r2, r1, r6
 8008234:	0c1e      	lsrs	r6, r3, #16
 8008236:	0c0b      	lsrs	r3, r1, #16
 8008238:	fb02 3306 	mla	r3, r2, r6, r3
 800823c:	b289      	uxth	r1, r1
 800823e:	3001      	adds	r0, #1
 8008240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008244:	4285      	cmp	r5, r0
 8008246:	f84c 1b04 	str.w	r1, [ip], #4
 800824a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800824e:	dcec      	bgt.n	800822a <__multadd+0x12>
 8008250:	b30e      	cbz	r6, 8008296 <__multadd+0x7e>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	42ab      	cmp	r3, r5
 8008256:	dc19      	bgt.n	800828c <__multadd+0x74>
 8008258:	6861      	ldr	r1, [r4, #4]
 800825a:	4638      	mov	r0, r7
 800825c:	3101      	adds	r1, #1
 800825e:	f7ff ff79 	bl	8008154 <_Balloc>
 8008262:	4680      	mov	r8, r0
 8008264:	b928      	cbnz	r0, 8008272 <__multadd+0x5a>
 8008266:	4602      	mov	r2, r0
 8008268:	4b0c      	ldr	r3, [pc, #48]	; (800829c <__multadd+0x84>)
 800826a:	480d      	ldr	r0, [pc, #52]	; (80082a0 <__multadd+0x88>)
 800826c:	21ba      	movs	r1, #186	; 0xba
 800826e:	f000 fbab 	bl	80089c8 <__assert_func>
 8008272:	6922      	ldr	r2, [r4, #16]
 8008274:	3202      	adds	r2, #2
 8008276:	f104 010c 	add.w	r1, r4, #12
 800827a:	0092      	lsls	r2, r2, #2
 800827c:	300c      	adds	r0, #12
 800827e:	f7fe ffe0 	bl	8007242 <memcpy>
 8008282:	4621      	mov	r1, r4
 8008284:	4638      	mov	r0, r7
 8008286:	f7ff ffa5 	bl	80081d4 <_Bfree>
 800828a:	4644      	mov	r4, r8
 800828c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008290:	3501      	adds	r5, #1
 8008292:	615e      	str	r6, [r3, #20]
 8008294:	6125      	str	r5, [r4, #16]
 8008296:	4620      	mov	r0, r4
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829c:	080090ec 	.word	0x080090ec
 80082a0:	080090fd 	.word	0x080090fd

080082a4 <__hi0bits>:
 80082a4:	0c03      	lsrs	r3, r0, #16
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	b9d3      	cbnz	r3, 80082e0 <__hi0bits+0x3c>
 80082aa:	0400      	lsls	r0, r0, #16
 80082ac:	2310      	movs	r3, #16
 80082ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082b2:	bf04      	itt	eq
 80082b4:	0200      	lsleq	r0, r0, #8
 80082b6:	3308      	addeq	r3, #8
 80082b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082bc:	bf04      	itt	eq
 80082be:	0100      	lsleq	r0, r0, #4
 80082c0:	3304      	addeq	r3, #4
 80082c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082c6:	bf04      	itt	eq
 80082c8:	0080      	lsleq	r0, r0, #2
 80082ca:	3302      	addeq	r3, #2
 80082cc:	2800      	cmp	r0, #0
 80082ce:	db05      	blt.n	80082dc <__hi0bits+0x38>
 80082d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082d4:	f103 0301 	add.w	r3, r3, #1
 80082d8:	bf08      	it	eq
 80082da:	2320      	moveq	r3, #32
 80082dc:	4618      	mov	r0, r3
 80082de:	4770      	bx	lr
 80082e0:	2300      	movs	r3, #0
 80082e2:	e7e4      	b.n	80082ae <__hi0bits+0xa>

080082e4 <__lo0bits>:
 80082e4:	6803      	ldr	r3, [r0, #0]
 80082e6:	f013 0207 	ands.w	r2, r3, #7
 80082ea:	d00c      	beq.n	8008306 <__lo0bits+0x22>
 80082ec:	07d9      	lsls	r1, r3, #31
 80082ee:	d422      	bmi.n	8008336 <__lo0bits+0x52>
 80082f0:	079a      	lsls	r2, r3, #30
 80082f2:	bf49      	itett	mi
 80082f4:	085b      	lsrmi	r3, r3, #1
 80082f6:	089b      	lsrpl	r3, r3, #2
 80082f8:	6003      	strmi	r3, [r0, #0]
 80082fa:	2201      	movmi	r2, #1
 80082fc:	bf5c      	itt	pl
 80082fe:	6003      	strpl	r3, [r0, #0]
 8008300:	2202      	movpl	r2, #2
 8008302:	4610      	mov	r0, r2
 8008304:	4770      	bx	lr
 8008306:	b299      	uxth	r1, r3
 8008308:	b909      	cbnz	r1, 800830e <__lo0bits+0x2a>
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	2210      	movs	r2, #16
 800830e:	b2d9      	uxtb	r1, r3
 8008310:	b909      	cbnz	r1, 8008316 <__lo0bits+0x32>
 8008312:	3208      	adds	r2, #8
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	0719      	lsls	r1, r3, #28
 8008318:	bf04      	itt	eq
 800831a:	091b      	lsreq	r3, r3, #4
 800831c:	3204      	addeq	r2, #4
 800831e:	0799      	lsls	r1, r3, #30
 8008320:	bf04      	itt	eq
 8008322:	089b      	lsreq	r3, r3, #2
 8008324:	3202      	addeq	r2, #2
 8008326:	07d9      	lsls	r1, r3, #31
 8008328:	d403      	bmi.n	8008332 <__lo0bits+0x4e>
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	f102 0201 	add.w	r2, r2, #1
 8008330:	d003      	beq.n	800833a <__lo0bits+0x56>
 8008332:	6003      	str	r3, [r0, #0]
 8008334:	e7e5      	b.n	8008302 <__lo0bits+0x1e>
 8008336:	2200      	movs	r2, #0
 8008338:	e7e3      	b.n	8008302 <__lo0bits+0x1e>
 800833a:	2220      	movs	r2, #32
 800833c:	e7e1      	b.n	8008302 <__lo0bits+0x1e>
	...

08008340 <__i2b>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	2101      	movs	r1, #1
 8008346:	f7ff ff05 	bl	8008154 <_Balloc>
 800834a:	4602      	mov	r2, r0
 800834c:	b928      	cbnz	r0, 800835a <__i2b+0x1a>
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <__i2b+0x24>)
 8008350:	4805      	ldr	r0, [pc, #20]	; (8008368 <__i2b+0x28>)
 8008352:	f240 1145 	movw	r1, #325	; 0x145
 8008356:	f000 fb37 	bl	80089c8 <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	6144      	str	r4, [r0, #20]
 800835e:	6103      	str	r3, [r0, #16]
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	080090ec 	.word	0x080090ec
 8008368:	080090fd 	.word	0x080090fd

0800836c <__multiply>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4691      	mov	r9, r2
 8008372:	690a      	ldr	r2, [r1, #16]
 8008374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	bfb8      	it	lt
 800837c:	460b      	movlt	r3, r1
 800837e:	460c      	mov	r4, r1
 8008380:	bfbc      	itt	lt
 8008382:	464c      	movlt	r4, r9
 8008384:	4699      	movlt	r9, r3
 8008386:	6927      	ldr	r7, [r4, #16]
 8008388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	eb07 060a 	add.w	r6, r7, sl
 8008394:	42b3      	cmp	r3, r6
 8008396:	b085      	sub	sp, #20
 8008398:	bfb8      	it	lt
 800839a:	3101      	addlt	r1, #1
 800839c:	f7ff feda 	bl	8008154 <_Balloc>
 80083a0:	b930      	cbnz	r0, 80083b0 <__multiply+0x44>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b44      	ldr	r3, [pc, #272]	; (80084b8 <__multiply+0x14c>)
 80083a6:	4845      	ldr	r0, [pc, #276]	; (80084bc <__multiply+0x150>)
 80083a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80083ac:	f000 fb0c 	bl	80089c8 <__assert_func>
 80083b0:	f100 0514 	add.w	r5, r0, #20
 80083b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083b8:	462b      	mov	r3, r5
 80083ba:	2200      	movs	r2, #0
 80083bc:	4543      	cmp	r3, r8
 80083be:	d321      	bcc.n	8008404 <__multiply+0x98>
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083c8:	f109 0314 	add.w	r3, r9, #20
 80083cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	1b3a      	subs	r2, r7, r4
 80083d4:	3a15      	subs	r2, #21
 80083d6:	f022 0203 	bic.w	r2, r2, #3
 80083da:	3204      	adds	r2, #4
 80083dc:	f104 0115 	add.w	r1, r4, #21
 80083e0:	428f      	cmp	r7, r1
 80083e2:	bf38      	it	cc
 80083e4:	2204      	movcc	r2, #4
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	9a02      	ldr	r2, [sp, #8]
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d80c      	bhi.n	800840a <__multiply+0x9e>
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	dd03      	ble.n	80083fc <__multiply+0x90>
 80083f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05b      	beq.n	80084b4 <__multiply+0x148>
 80083fc:	6106      	str	r6, [r0, #16]
 80083fe:	b005      	add	sp, #20
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	f843 2b04 	str.w	r2, [r3], #4
 8008408:	e7d8      	b.n	80083bc <__multiply+0x50>
 800840a:	f8b3 a000 	ldrh.w	sl, [r3]
 800840e:	f1ba 0f00 	cmp.w	sl, #0
 8008412:	d024      	beq.n	800845e <__multiply+0xf2>
 8008414:	f104 0e14 	add.w	lr, r4, #20
 8008418:	46a9      	mov	r9, r5
 800841a:	f04f 0c00 	mov.w	ip, #0
 800841e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008422:	f8d9 1000 	ldr.w	r1, [r9]
 8008426:	fa1f fb82 	uxth.w	fp, r2
 800842a:	b289      	uxth	r1, r1
 800842c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008434:	f8d9 2000 	ldr.w	r2, [r9]
 8008438:	4461      	add	r1, ip
 800843a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800843e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008446:	b289      	uxth	r1, r1
 8008448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800844c:	4577      	cmp	r7, lr
 800844e:	f849 1b04 	str.w	r1, [r9], #4
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	d8e2      	bhi.n	800841e <__multiply+0xb2>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	f845 c002 	str.w	ip, [r5, r2]
 800845e:	9a03      	ldr	r2, [sp, #12]
 8008460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008464:	3304      	adds	r3, #4
 8008466:	f1b9 0f00 	cmp.w	r9, #0
 800846a:	d021      	beq.n	80084b0 <__multiply+0x144>
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	f104 0c14 	add.w	ip, r4, #20
 8008472:	46ae      	mov	lr, r5
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	f8bc b000 	ldrh.w	fp, [ip]
 800847c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008480:	fb09 220b 	mla	r2, r9, fp, r2
 8008484:	4452      	add	r2, sl
 8008486:	b289      	uxth	r1, r1
 8008488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800848c:	f84e 1b04 	str.w	r1, [lr], #4
 8008490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008498:	f8be 1000 	ldrh.w	r1, [lr]
 800849c:	fb09 110a 	mla	r1, r9, sl, r1
 80084a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80084a4:	4567      	cmp	r7, ip
 80084a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084aa:	d8e5      	bhi.n	8008478 <__multiply+0x10c>
 80084ac:	9a01      	ldr	r2, [sp, #4]
 80084ae:	50a9      	str	r1, [r5, r2]
 80084b0:	3504      	adds	r5, #4
 80084b2:	e799      	b.n	80083e8 <__multiply+0x7c>
 80084b4:	3e01      	subs	r6, #1
 80084b6:	e79b      	b.n	80083f0 <__multiply+0x84>
 80084b8:	080090ec 	.word	0x080090ec
 80084bc:	080090fd 	.word	0x080090fd

080084c0 <__pow5mult>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4615      	mov	r5, r2
 80084c6:	f012 0203 	ands.w	r2, r2, #3
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	d007      	beq.n	80084e0 <__pow5mult+0x20>
 80084d0:	4c25      	ldr	r4, [pc, #148]	; (8008568 <__pow5mult+0xa8>)
 80084d2:	3a01      	subs	r2, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084da:	f7ff fe9d 	bl	8008218 <__multadd>
 80084de:	4607      	mov	r7, r0
 80084e0:	10ad      	asrs	r5, r5, #2
 80084e2:	d03d      	beq.n	8008560 <__pow5mult+0xa0>
 80084e4:	69f4      	ldr	r4, [r6, #28]
 80084e6:	b97c      	cbnz	r4, 8008508 <__pow5mult+0x48>
 80084e8:	2010      	movs	r0, #16
 80084ea:	f7ff fd7f 	bl	8007fec <malloc>
 80084ee:	4602      	mov	r2, r0
 80084f0:	61f0      	str	r0, [r6, #28]
 80084f2:	b928      	cbnz	r0, 8008500 <__pow5mult+0x40>
 80084f4:	4b1d      	ldr	r3, [pc, #116]	; (800856c <__pow5mult+0xac>)
 80084f6:	481e      	ldr	r0, [pc, #120]	; (8008570 <__pow5mult+0xb0>)
 80084f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80084fc:	f000 fa64 	bl	80089c8 <__assert_func>
 8008500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008504:	6004      	str	r4, [r0, #0]
 8008506:	60c4      	str	r4, [r0, #12]
 8008508:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800850c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008510:	b94c      	cbnz	r4, 8008526 <__pow5mult+0x66>
 8008512:	f240 2171 	movw	r1, #625	; 0x271
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff12 	bl	8008340 <__i2b>
 800851c:	2300      	movs	r3, #0
 800851e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008522:	4604      	mov	r4, r0
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	07eb      	lsls	r3, r5, #31
 800852c:	d50a      	bpl.n	8008544 <__pow5mult+0x84>
 800852e:	4639      	mov	r1, r7
 8008530:	4622      	mov	r2, r4
 8008532:	4630      	mov	r0, r6
 8008534:	f7ff ff1a 	bl	800836c <__multiply>
 8008538:	4639      	mov	r1, r7
 800853a:	4680      	mov	r8, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff fe49 	bl	80081d4 <_Bfree>
 8008542:	4647      	mov	r7, r8
 8008544:	106d      	asrs	r5, r5, #1
 8008546:	d00b      	beq.n	8008560 <__pow5mult+0xa0>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	b938      	cbnz	r0, 800855c <__pow5mult+0x9c>
 800854c:	4622      	mov	r2, r4
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff ff0b 	bl	800836c <__multiply>
 8008556:	6020      	str	r0, [r4, #0]
 8008558:	f8c0 9000 	str.w	r9, [r0]
 800855c:	4604      	mov	r4, r0
 800855e:	e7e4      	b.n	800852a <__pow5mult+0x6a>
 8008560:	4638      	mov	r0, r7
 8008562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008566:	bf00      	nop
 8008568:	08009248 	.word	0x08009248
 800856c:	0800907d 	.word	0x0800907d
 8008570:	080090fd 	.word	0x080090fd

08008574 <__lshift>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	6849      	ldr	r1, [r1, #4]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	4607      	mov	r7, r0
 8008586:	4691      	mov	r9, r2
 8008588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800858c:	f108 0601 	add.w	r6, r8, #1
 8008590:	42b3      	cmp	r3, r6
 8008592:	db0b      	blt.n	80085ac <__lshift+0x38>
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff fddd 	bl	8008154 <_Balloc>
 800859a:	4605      	mov	r5, r0
 800859c:	b948      	cbnz	r0, 80085b2 <__lshift+0x3e>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b28      	ldr	r3, [pc, #160]	; (8008644 <__lshift+0xd0>)
 80085a2:	4829      	ldr	r0, [pc, #164]	; (8008648 <__lshift+0xd4>)
 80085a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80085a8:	f000 fa0e 	bl	80089c8 <__assert_func>
 80085ac:	3101      	adds	r1, #1
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	e7ee      	b.n	8008590 <__lshift+0x1c>
 80085b2:	2300      	movs	r3, #0
 80085b4:	f100 0114 	add.w	r1, r0, #20
 80085b8:	f100 0210 	add.w	r2, r0, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	4553      	cmp	r3, sl
 80085c0:	db33      	blt.n	800862a <__lshift+0xb6>
 80085c2:	6920      	ldr	r0, [r4, #16]
 80085c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c8:	f104 0314 	add.w	r3, r4, #20
 80085cc:	f019 091f 	ands.w	r9, r9, #31
 80085d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085d8:	d02b      	beq.n	8008632 <__lshift+0xbe>
 80085da:	f1c9 0e20 	rsb	lr, r9, #32
 80085de:	468a      	mov	sl, r1
 80085e0:	2200      	movs	r2, #0
 80085e2:	6818      	ldr	r0, [r3, #0]
 80085e4:	fa00 f009 	lsl.w	r0, r0, r9
 80085e8:	4310      	orrs	r0, r2
 80085ea:	f84a 0b04 	str.w	r0, [sl], #4
 80085ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f2:	459c      	cmp	ip, r3
 80085f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80085f8:	d8f3      	bhi.n	80085e2 <__lshift+0x6e>
 80085fa:	ebac 0304 	sub.w	r3, ip, r4
 80085fe:	3b15      	subs	r3, #21
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	3304      	adds	r3, #4
 8008606:	f104 0015 	add.w	r0, r4, #21
 800860a:	4584      	cmp	ip, r0
 800860c:	bf38      	it	cc
 800860e:	2304      	movcc	r3, #4
 8008610:	50ca      	str	r2, [r1, r3]
 8008612:	b10a      	cbz	r2, 8008618 <__lshift+0xa4>
 8008614:	f108 0602 	add.w	r6, r8, #2
 8008618:	3e01      	subs	r6, #1
 800861a:	4638      	mov	r0, r7
 800861c:	612e      	str	r6, [r5, #16]
 800861e:	4621      	mov	r1, r4
 8008620:	f7ff fdd8 	bl	80081d4 <_Bfree>
 8008624:	4628      	mov	r0, r5
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	f842 0f04 	str.w	r0, [r2, #4]!
 800862e:	3301      	adds	r3, #1
 8008630:	e7c5      	b.n	80085be <__lshift+0x4a>
 8008632:	3904      	subs	r1, #4
 8008634:	f853 2b04 	ldr.w	r2, [r3], #4
 8008638:	f841 2f04 	str.w	r2, [r1, #4]!
 800863c:	459c      	cmp	ip, r3
 800863e:	d8f9      	bhi.n	8008634 <__lshift+0xc0>
 8008640:	e7ea      	b.n	8008618 <__lshift+0xa4>
 8008642:	bf00      	nop
 8008644:	080090ec 	.word	0x080090ec
 8008648:	080090fd 	.word	0x080090fd

0800864c <__mcmp>:
 800864c:	b530      	push	{r4, r5, lr}
 800864e:	6902      	ldr	r2, [r0, #16]
 8008650:	690c      	ldr	r4, [r1, #16]
 8008652:	1b12      	subs	r2, r2, r4
 8008654:	d10e      	bne.n	8008674 <__mcmp+0x28>
 8008656:	f100 0314 	add.w	r3, r0, #20
 800865a:	3114      	adds	r1, #20
 800865c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800866c:	42a5      	cmp	r5, r4
 800866e:	d003      	beq.n	8008678 <__mcmp+0x2c>
 8008670:	d305      	bcc.n	800867e <__mcmp+0x32>
 8008672:	2201      	movs	r2, #1
 8008674:	4610      	mov	r0, r2
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	4283      	cmp	r3, r0
 800867a:	d3f3      	bcc.n	8008664 <__mcmp+0x18>
 800867c:	e7fa      	b.n	8008674 <__mcmp+0x28>
 800867e:	f04f 32ff 	mov.w	r2, #4294967295
 8008682:	e7f7      	b.n	8008674 <__mcmp+0x28>

08008684 <__mdiff>:
 8008684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	4606      	mov	r6, r0
 800868c:	4611      	mov	r1, r2
 800868e:	4620      	mov	r0, r4
 8008690:	4690      	mov	r8, r2
 8008692:	f7ff ffdb 	bl	800864c <__mcmp>
 8008696:	1e05      	subs	r5, r0, #0
 8008698:	d110      	bne.n	80086bc <__mdiff+0x38>
 800869a:	4629      	mov	r1, r5
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff fd59 	bl	8008154 <_Balloc>
 80086a2:	b930      	cbnz	r0, 80086b2 <__mdiff+0x2e>
 80086a4:	4b3a      	ldr	r3, [pc, #232]	; (8008790 <__mdiff+0x10c>)
 80086a6:	4602      	mov	r2, r0
 80086a8:	f240 2137 	movw	r1, #567	; 0x237
 80086ac:	4839      	ldr	r0, [pc, #228]	; (8008794 <__mdiff+0x110>)
 80086ae:	f000 f98b 	bl	80089c8 <__assert_func>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086bc:	bfa4      	itt	ge
 80086be:	4643      	movge	r3, r8
 80086c0:	46a0      	movge	r8, r4
 80086c2:	4630      	mov	r0, r6
 80086c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c8:	bfa6      	itte	ge
 80086ca:	461c      	movge	r4, r3
 80086cc:	2500      	movge	r5, #0
 80086ce:	2501      	movlt	r5, #1
 80086d0:	f7ff fd40 	bl	8008154 <_Balloc>
 80086d4:	b920      	cbnz	r0, 80086e0 <__mdiff+0x5c>
 80086d6:	4b2e      	ldr	r3, [pc, #184]	; (8008790 <__mdiff+0x10c>)
 80086d8:	4602      	mov	r2, r0
 80086da:	f240 2145 	movw	r1, #581	; 0x245
 80086de:	e7e5      	b.n	80086ac <__mdiff+0x28>
 80086e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086e4:	6926      	ldr	r6, [r4, #16]
 80086e6:	60c5      	str	r5, [r0, #12]
 80086e8:	f104 0914 	add.w	r9, r4, #20
 80086ec:	f108 0514 	add.w	r5, r8, #20
 80086f0:	f100 0e14 	add.w	lr, r0, #20
 80086f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086fc:	f108 0210 	add.w	r2, r8, #16
 8008700:	46f2      	mov	sl, lr
 8008702:	2100      	movs	r1, #0
 8008704:	f859 3b04 	ldr.w	r3, [r9], #4
 8008708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800870c:	fa11 f88b 	uxtah	r8, r1, fp
 8008710:	b299      	uxth	r1, r3
 8008712:	0c1b      	lsrs	r3, r3, #16
 8008714:	eba8 0801 	sub.w	r8, r8, r1
 8008718:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800871c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008720:	fa1f f888 	uxth.w	r8, r8
 8008724:	1419      	asrs	r1, r3, #16
 8008726:	454e      	cmp	r6, r9
 8008728:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800872c:	f84a 3b04 	str.w	r3, [sl], #4
 8008730:	d8e8      	bhi.n	8008704 <__mdiff+0x80>
 8008732:	1b33      	subs	r3, r6, r4
 8008734:	3b15      	subs	r3, #21
 8008736:	f023 0303 	bic.w	r3, r3, #3
 800873a:	3304      	adds	r3, #4
 800873c:	3415      	adds	r4, #21
 800873e:	42a6      	cmp	r6, r4
 8008740:	bf38      	it	cc
 8008742:	2304      	movcc	r3, #4
 8008744:	441d      	add	r5, r3
 8008746:	4473      	add	r3, lr
 8008748:	469e      	mov	lr, r3
 800874a:	462e      	mov	r6, r5
 800874c:	4566      	cmp	r6, ip
 800874e:	d30e      	bcc.n	800876e <__mdiff+0xea>
 8008750:	f10c 0203 	add.w	r2, ip, #3
 8008754:	1b52      	subs	r2, r2, r5
 8008756:	f022 0203 	bic.w	r2, r2, #3
 800875a:	3d03      	subs	r5, #3
 800875c:	45ac      	cmp	ip, r5
 800875e:	bf38      	it	cc
 8008760:	2200      	movcc	r2, #0
 8008762:	4413      	add	r3, r2
 8008764:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008768:	b17a      	cbz	r2, 800878a <__mdiff+0x106>
 800876a:	6107      	str	r7, [r0, #16]
 800876c:	e7a4      	b.n	80086b8 <__mdiff+0x34>
 800876e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008772:	fa11 f288 	uxtah	r2, r1, r8
 8008776:	1414      	asrs	r4, r2, #16
 8008778:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800877c:	b292      	uxth	r2, r2
 800877e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008782:	f84e 2b04 	str.w	r2, [lr], #4
 8008786:	1421      	asrs	r1, r4, #16
 8008788:	e7e0      	b.n	800874c <__mdiff+0xc8>
 800878a:	3f01      	subs	r7, #1
 800878c:	e7ea      	b.n	8008764 <__mdiff+0xe0>
 800878e:	bf00      	nop
 8008790:	080090ec 	.word	0x080090ec
 8008794:	080090fd 	.word	0x080090fd

08008798 <__d2b>:
 8008798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800879c:	460f      	mov	r7, r1
 800879e:	2101      	movs	r1, #1
 80087a0:	ec59 8b10 	vmov	r8, r9, d0
 80087a4:	4616      	mov	r6, r2
 80087a6:	f7ff fcd5 	bl	8008154 <_Balloc>
 80087aa:	4604      	mov	r4, r0
 80087ac:	b930      	cbnz	r0, 80087bc <__d2b+0x24>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4b24      	ldr	r3, [pc, #144]	; (8008844 <__d2b+0xac>)
 80087b2:	4825      	ldr	r0, [pc, #148]	; (8008848 <__d2b+0xb0>)
 80087b4:	f240 310f 	movw	r1, #783	; 0x30f
 80087b8:	f000 f906 	bl	80089c8 <__assert_func>
 80087bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c4:	bb2d      	cbnz	r5, 8008812 <__d2b+0x7a>
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	f1b8 0300 	subs.w	r3, r8, #0
 80087cc:	d026      	beq.n	800881c <__d2b+0x84>
 80087ce:	4668      	mov	r0, sp
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	f7ff fd87 	bl	80082e4 <__lo0bits>
 80087d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087da:	b1e8      	cbz	r0, 8008818 <__d2b+0x80>
 80087dc:	f1c0 0320 	rsb	r3, r0, #32
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	430b      	orrs	r3, r1
 80087e6:	40c2      	lsrs	r2, r0
 80087e8:	6163      	str	r3, [r4, #20]
 80087ea:	9201      	str	r2, [sp, #4]
 80087ec:	9b01      	ldr	r3, [sp, #4]
 80087ee:	61a3      	str	r3, [r4, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf14      	ite	ne
 80087f4:	2202      	movne	r2, #2
 80087f6:	2201      	moveq	r2, #1
 80087f8:	6122      	str	r2, [r4, #16]
 80087fa:	b1bd      	cbz	r5, 800882c <__d2b+0x94>
 80087fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008800:	4405      	add	r5, r0
 8008802:	603d      	str	r5, [r7, #0]
 8008804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008808:	6030      	str	r0, [r6, #0]
 800880a:	4620      	mov	r0, r4
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008816:	e7d6      	b.n	80087c6 <__d2b+0x2e>
 8008818:	6161      	str	r1, [r4, #20]
 800881a:	e7e7      	b.n	80087ec <__d2b+0x54>
 800881c:	a801      	add	r0, sp, #4
 800881e:	f7ff fd61 	bl	80082e4 <__lo0bits>
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	6163      	str	r3, [r4, #20]
 8008826:	3020      	adds	r0, #32
 8008828:	2201      	movs	r2, #1
 800882a:	e7e5      	b.n	80087f8 <__d2b+0x60>
 800882c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008834:	6038      	str	r0, [r7, #0]
 8008836:	6918      	ldr	r0, [r3, #16]
 8008838:	f7ff fd34 	bl	80082a4 <__hi0bits>
 800883c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008840:	e7e2      	b.n	8008808 <__d2b+0x70>
 8008842:	bf00      	nop
 8008844:	080090ec 	.word	0x080090ec
 8008848:	080090fd 	.word	0x080090fd

0800884c <__sflush_r>:
 800884c:	898a      	ldrh	r2, [r1, #12]
 800884e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	4605      	mov	r5, r0
 8008854:	0710      	lsls	r0, r2, #28
 8008856:	460c      	mov	r4, r1
 8008858:	d458      	bmi.n	800890c <__sflush_r+0xc0>
 800885a:	684b      	ldr	r3, [r1, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dc05      	bgt.n	800886c <__sflush_r+0x20>
 8008860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc02      	bgt.n	800886c <__sflush_r+0x20>
 8008866:	2000      	movs	r0, #0
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800886c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800886e:	2e00      	cmp	r6, #0
 8008870:	d0f9      	beq.n	8008866 <__sflush_r+0x1a>
 8008872:	2300      	movs	r3, #0
 8008874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008878:	682f      	ldr	r7, [r5, #0]
 800887a:	6a21      	ldr	r1, [r4, #32]
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	d032      	beq.n	80088e6 <__sflush_r+0x9a>
 8008880:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	075a      	lsls	r2, r3, #29
 8008886:	d505      	bpl.n	8008894 <__sflush_r+0x48>
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	1ac0      	subs	r0, r0, r3
 800888c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800888e:	b10b      	cbz	r3, 8008894 <__sflush_r+0x48>
 8008890:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008892:	1ac0      	subs	r0, r0, r3
 8008894:	2300      	movs	r3, #0
 8008896:	4602      	mov	r2, r0
 8008898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889a:	6a21      	ldr	r1, [r4, #32]
 800889c:	4628      	mov	r0, r5
 800889e:	47b0      	blx	r6
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	d106      	bne.n	80088b4 <__sflush_r+0x68>
 80088a6:	6829      	ldr	r1, [r5, #0]
 80088a8:	291d      	cmp	r1, #29
 80088aa:	d82b      	bhi.n	8008904 <__sflush_r+0xb8>
 80088ac:	4a29      	ldr	r2, [pc, #164]	; (8008954 <__sflush_r+0x108>)
 80088ae:	410a      	asrs	r2, r1
 80088b0:	07d6      	lsls	r6, r2, #31
 80088b2:	d427      	bmi.n	8008904 <__sflush_r+0xb8>
 80088b4:	2200      	movs	r2, #0
 80088b6:	6062      	str	r2, [r4, #4]
 80088b8:	04d9      	lsls	r1, r3, #19
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	d504      	bpl.n	80088ca <__sflush_r+0x7e>
 80088c0:	1c42      	adds	r2, r0, #1
 80088c2:	d101      	bne.n	80088c8 <__sflush_r+0x7c>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b903      	cbnz	r3, 80088ca <__sflush_r+0x7e>
 80088c8:	6560      	str	r0, [r4, #84]	; 0x54
 80088ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088cc:	602f      	str	r7, [r5, #0]
 80088ce:	2900      	cmp	r1, #0
 80088d0:	d0c9      	beq.n	8008866 <__sflush_r+0x1a>
 80088d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d002      	beq.n	80088e0 <__sflush_r+0x94>
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fb3a 	bl	8007f54 <_free_r>
 80088e0:	2000      	movs	r0, #0
 80088e2:	6360      	str	r0, [r4, #52]	; 0x34
 80088e4:	e7c0      	b.n	8008868 <__sflush_r+0x1c>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	1c41      	adds	r1, r0, #1
 80088ee:	d1c8      	bne.n	8008882 <__sflush_r+0x36>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0c5      	beq.n	8008882 <__sflush_r+0x36>
 80088f6:	2b1d      	cmp	r3, #29
 80088f8:	d001      	beq.n	80088fe <__sflush_r+0xb2>
 80088fa:	2b16      	cmp	r3, #22
 80088fc:	d101      	bne.n	8008902 <__sflush_r+0xb6>
 80088fe:	602f      	str	r7, [r5, #0]
 8008900:	e7b1      	b.n	8008866 <__sflush_r+0x1a>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	e7ad      	b.n	8008868 <__sflush_r+0x1c>
 800890c:	690f      	ldr	r7, [r1, #16]
 800890e:	2f00      	cmp	r7, #0
 8008910:	d0a9      	beq.n	8008866 <__sflush_r+0x1a>
 8008912:	0793      	lsls	r3, r2, #30
 8008914:	680e      	ldr	r6, [r1, #0]
 8008916:	bf08      	it	eq
 8008918:	694b      	ldreq	r3, [r1, #20]
 800891a:	600f      	str	r7, [r1, #0]
 800891c:	bf18      	it	ne
 800891e:	2300      	movne	r3, #0
 8008920:	eba6 0807 	sub.w	r8, r6, r7
 8008924:	608b      	str	r3, [r1, #8]
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	dd9c      	ble.n	8008866 <__sflush_r+0x1a>
 800892c:	6a21      	ldr	r1, [r4, #32]
 800892e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008930:	4643      	mov	r3, r8
 8008932:	463a      	mov	r2, r7
 8008934:	4628      	mov	r0, r5
 8008936:	47b0      	blx	r6
 8008938:	2800      	cmp	r0, #0
 800893a:	dc06      	bgt.n	800894a <__sflush_r+0xfe>
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e78e      	b.n	8008868 <__sflush_r+0x1c>
 800894a:	4407      	add	r7, r0
 800894c:	eba8 0800 	sub.w	r8, r8, r0
 8008950:	e7e9      	b.n	8008926 <__sflush_r+0xda>
 8008952:	bf00      	nop
 8008954:	dfbffffe 	.word	0xdfbffffe

08008958 <_fflush_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	b913      	cbnz	r3, 8008968 <_fflush_r+0x10>
 8008962:	2500      	movs	r5, #0
 8008964:	4628      	mov	r0, r5
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	b118      	cbz	r0, 8008972 <_fflush_r+0x1a>
 800896a:	6a03      	ldr	r3, [r0, #32]
 800896c:	b90b      	cbnz	r3, 8008972 <_fflush_r+0x1a>
 800896e:	f7fe fb6f 	bl	8007050 <__sinit>
 8008972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f3      	beq.n	8008962 <_fflush_r+0xa>
 800897a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800897c:	07d0      	lsls	r0, r2, #31
 800897e:	d404      	bmi.n	800898a <_fflush_r+0x32>
 8008980:	0599      	lsls	r1, r3, #22
 8008982:	d402      	bmi.n	800898a <_fflush_r+0x32>
 8008984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008986:	f7fe fc5a 	bl	800723e <__retarget_lock_acquire_recursive>
 800898a:	4628      	mov	r0, r5
 800898c:	4621      	mov	r1, r4
 800898e:	f7ff ff5d 	bl	800884c <__sflush_r>
 8008992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008994:	07da      	lsls	r2, r3, #31
 8008996:	4605      	mov	r5, r0
 8008998:	d4e4      	bmi.n	8008964 <_fflush_r+0xc>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	059b      	lsls	r3, r3, #22
 800899e:	d4e1      	bmi.n	8008964 <_fflush_r+0xc>
 80089a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a2:	f7fe fc4d 	bl	8007240 <__retarget_lock_release_recursive>
 80089a6:	e7dd      	b.n	8008964 <_fflush_r+0xc>

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f8 ffa0 	bl	80018f8 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20004430 	.word	0x20004430

080089c8 <__assert_func>:
 80089c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ca:	4614      	mov	r4, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <__assert_func+0x2c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	68d8      	ldr	r0, [r3, #12]
 80089d6:	b14c      	cbz	r4, 80089ec <__assert_func+0x24>
 80089d8:	4b07      	ldr	r3, [pc, #28]	; (80089f8 <__assert_func+0x30>)
 80089da:	9100      	str	r1, [sp, #0]
 80089dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089e0:	4906      	ldr	r1, [pc, #24]	; (80089fc <__assert_func+0x34>)
 80089e2:	462b      	mov	r3, r5
 80089e4:	f000 f844 	bl	8008a70 <fiprintf>
 80089e8:	f000 f854 	bl	8008a94 <abort>
 80089ec:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <__assert_func+0x38>)
 80089ee:	461c      	mov	r4, r3
 80089f0:	e7f3      	b.n	80089da <__assert_func+0x12>
 80089f2:	bf00      	nop
 80089f4:	20000068 	.word	0x20000068
 80089f8:	0800925e 	.word	0x0800925e
 80089fc:	0800926b 	.word	0x0800926b
 8008a00:	08009299 	.word	0x08009299

08008a04 <_calloc_r>:
 8008a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a06:	fba1 2402 	umull	r2, r4, r1, r2
 8008a0a:	b94c      	cbnz	r4, 8008a20 <_calloc_r+0x1c>
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	f7ff fb14 	bl	800803c <_malloc_r>
 8008a14:	9a01      	ldr	r2, [sp, #4]
 8008a16:	4605      	mov	r5, r0
 8008a18:	b930      	cbnz	r0, 8008a28 <_calloc_r+0x24>
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	b003      	add	sp, #12
 8008a1e:	bd30      	pop	{r4, r5, pc}
 8008a20:	220c      	movs	r2, #12
 8008a22:	6002      	str	r2, [r0, #0]
 8008a24:	2500      	movs	r5, #0
 8008a26:	e7f8      	b.n	8008a1a <_calloc_r+0x16>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f7fe fb8a 	bl	8007142 <memset>
 8008a2e:	e7f4      	b.n	8008a1a <_calloc_r+0x16>

08008a30 <__ascii_mbtowc>:
 8008a30:	b082      	sub	sp, #8
 8008a32:	b901      	cbnz	r1, 8008a36 <__ascii_mbtowc+0x6>
 8008a34:	a901      	add	r1, sp, #4
 8008a36:	b142      	cbz	r2, 8008a4a <__ascii_mbtowc+0x1a>
 8008a38:	b14b      	cbz	r3, 8008a4e <__ascii_mbtowc+0x1e>
 8008a3a:	7813      	ldrb	r3, [r2, #0]
 8008a3c:	600b      	str	r3, [r1, #0]
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	1e10      	subs	r0, r2, #0
 8008a42:	bf18      	it	ne
 8008a44:	2001      	movne	r0, #1
 8008a46:	b002      	add	sp, #8
 8008a48:	4770      	bx	lr
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	e7fb      	b.n	8008a46 <__ascii_mbtowc+0x16>
 8008a4e:	f06f 0001 	mvn.w	r0, #1
 8008a52:	e7f8      	b.n	8008a46 <__ascii_mbtowc+0x16>

08008a54 <__ascii_wctomb>:
 8008a54:	b149      	cbz	r1, 8008a6a <__ascii_wctomb+0x16>
 8008a56:	2aff      	cmp	r2, #255	; 0xff
 8008a58:	bf85      	ittet	hi
 8008a5a:	238a      	movhi	r3, #138	; 0x8a
 8008a5c:	6003      	strhi	r3, [r0, #0]
 8008a5e:	700a      	strbls	r2, [r1, #0]
 8008a60:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a64:	bf98      	it	ls
 8008a66:	2001      	movls	r0, #1
 8008a68:	4770      	bx	lr
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	4770      	bx	lr
	...

08008a70 <fiprintf>:
 8008a70:	b40e      	push	{r1, r2, r3}
 8008a72:	b503      	push	{r0, r1, lr}
 8008a74:	4601      	mov	r1, r0
 8008a76:	ab03      	add	r3, sp, #12
 8008a78:	4805      	ldr	r0, [pc, #20]	; (8008a90 <fiprintf+0x20>)
 8008a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7e:	6800      	ldr	r0, [r0, #0]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f000 f837 	bl	8008af4 <_vfiprintf_r>
 8008a86:	b002      	add	sp, #8
 8008a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a8c:	b003      	add	sp, #12
 8008a8e:	4770      	bx	lr
 8008a90:	20000068 	.word	0x20000068

08008a94 <abort>:
 8008a94:	b508      	push	{r3, lr}
 8008a96:	2006      	movs	r0, #6
 8008a98:	f000 fa04 	bl	8008ea4 <raise>
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	f7f8 feb3 	bl	8001808 <_exit>

08008aa2 <__sfputc_r>:
 8008aa2:	6893      	ldr	r3, [r2, #8]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	b410      	push	{r4}
 8008aaa:	6093      	str	r3, [r2, #8]
 8008aac:	da08      	bge.n	8008ac0 <__sfputc_r+0x1e>
 8008aae:	6994      	ldr	r4, [r2, #24]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	db01      	blt.n	8008ab8 <__sfputc_r+0x16>
 8008ab4:	290a      	cmp	r1, #10
 8008ab6:	d103      	bne.n	8008ac0 <__sfputc_r+0x1e>
 8008ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008abc:	f000 b934 	b.w	8008d28 <__swbuf_r>
 8008ac0:	6813      	ldr	r3, [r2, #0]
 8008ac2:	1c58      	adds	r0, r3, #1
 8008ac4:	6010      	str	r0, [r2, #0]
 8008ac6:	7019      	strb	r1, [r3, #0]
 8008ac8:	4608      	mov	r0, r1
 8008aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <__sfputs_r>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	18d5      	adds	r5, r2, r3
 8008ada:	42ac      	cmp	r4, r5
 8008adc:	d101      	bne.n	8008ae2 <__sfputs_r+0x12>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e007      	b.n	8008af2 <__sfputs_r+0x22>
 8008ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ffda 	bl	8008aa2 <__sfputc_r>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d1f3      	bne.n	8008ada <__sfputs_r+0xa>
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008af4 <_vfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	460d      	mov	r5, r1
 8008afa:	b09d      	sub	sp, #116	; 0x74
 8008afc:	4614      	mov	r4, r2
 8008afe:	4698      	mov	r8, r3
 8008b00:	4606      	mov	r6, r0
 8008b02:	b118      	cbz	r0, 8008b0c <_vfiprintf_r+0x18>
 8008b04:	6a03      	ldr	r3, [r0, #32]
 8008b06:	b90b      	cbnz	r3, 8008b0c <_vfiprintf_r+0x18>
 8008b08:	f7fe faa2 	bl	8007050 <__sinit>
 8008b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0e:	07d9      	lsls	r1, r3, #31
 8008b10:	d405      	bmi.n	8008b1e <_vfiprintf_r+0x2a>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	059a      	lsls	r2, r3, #22
 8008b16:	d402      	bmi.n	8008b1e <_vfiprintf_r+0x2a>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f7fe fb90 	bl	800723e <__retarget_lock_acquire_recursive>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	071b      	lsls	r3, r3, #28
 8008b22:	d501      	bpl.n	8008b28 <_vfiprintf_r+0x34>
 8008b24:	692b      	ldr	r3, [r5, #16]
 8008b26:	b99b      	cbnz	r3, 8008b50 <_vfiprintf_r+0x5c>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f93a 	bl	8008da4 <__swsetup_r>
 8008b30:	b170      	cbz	r0, 8008b50 <_vfiprintf_r+0x5c>
 8008b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b34:	07dc      	lsls	r4, r3, #31
 8008b36:	d504      	bpl.n	8008b42 <_vfiprintf_r+0x4e>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b01d      	add	sp, #116	; 0x74
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	89ab      	ldrh	r3, [r5, #12]
 8008b44:	0598      	lsls	r0, r3, #22
 8008b46:	d4f7      	bmi.n	8008b38 <_vfiprintf_r+0x44>
 8008b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b4a:	f7fe fb79 	bl	8007240 <__retarget_lock_release_recursive>
 8008b4e:	e7f3      	b.n	8008b38 <_vfiprintf_r+0x44>
 8008b50:	2300      	movs	r3, #0
 8008b52:	9309      	str	r3, [sp, #36]	; 0x24
 8008b54:	2320      	movs	r3, #32
 8008b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b5e:	2330      	movs	r3, #48	; 0x30
 8008b60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d14 <_vfiprintf_r+0x220>
 8008b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b68:	f04f 0901 	mov.w	r9, #1
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	469a      	mov	sl, r3
 8008b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b74:	b10a      	cbz	r2, 8008b7a <_vfiprintf_r+0x86>
 8008b76:	2a25      	cmp	r2, #37	; 0x25
 8008b78:	d1f9      	bne.n	8008b6e <_vfiprintf_r+0x7a>
 8008b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b7e:	d00b      	beq.n	8008b98 <_vfiprintf_r+0xa4>
 8008b80:	465b      	mov	r3, fp
 8008b82:	4622      	mov	r2, r4
 8008b84:	4629      	mov	r1, r5
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ffa2 	bl	8008ad0 <__sfputs_r>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f000 80a9 	beq.w	8008ce4 <_vfiprintf_r+0x1f0>
 8008b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b94:	445a      	add	r2, fp
 8008b96:	9209      	str	r2, [sp, #36]	; 0x24
 8008b98:	f89a 3000 	ldrb.w	r3, [sl]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80a1 	beq.w	8008ce4 <_vfiprintf_r+0x1f0>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bac:	f10a 0a01 	add.w	sl, sl, #1
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	9307      	str	r3, [sp, #28]
 8008bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bba:	4654      	mov	r4, sl
 8008bbc:	2205      	movs	r2, #5
 8008bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc2:	4854      	ldr	r0, [pc, #336]	; (8008d14 <_vfiprintf_r+0x220>)
 8008bc4:	f7f7 fb24 	bl	8000210 <memchr>
 8008bc8:	9a04      	ldr	r2, [sp, #16]
 8008bca:	b9d8      	cbnz	r0, 8008c04 <_vfiprintf_r+0x110>
 8008bcc:	06d1      	lsls	r1, r2, #27
 8008bce:	bf44      	itt	mi
 8008bd0:	2320      	movmi	r3, #32
 8008bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bd6:	0713      	lsls	r3, r2, #28
 8008bd8:	bf44      	itt	mi
 8008bda:	232b      	movmi	r3, #43	; 0x2b
 8008bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be0:	f89a 3000 	ldrb.w	r3, [sl]
 8008be4:	2b2a      	cmp	r3, #42	; 0x2a
 8008be6:	d015      	beq.n	8008c14 <_vfiprintf_r+0x120>
 8008be8:	9a07      	ldr	r2, [sp, #28]
 8008bea:	4654      	mov	r4, sl
 8008bec:	2000      	movs	r0, #0
 8008bee:	f04f 0c0a 	mov.w	ip, #10
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf8:	3b30      	subs	r3, #48	; 0x30
 8008bfa:	2b09      	cmp	r3, #9
 8008bfc:	d94d      	bls.n	8008c9a <_vfiprintf_r+0x1a6>
 8008bfe:	b1b0      	cbz	r0, 8008c2e <_vfiprintf_r+0x13a>
 8008c00:	9207      	str	r2, [sp, #28]
 8008c02:	e014      	b.n	8008c2e <_vfiprintf_r+0x13a>
 8008c04:	eba0 0308 	sub.w	r3, r0, r8
 8008c08:	fa09 f303 	lsl.w	r3, r9, r3
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	46a2      	mov	sl, r4
 8008c12:	e7d2      	b.n	8008bba <_vfiprintf_r+0xc6>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	1d19      	adds	r1, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	9103      	str	r1, [sp, #12]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfbb      	ittet	lt
 8008c20:	425b      	neglt	r3, r3
 8008c22:	f042 0202 	orrlt.w	r2, r2, #2
 8008c26:	9307      	strge	r3, [sp, #28]
 8008c28:	9307      	strlt	r3, [sp, #28]
 8008c2a:	bfb8      	it	lt
 8008c2c:	9204      	strlt	r2, [sp, #16]
 8008c2e:	7823      	ldrb	r3, [r4, #0]
 8008c30:	2b2e      	cmp	r3, #46	; 0x2e
 8008c32:	d10c      	bne.n	8008c4e <_vfiprintf_r+0x15a>
 8008c34:	7863      	ldrb	r3, [r4, #1]
 8008c36:	2b2a      	cmp	r3, #42	; 0x2a
 8008c38:	d134      	bne.n	8008ca4 <_vfiprintf_r+0x1b0>
 8008c3a:	9b03      	ldr	r3, [sp, #12]
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	9203      	str	r2, [sp, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfb8      	it	lt
 8008c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c4a:	3402      	adds	r4, #2
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d24 <_vfiprintf_r+0x230>
 8008c52:	7821      	ldrb	r1, [r4, #0]
 8008c54:	2203      	movs	r2, #3
 8008c56:	4650      	mov	r0, sl
 8008c58:	f7f7 fada 	bl	8000210 <memchr>
 8008c5c:	b138      	cbz	r0, 8008c6e <_vfiprintf_r+0x17a>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	eba0 000a 	sub.w	r0, r0, sl
 8008c64:	2240      	movs	r2, #64	; 0x40
 8008c66:	4082      	lsls	r2, r0
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	3401      	adds	r4, #1
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c72:	4829      	ldr	r0, [pc, #164]	; (8008d18 <_vfiprintf_r+0x224>)
 8008c74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c78:	2206      	movs	r2, #6
 8008c7a:	f7f7 fac9 	bl	8000210 <memchr>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d03f      	beq.n	8008d02 <_vfiprintf_r+0x20e>
 8008c82:	4b26      	ldr	r3, [pc, #152]	; (8008d1c <_vfiprintf_r+0x228>)
 8008c84:	bb1b      	cbnz	r3, 8008cce <_vfiprintf_r+0x1da>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	f023 0307 	bic.w	r3, r3, #7
 8008c8e:	3308      	adds	r3, #8
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c94:	443b      	add	r3, r7
 8008c96:	9309      	str	r3, [sp, #36]	; 0x24
 8008c98:	e768      	b.n	8008b6c <_vfiprintf_r+0x78>
 8008c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	e7a6      	b.n	8008bf2 <_vfiprintf_r+0xfe>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	3401      	adds	r4, #1
 8008ca8:	9305      	str	r3, [sp, #20]
 8008caa:	4619      	mov	r1, r3
 8008cac:	f04f 0c0a 	mov.w	ip, #10
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cb6:	3a30      	subs	r2, #48	; 0x30
 8008cb8:	2a09      	cmp	r2, #9
 8008cba:	d903      	bls.n	8008cc4 <_vfiprintf_r+0x1d0>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0c6      	beq.n	8008c4e <_vfiprintf_r+0x15a>
 8008cc0:	9105      	str	r1, [sp, #20]
 8008cc2:	e7c4      	b.n	8008c4e <_vfiprintf_r+0x15a>
 8008cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cc8:	4604      	mov	r4, r0
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e7f0      	b.n	8008cb0 <_vfiprintf_r+0x1bc>
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	462a      	mov	r2, r5
 8008cd4:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <_vfiprintf_r+0x22c>)
 8008cd6:	a904      	add	r1, sp, #16
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7fd fd67 	bl	80067ac <_printf_float>
 8008cde:	4607      	mov	r7, r0
 8008ce0:	1c78      	adds	r0, r7, #1
 8008ce2:	d1d6      	bne.n	8008c92 <_vfiprintf_r+0x19e>
 8008ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_vfiprintf_r+0x202>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_vfiprintf_r+0x202>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cf2:	f7fe faa5 	bl	8007240 <__retarget_lock_release_recursive>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	065b      	lsls	r3, r3, #25
 8008cfa:	f53f af1d 	bmi.w	8008b38 <_vfiprintf_r+0x44>
 8008cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d00:	e71c      	b.n	8008b3c <_vfiprintf_r+0x48>
 8008d02:	ab03      	add	r3, sp, #12
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	462a      	mov	r2, r5
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <_vfiprintf_r+0x22c>)
 8008d0a:	a904      	add	r1, sp, #16
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7fd fff1 	bl	8006cf4 <_printf_i>
 8008d12:	e7e4      	b.n	8008cde <_vfiprintf_r+0x1ea>
 8008d14:	0800939b 	.word	0x0800939b
 8008d18:	080093a5 	.word	0x080093a5
 8008d1c:	080067ad 	.word	0x080067ad
 8008d20:	08008ad1 	.word	0x08008ad1
 8008d24:	080093a1 	.word	0x080093a1

08008d28 <__swbuf_r>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	460e      	mov	r6, r1
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b118      	cbz	r0, 8008d3a <__swbuf_r+0x12>
 8008d32:	6a03      	ldr	r3, [r0, #32]
 8008d34:	b90b      	cbnz	r3, 8008d3a <__swbuf_r+0x12>
 8008d36:	f7fe f98b 	bl	8007050 <__sinit>
 8008d3a:	69a3      	ldr	r3, [r4, #24]
 8008d3c:	60a3      	str	r3, [r4, #8]
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	071a      	lsls	r2, r3, #28
 8008d42:	d525      	bpl.n	8008d90 <__swbuf_r+0x68>
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	b31b      	cbz	r3, 8008d90 <__swbuf_r+0x68>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	1a98      	subs	r0, r3, r2
 8008d4e:	6963      	ldr	r3, [r4, #20]
 8008d50:	b2f6      	uxtb	r6, r6
 8008d52:	4283      	cmp	r3, r0
 8008d54:	4637      	mov	r7, r6
 8008d56:	dc04      	bgt.n	8008d62 <__swbuf_r+0x3a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7ff fdfc 	bl	8008958 <_fflush_r>
 8008d60:	b9e0      	cbnz	r0, 8008d9c <__swbuf_r+0x74>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	60a3      	str	r3, [r4, #8]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	701e      	strb	r6, [r3, #0]
 8008d70:	6962      	ldr	r2, [r4, #20]
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d004      	beq.n	8008d82 <__swbuf_r+0x5a>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d506      	bpl.n	8008d8c <__swbuf_r+0x64>
 8008d7e:	2e0a      	cmp	r6, #10
 8008d80:	d104      	bne.n	8008d8c <__swbuf_r+0x64>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7ff fde7 	bl	8008958 <_fflush_r>
 8008d8a:	b938      	cbnz	r0, 8008d9c <__swbuf_r+0x74>
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d90:	4621      	mov	r1, r4
 8008d92:	4628      	mov	r0, r5
 8008d94:	f000 f806 	bl	8008da4 <__swsetup_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0d5      	beq.n	8008d48 <__swbuf_r+0x20>
 8008d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8008da0:	e7f4      	b.n	8008d8c <__swbuf_r+0x64>
	...

08008da4 <__swsetup_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4b2a      	ldr	r3, [pc, #168]	; (8008e50 <__swsetup_r+0xac>)
 8008da8:	4605      	mov	r5, r0
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	460c      	mov	r4, r1
 8008dae:	b118      	cbz	r0, 8008db8 <__swsetup_r+0x14>
 8008db0:	6a03      	ldr	r3, [r0, #32]
 8008db2:	b90b      	cbnz	r3, 8008db8 <__swsetup_r+0x14>
 8008db4:	f7fe f94c 	bl	8007050 <__sinit>
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dbe:	0718      	lsls	r0, r3, #28
 8008dc0:	d422      	bmi.n	8008e08 <__swsetup_r+0x64>
 8008dc2:	06d9      	lsls	r1, r3, #27
 8008dc4:	d407      	bmi.n	8008dd6 <__swsetup_r+0x32>
 8008dc6:	2309      	movs	r3, #9
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	e034      	b.n	8008e40 <__swsetup_r+0x9c>
 8008dd6:	0758      	lsls	r0, r3, #29
 8008dd8:	d512      	bpl.n	8008e00 <__swsetup_r+0x5c>
 8008dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ddc:	b141      	cbz	r1, 8008df0 <__swsetup_r+0x4c>
 8008dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008de2:	4299      	cmp	r1, r3
 8008de4:	d002      	beq.n	8008dec <__swsetup_r+0x48>
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7ff f8b4 	bl	8007f54 <_free_r>
 8008dec:	2300      	movs	r3, #0
 8008dee:	6363      	str	r3, [r4, #52]	; 0x34
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008df6:	81a3      	strh	r3, [r4, #12]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	6063      	str	r3, [r4, #4]
 8008dfc:	6923      	ldr	r3, [r4, #16]
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0308 	orr.w	r3, r3, #8
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	b94b      	cbnz	r3, 8008e20 <__swsetup_r+0x7c>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e16:	d003      	beq.n	8008e20 <__swsetup_r+0x7c>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f000 f884 	bl	8008f28 <__smakebuf_r>
 8008e20:	89a0      	ldrh	r0, [r4, #12]
 8008e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e26:	f010 0301 	ands.w	r3, r0, #1
 8008e2a:	d00a      	beq.n	8008e42 <__swsetup_r+0x9e>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	6963      	ldr	r3, [r4, #20]
 8008e32:	425b      	negs	r3, r3
 8008e34:	61a3      	str	r3, [r4, #24]
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	b943      	cbnz	r3, 8008e4c <__swsetup_r+0xa8>
 8008e3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e3e:	d1c4      	bne.n	8008dca <__swsetup_r+0x26>
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	0781      	lsls	r1, r0, #30
 8008e44:	bf58      	it	pl
 8008e46:	6963      	ldrpl	r3, [r4, #20]
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	e7f4      	b.n	8008e36 <__swsetup_r+0x92>
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e7f7      	b.n	8008e40 <__swsetup_r+0x9c>
 8008e50:	20000068 	.word	0x20000068

08008e54 <_raise_r>:
 8008e54:	291f      	cmp	r1, #31
 8008e56:	b538      	push	{r3, r4, r5, lr}
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	d904      	bls.n	8008e68 <_raise_r+0x14>
 8008e5e:	2316      	movs	r3, #22
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e6a:	b112      	cbz	r2, 8008e72 <_raise_r+0x1e>
 8008e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e70:	b94b      	cbnz	r3, 8008e86 <_raise_r+0x32>
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f830 	bl	8008ed8 <_getpid_r>
 8008e78:	462a      	mov	r2, r5
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e82:	f000 b817 	b.w	8008eb4 <_kill_r>
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d00a      	beq.n	8008ea0 <_raise_r+0x4c>
 8008e8a:	1c59      	adds	r1, r3, #1
 8008e8c:	d103      	bne.n	8008e96 <_raise_r+0x42>
 8008e8e:	2316      	movs	r3, #22
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	2001      	movs	r0, #1
 8008e94:	e7e7      	b.n	8008e66 <_raise_r+0x12>
 8008e96:	2400      	movs	r4, #0
 8008e98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	4798      	blx	r3
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7e0      	b.n	8008e66 <_raise_r+0x12>

08008ea4 <raise>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <raise+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f7ff bfd3 	b.w	8008e54 <_raise_r>
 8008eae:	bf00      	nop
 8008eb0:	20000068 	.word	0x20000068

08008eb4 <_kill_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_kill_r+0x20>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f7f8 fc91 	bl	80017e8 <_kill>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	d102      	bne.n	8008ed0 <_kill_r+0x1c>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b103      	cbz	r3, 8008ed0 <_kill_r+0x1c>
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	bd38      	pop	{r3, r4, r5, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20004430 	.word	0x20004430

08008ed8 <_getpid_r>:
 8008ed8:	f7f8 bc7e 	b.w	80017d8 <_getpid>

08008edc <__swhatbuf_r>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	460c      	mov	r4, r1
 8008ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	b096      	sub	sp, #88	; 0x58
 8008ee8:	4615      	mov	r5, r2
 8008eea:	461e      	mov	r6, r3
 8008eec:	da0d      	bge.n	8008f0a <__swhatbuf_r+0x2e>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ef4:	f04f 0100 	mov.w	r1, #0
 8008ef8:	bf0c      	ite	eq
 8008efa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008efe:	2340      	movne	r3, #64	; 0x40
 8008f00:	2000      	movs	r0, #0
 8008f02:	6031      	str	r1, [r6, #0]
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	b016      	add	sp, #88	; 0x58
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	466a      	mov	r2, sp
 8008f0c:	f000 f848 	bl	8008fa0 <_fstat_r>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dbec      	blt.n	8008eee <__swhatbuf_r+0x12>
 8008f14:	9901      	ldr	r1, [sp, #4]
 8008f16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f1e:	4259      	negs	r1, r3
 8008f20:	4159      	adcs	r1, r3
 8008f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f26:	e7eb      	b.n	8008f00 <__swhatbuf_r+0x24>

08008f28 <__smakebuf_r>:
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f2c:	079d      	lsls	r5, r3, #30
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460c      	mov	r4, r1
 8008f32:	d507      	bpl.n	8008f44 <__smakebuf_r+0x1c>
 8008f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	6163      	str	r3, [r4, #20]
 8008f40:	b002      	add	sp, #8
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	ab01      	add	r3, sp, #4
 8008f46:	466a      	mov	r2, sp
 8008f48:	f7ff ffc8 	bl	8008edc <__swhatbuf_r>
 8008f4c:	9900      	ldr	r1, [sp, #0]
 8008f4e:	4605      	mov	r5, r0
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff f873 	bl	800803c <_malloc_r>
 8008f56:	b948      	cbnz	r0, 8008f6c <__smakebuf_r+0x44>
 8008f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f5c:	059a      	lsls	r2, r3, #22
 8008f5e:	d4ef      	bmi.n	8008f40 <__smakebuf_r+0x18>
 8008f60:	f023 0303 	bic.w	r3, r3, #3
 8008f64:	f043 0302 	orr.w	r3, r3, #2
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	e7e3      	b.n	8008f34 <__smakebuf_r+0xc>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	6120      	str	r0, [r4, #16]
 8008f7e:	b15b      	cbz	r3, 8008f98 <__smakebuf_r+0x70>
 8008f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 f81d 	bl	8008fc4 <_isatty_r>
 8008f8a:	b128      	cbz	r0, 8008f98 <__smakebuf_r+0x70>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	431d      	orrs	r5, r3
 8008f9c:	81a5      	strh	r5, [r4, #12]
 8008f9e:	e7cf      	b.n	8008f40 <__smakebuf_r+0x18>

08008fa0 <_fstat_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	; (8008fc0 <_fstat_r+0x20>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	f7f8 fc7a 	bl	80018a6 <_fstat>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d102      	bne.n	8008fbc <_fstat_r+0x1c>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b103      	cbz	r3, 8008fbc <_fstat_r+0x1c>
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20004430 	.word	0x20004430

08008fc4 <_isatty_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d06      	ldr	r5, [pc, #24]	; (8008fe0 <_isatty_r+0x1c>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	f7f8 fc79 	bl	80018c6 <_isatty>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_isatty_r+0x1a>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_isatty_r+0x1a>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20004430 	.word	0x20004430

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
